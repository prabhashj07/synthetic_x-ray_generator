{
  "version": 3,
  "sources": ["../src/core/index.tsx", "../node_modules/mz-math/src/main/format.ts", "../node_modules/mz-math/src/main/other.ts", "../node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-math/src/main/random.ts", "../node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-math/src/main/color.ts", "../node_modules/mz-math/src/main/id.ts", "../node_modules/mz-math/src/main/collision-detection.ts", "../node_modules/mz-math/src/main/animation.ts", "../node_modules/mz-math/src/main/circle-ellipse.ts", "../src/core/domain/svg-provider.ts", "../src/core/domain/defaults-provider.ts", "../src/core/domain/common-provider.ts", "../src/core/domain/circle-provider.ts", "../src/core/domain/pointers-provider.ts", "../src/core/ui/Pointer.tsx", "../src/core/domain/style-provider.ts", "../src/core/ui/Pointers.tsx", "../src/core/domain/data-provider.ts", "../src/core/ui/Connection.tsx", "../src/core/domain/connection-provider.ts", "../src/core/domain/animation-provider.ts", "../src/core/ui/Text.tsx", "../src/core/ui/Ticks.tsx", "../src/core/domain/ticks-provider.ts", "../src/core/ui/Circle.tsx", "../src/core/ui/InnerCircle.tsx"],
  "sourcesContent": ["import { useEffect, useRef, useState } from 'react';\nimport { getSvg, ISvg } from './domain/svg-provider';\nimport { angle2value, getClosestEdge, getPointers, IPointer, IPointers, roundToStep } from './domain/pointers-provider';\nimport { ISettings, ISettingsPointer } from './domain/settings-provider';\nimport { getNumber } from './domain/common-provider';\nimport {\n    DEFAULT_PATH_BORDER, DEFAULT_PATH_END_ANGLE, DEFAULT_PATH_RADIUS, DEFAULT_PATH_START_ANGLE,\n    DEFAULT_PATH_THICKNESS\n} from './domain/defaults-provider';\nimport Pointers from './ui/Pointers';\nimport { getData, IData } from './domain/data-provider';\nimport Connection from './ui/Connection';\nimport Text from './ui/Text';\nimport Ticks from './ui/Ticks';\nimport Circle from './ui/Circle';\nimport { mod } from 'mz-math';\nimport { isAngleInArc } from './domain/circle-provider';\nimport { outlineNoneStyle } from './domain/style-provider';\n\nexport const RoundSlider = (props: ISettings) => {\n\n    const [ data, setData ] = useState<IData|null>(null);\n    const [ svg, setSvg ] = useState<ISvg|null>(null);\n    const [ pointers, setPointers ] = useState<IPointers|null>(null);\n    const [ selectedPointerId, setSelectedPointerId ] = useState('');\n\n    const prevAngleDegRef = useRef<number|null>(null);\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    useEffect(() => {\n        const _data = getData(props);\n        const hasChanged = JSON.stringify(data) !== JSON.stringify(_data);\n        if(!hasChanged) return;\n\n        setData(_data);\n    }, [\n        data,\n        props\n    ]);\n\n    useEffect(() => {\n        setPointers(getPointers(props, data));\n    },\n        // eslint-disable-next-line\n        [\n        props.pointerRadius,\n        props.pathStartAngle,\n        props.pointerBgColor,\n        props.pointerBgColorSelected,\n        props.pointerBgColorDisabled,\n        props.pointerBorder,\n        props.pointerBorderColor,\n        props.disabled,\n        props.pointers,\n        props.pointerRadius,\n        props.pointerBgColor,\n        props.pointerBgColorSelected,\n        props.pointerBgColorDisabled,\n        props.pointerBorder,\n        props.pointerBorderColor,\n        props.disabled,\n        props.pathStartAngle,\n        props.pathEndAngle,\n        data,\n    ]);\n\n    useEffect(() => {\n        if(!pointers) return;\n\n        const pathStartAngle = getNumber(props.pathStartAngle, DEFAULT_PATH_START_ANGLE);\n        let pathEndAngle = getNumber(props.pathEndAngle, DEFAULT_PATH_END_ANGLE);\n\n        if(pathEndAngle <= pathStartAngle) {\n            pathEndAngle += 360;\n        }\n\n        setSvg(getSvg(\n            getNumber(props.pathRadius, DEFAULT_PATH_RADIUS),\n            getNumber(props.pathThickness, DEFAULT_PATH_THICKNESS),\n            getNumber(props.pathBorder, DEFAULT_PATH_BORDER),\n            pointers.maxRadius,\n            pathStartAngle,\n            pathEndAngle,\n        ));\n    }, [\n        props.pathRadius,\n        props.pathThickness,\n        props.pathBorder,\n        props.pathStartAngle,\n        props.pathEndAngle,\n        pointers,\n    ]);\n\n    useEffect(() => {\n        const clearSelectedPointer = (evt: MouseEvent) => {\n            const $target = evt.target as HTMLElement;\n            const $pointer = $target.closest('[data-type=\"pointer\"]');\n            if($pointer) return;\n\n            setSelectedPointerId('');\n        };\n\n        document.addEventListener('mousedown', clearSelectedPointer);\n\n        return () => {\n            document.removeEventListener('mousedown', clearSelectedPointer);\n        };\n    }, []);\n\n    const setPointersCallback = (pointer: IPointer, newAngleDeg: number) => {\n        if(props.disabled || !pointers.pointers || !pointer || pointer.disabled) return;\n\n        newAngleDeg = roundToStep(newAngleDeg, data.stepAngleDeg, svg.startAngleDeg, svg.endAngleDeg);\n        if(data.isClosedShape && mod(newAngleDeg, 360) === mod(svg.endAngleDeg, 360)){\n            newAngleDeg = svg.startAngleDeg;\n        }\n\n        if(pointer.angleDeg === newAngleDeg){\n            updatePointer(pointer, newAngleDeg, false);\n            return;\n        }\n\n        const handleOverlap = !props.pointersOverlap;\n        if(handleOverlap) {\n\n            let prevAngle, nextAngle;\n\n            if(data.isClosedShape) {\n                const prevIndex = mod(pointer.index - 1, pointers.pointers.length);\n                const nextIndex = mod(pointer.index + 1, pointers.pointers.length);\n\n                const prevPointer = pointers.pointers[prevIndex];\n                const nextPointer = pointers.pointers[nextIndex];\n\n                prevAngle = prevPointer.angleDeg;\n                nextAngle = nextPointer.angleDeg;\n\n                if(pointers.pointers.length === 2 && (prevAngle === nextAngle)) {\n\n                    const splitPointDeg = prevAngle; // === nextAngle\n\n                    if(prevAngleDegRef.current === null) {\n                        prevAngleDegRef.current = newAngleDeg;\n                    }\n                    else{\n                        // Clockwise: new angle in (splitPointDeg, splitPointDeg + 90]\n                        // Clockwise: prev angle in [splitPointDeg - 90, splitPointDeg)\n                        // CounterClockwise: new angle in [splitPointDeg - 90, splitPointDeg)\n                        // CounterClockwise: prev angle in (splitPointDeg, splitPointDeg + 90]\n\n                        const SAFE_ANGLE = 150;\n\n                        let t1 = splitPointDeg - SAFE_ANGLE;\n                        let t2 = splitPointDeg - 0.001;\n\n                        if(t1 < 0) t1 += 360;\n                        if(t2 < 0) t2 += 360;\n\n                        const clockwiseNew = isAngleInArc(splitPointDeg + 0.001, splitPointDeg + SAFE_ANGLE, newAngleDeg);\n                        const clockwisePrev = isAngleInArc(t1, t2, prevAngleDegRef.current);\n                        const clockwise = clockwiseNew && clockwisePrev;\n\n                        let t3 = splitPointDeg - SAFE_ANGLE;\n                        let t4 = splitPointDeg - 0.001;\n\n                        if(t3 < 0) t3 += 360;\n                        if(t4 < 0) t4 += 360;\n\n                        const counterClockwiseNew = isAngleInArc(t3, t4, newAngleDeg);\n                        const counterClockwisePrev = isAngleInArc(splitPointDeg + 0.001, splitPointDeg + SAFE_ANGLE, prevAngleDegRef.current);\n                        const counterClockwise = counterClockwiseNew && counterClockwisePrev;\n\n                        if(clockwise || counterClockwise) {\n                            updatePointer(pointer, splitPointDeg, true);\n                            return;\n                        }\n\n                        if(newAngleDeg !== splitPointDeg) {\n                           prevAngleDegRef.current = newAngleDeg;\n                        }\n                    }\n                }\n            }\n            else{\n                prevAngle = pointer.index === 0 ? svg.startAngleDeg : pointers.pointers[pointer.index - 1].angleDeg;\n                nextAngle = pointer.index === pointers.pointers.length - 1 ? svg.endAngleDeg : pointers.pointers[pointer.index + 1].angleDeg;\n            }\n\n            if(nextAngle <= prevAngle) {\n                nextAngle += 360;\n            }\n            else{\n                if(mod(prevAngle, 360) <= mod(nextAngle, 360)) {\n                    prevAngle = mod(prevAngle, 360);\n                    nextAngle = mod(nextAngle, 360);\n                }\n            }\n\n            if(!isAngleInArc(prevAngle, nextAngle, newAngleDeg)){\n                newAngleDeg = getClosestEdge(\n                    prevAngle,\n                    nextAngle,\n                    newAngleDeg,\n                    svg.cx,\n                    svg.cy,\n                    svg.radius\n                );\n            }\n        }\n\n        updatePointer(pointer, newAngleDeg, pointer.angleDeg !== newAngleDeg);\n    };\n\n    const updatePointer = (pointer: IPointer, newAngleDeg: number, angleChanged: boolean) => {\n\n        if(angleChanged) {\n            const _pointers = { ...pointers };\n            _pointers.pointers = [...pointers.pointers];\n            _pointers.pointers[pointer.index].prevAngleDeg = _pointers.pointers[pointer.index].angleDeg;\n            _pointers.pointers[pointer.index].angleDeg = newAngleDeg;\n            pointers.pointers = _pointers.pointers;\n\n            setPointers(_pointers);\n\n            if(typeof props.onChange === 'function') {\n\n                const updatedPointers: ISettingsPointer[] = _pointers.pointers.map(pointer => {\n\n                    const val = angle2value(\n                        data,\n                        pointer.angleDeg,\n                        svg.startAngleDeg,\n                        svg.endAngleDeg\n                    );\n\n                    return {\n                        radius: pointer.radius,\n                        value: val,\n                        bgColor: pointer.bgColor,\n                        bgColorSelected: pointer.bgColorSelected,\n                        bgColorDisabled: pointer.bgColorDisabled,\n                        border: pointer.border,\n                        borderColor: pointer.borderColor,\n                        disabled: pointer.disabled,\n                        ariaLabel: pointer.ariaLabel,\n                    };\n                });\n\n                props.onChange(updatedPointers);\n            }\n        }\n\n        setSelectedPointerId(pointer.id);\n\n        const $pointer = svgRef.current?.querySelector(`[data-id=\"${ pointer.id }\"]`) as HTMLElement;\n        if($pointer) {\n            $pointer.focus();\n        }\n    };\n\n    return (\n        <>\n            {\n                svg &&\n                <svg\n                    ref={ svgRef }\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width={ svg.size }\n                    height={ svg.size }\n                    tabIndex={ 0 }\n                    focusable={ true }\n                    aria-disabled={ props.disabled ? true : undefined }\n                    style={ props.svgBgColor ? { ...outlineNoneStyle, backgroundColor: props.svgBgColor } : outlineNoneStyle }\n                    className={ `mz-round-slider ${ props.disabled ? 'mz-round-slider-disabled' : '' }` }>\n\n                    {\n                        (props.SvgDefs) &&\n                        <defs>\n                            { props.SvgDefs }\n                        </defs>\n                    }\n\n                    <Circle\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        $svg={ svgRef.current }\n                        setPointer={ setPointersCallback }\n                    />\n\n                    <Ticks settings={ props } svg={ svg } data={ data } />\n\n                    <Connection\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        $svg={ svgRef.current }\n                        data={ data }\n                        setPointer={ setPointersCallback }\n                    />\n\n                    <Pointers\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        $svg={ svgRef.current }\n                        data={ data }\n                        setPointer={ setPointersCallback }\n                        selectedPointerId={ selectedPointerId }\n                    />\n\n                    <Text\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        data={ data }\n                    />\n                </svg>\n            }\n        </>\n    )\n};", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from '../types';\nimport { setDecimalPlaces } from './format';\n\nexport const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n\n/**\n * Convert polar coordinates to cartesian coordinates.\n */\nexport const polarToCartesian = (center: Vector2, radii: Vector2, angleInRad: number, decimalPlaces = Infinity) : Vector2 => {\n    const [cx, cy] = center;\n    const [rx, ry] = radii;\n\n    return [\n        setDecimalPlaces(cx + (rx * Math.cos(angleInRad)), decimalPlaces),\n        setDecimalPlaces(cy + (ry * Math.sin(angleInRad)), decimalPlaces),\n    ];\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\nimport { mod } from './other';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleInEllipse = (v2: Vector2, radii: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1]/radii[1], v2[0]/radii[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};\n\nexport const isAngleBetween = (angleDegrees: number, startAngleDegrees: number, endAngleDegrees: number) : boolean => {\n    const distance = getAnglesSub(startAngleDegrees, endAngleDegrees);\n    const distance1 = getAnglesSub(startAngleDegrees, angleDegrees);\n    const distance2 = getAnglesSub(endAngleDegrees, angleDegrees);\n    const totalDistance = distance1 + distance2;\n\n    // Use a small threshold for floating point errors\n    return Math.abs(totalDistance - distance) <= 0.001;\n}\n\nexport const isClockwise = (angle1Deg: number, angle2Deg: number, startAngleDeg = 0) => {\n    angle1Deg = angle1Deg % 360;\n    angle2Deg = angle2Deg % 360;\n\n    if(angle1Deg < startAngleDeg) {\n        angle1Deg += 360;\n    }\n\n    if(angle2Deg < startAngleDeg) {\n        angle2Deg += 360;\n    }\n\n    return angle2Deg >= angle1Deg;\n};\n\n/**\n * Shortest distance (angular) between two angles.\n */\nexport const getAnglesSub = (angleDegrees1: number, angleDegrees2: number, decimalPlaces = Infinity) : number => {\n    const angleDistance = Math.abs(mod(angleDegrees1, 360) - mod(angleDegrees2, 360));\n    return setDecimalPlaces(angleDistance <= 180 ? angleDistance : 360 - angleDistance, decimalPlaces);\n};\n\nexport const getAnglesDistance = (angle1Deg: number, angle2Deg: number, startAngleDeg = 0, decimalPlaces = Infinity) => {\n    angle1Deg = angle1Deg % 360;\n    angle2Deg = angle2Deg % 360;\n\n    if(angle1Deg < startAngleDeg) {\n        angle1Deg += 360;\n    }\n\n    if(angle2Deg < startAngleDeg) {\n        angle2Deg += 360;\n    }\n\n    if(isClockwise(angle1Deg, angle2Deg, startAngleDeg)) {\n        return setDecimalPlaces((angle2Deg - angle1Deg + 360) % 360, decimalPlaces);\n    }\n    else{\n        return setDecimalPlaces((angle1Deg - angle2Deg + 360) % 360, decimalPlaces);\n    }\n};\n\nexport const percentToAngle = (percent: number, startAngleDeg: number, endAngleDeg: number, circleStartAngle = 0) => {\n    if(percent < 0) {\n        percent = 0;\n    }\n\n    if(percent > 100) {\n        percent = 100;\n    }\n\n    const distance = getAnglesDistance(startAngleDeg, endAngleDeg, circleStartAngle);\n\n    const clockwise = isClockwise(startAngleDeg, endAngleDeg, circleStartAngle);\n    if(clockwise) {\n        return mod(circleStartAngle + (percent * distance / 100), 360);\n    }\n    else {\n        return mod(circleStartAngle - (percent * distance / 100), 360);\n    }\n};", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};\n\n// --------------- NORMAL --------------------------\n\nexport const v2GetNormal = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity): Vector2 => {\n    const sub = v2Sub(vector2, vector1);\n    return [\n        -setDecimalPlaces(sub[1], decimalPlaces),\n        setDecimalPlaces(sub[0], decimalPlaces)\n    ];\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const scale = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, scale);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\nimport { v2Sub } from '../linear-algebra/vector';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};\n\n/**\n * Calculate the equation of a line given two points in a 2D space.\n * y = ax + b\n * y - y1 = m(x - x1)\n * m = (y2 - y1) / (x2 - x1)\n */\nexport const getLinearEquationBy2Points = (point1: Vector2, point2: Vector2) : {\n    slope: number|undefined,\n    yIntercept: number|undefined,\n    xIntercept: number|undefined,\n    formula: string,\n} => {\n    const [deltaX, deltaY] = v2Sub(point2, point1);\n    const [x, y] = point1;\n\n    if(deltaX === 0) {\n        return {\n            slope: undefined,\n            xIntercept: x,\n            yIntercept: undefined,\n            formula: `x = ${ x }`,\n        };\n    }\n\n    const m = deltaY / deltaX;\n    const b = y - m * x;\n    let formula = '';\n\n    if(m === 0) {\n        formula = `y = ${ b }`;\n    }\n    else{\n        formula = `y = ${ m === 1 ? '' : m }x`;\n\n        if(b !== 0) {\n            formula += ` ${ b < 0 ? '-' : '+' } ${ Math.abs(b) }`;\n        }\n    }\n\n    return {\n        slope: m,\n        xIntercept: undefined,\n        yIntercept: b,\n        formula,\n    };\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Ellipse Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const ellipseMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radii: Vector2\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return ellipseMovement(center, angle, radii[0], radii[1]);\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { ICircle, IPolygon, IRect, Matrix2, Vector2 } from '../types';\nimport { mod } from './other';\nimport { v2GetNormal, v2DotProduct } from './linear-algebra/vector';\n\n/**\n * Rectangles collision detection.\n * Rectangles should not be rotated.\n * The algorithm works by ensuring there is no gap between any of the 4 sides of the rectangles.\n * Any gap means a collision does not exist.\n * Returns true if collision is detected.\n */\nexport const rectCollide = (rect1: IRect, rect2: IRect) : boolean => {\n    return rect1.x <= rect2.x + rect2.w &&\n            rect1.x + rect1.w >= rect2.x &&\n            rect1.y <= rect2.y + rect2.h &&\n            rect1.h + rect1.y >= rect2.y;\n};\n\n/**\n * Circles collision detection.\n * This algorithm works by taking the center points of the two circles\n * and ensuring the distance between the center points\n * are less than the two radii added together.\n * Returns true if collision is detected.\n */\nexport const circleCollide = (circle1: ICircle, circle2: ICircle) => {\n    const dx = Math.abs(circle1.cx - circle2.cx);\n    const dy = Math.abs(circle1.cy - circle2.cy);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= circle1.r + circle2.r;\n};\n\n//-------------------- Separating Axis Theorem (SAT) Collision detection -------------------------\n\nconst getEdges = (poly: IPolygon) : Matrix2[] => {\n    const edges: Matrix2[] = [];\n\n    for(let i= 0; i<poly.length; i++){\n        const nextIndex = mod(i + 1, poly.length);\n        const edge: Matrix2 = [poly[i], poly[nextIndex]];\n        edges.push(edge);\n    }\n\n    return edges;\n};\n\nexport const convexPolygonsCollide = (poly1: IPolygon, poly2: IPolygon): boolean => {\n    const edges: Matrix2[] = [];\n\n    // collect polygon edges, and combine then into a single array\n    edges.push(...getEdges(poly1));\n    edges.push(...getEdges(poly2));\n\n    // for each edge, find the normal vector and project both polygons onto it\n    for (const edge of edges) {\n        const normal = v2GetNormal(edge[0], edge[1]);\n        const p1Proj = projectPolygon(poly1, normal);\n        const p2Proj = projectPolygon(poly2, normal);\n\n        // Check if the projections overlap\n        const isOverlap = p1Proj.max >= p2Proj.min && p2Proj.max >= p1Proj.min;\n\n        // Check if the projections overlap; if not, the polygons do not collide\n        if (!isOverlap) return false;\n    }\n\n    // If all tests pass, the polygons overlap and collide\n    return true;\n};\n\n/**\n * Project every polygon point onto the normal.\n * Then find min and max.\n */\nconst projectPolygon = (polygon: IPolygon, normal: Vector2): { min: number, max: number } => {\n    let min = Infinity;\n    let max = -Infinity;\n\n    // Project each vertex of the polygon onto the axis\n    for (const vertex of polygon) {\n        const projection = v2DotProduct(vertex, normal);\n        min = Math.min(min, projection);\n        max = Math.max(max, projection);\n    }\n\n    return { min, max };\n};", "export interface IAnimationProps {\n    duration?: number;\n    callback: (result: IAnimationResult) => void;\n    restartOnResize?: boolean;\n    resizeCallback?: (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => void;\n}\n\nexport interface IAnimationResult {\n    start: () => void;\n    stop: () => void;\n    pause: () => void;\n    resume: () => void;\n    restart: () => void;\n    isAnimating: () => boolean;\n    getStartTime: () => number|undefined;\n    getElapsedTime: () => number|undefined;\n    getPercent: () => number|undefined;\n    getResizeObserver: () => ResizeObserver|undefined;\n}\n\nexport const animate = (props: IAnimationProps) : IAnimationResult => {\n\n    const _duration = props.duration !== undefined ? props.duration : Infinity;\n\n    let startTime: number|undefined = undefined; // in milliseconds\n    let animationId: number|undefined = undefined;\n\n    // the time elapsed since the start of the animation (in milliseconds)\n    let elapsed: number|undefined = undefined;\n    let previousTimeStamp: number|undefined = undefined;\n\n    let animating = false;\n    let observer: ResizeObserver|undefined = undefined;\n\n    // -------------------- COMMANDS ---------------------\n\n    const stop = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = false;\n\n        /*if(observer !== undefined){\n            observer.disconnect();\n            observer = undefined;\n        }*/\n\n        if(animationId === undefined) return;\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const restart = () => {\n        stop();\n        start();\n    };\n\n    const pause = () => {\n        animating = false;\n    };\n\n    const resume = () => {\n        animating = true;\n    };\n\n    /**\n     * Animation Step.\n     * @param {number} timeStamp in milliseconds\n     */\n    const step = (timeStamp: DOMHighResTimeStamp) => {\n\n        if (startTime === undefined) {\n            startTime = timeStamp;\n        }\n\n        // the time elapsed since the start of the animation (in milliseconds)\n        elapsed = timeStamp - startTime;\n\n        if (animating && previousTimeStamp !== timeStamp && typeof props.callback === 'function') {\n\n            // do the rendering .............\n            props.callback(getResult());\n        }\n\n        if(elapsed <= _duration){\n            previousTimeStamp = timeStamp;\n            animationId = window.requestAnimationFrame(step);\n        }\n        else{\n            stop();\n        }\n    };\n\n    const observerHandler = (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => {\n        restart();\n\n        if(typeof props.resizeCallback === 'function'){\n            props.resizeCallback(_entries, _observer);\n        }\n    };\n\n    const start = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = true;\n\n        if(props.restartOnResize && window.ResizeObserver && observer === undefined){\n            observer = new ResizeObserver(observerHandler);\n            observer.observe(document.body, { box: 'border-box' });\n        }\n        else{\n            animationId = window.requestAnimationFrame(step);\n        }\n    };\n\n    // --------------- GET INFO ----------------------\n\n    /**\n     * the time elapsed since the start of the animation (in milliseconds)\n     */\n    const getElapsedTime = () : number|undefined => {\n        return elapsed;\n    };\n\n    const isAnimating = () => {\n        return animating;\n    };\n\n    const getStartTime = () => {\n        return startTime;\n    };\n\n    const getPercent = () => {\n        if(_duration === Infinity || elapsed === undefined) return undefined;\n        return elapsed * 100 / _duration;\n    };\n\n    const getResizeObserver = () => {\n      return observer;\n    };\n\n    const getResult = () : IAnimationResult => {\n        return {\n\n            // commands --------------\n            start,\n            stop,\n            pause,\n            resume,\n            restart,\n\n            // information -------\n            isAnimating,\n            getElapsedTime,\n            getStartTime,\n            getPercent,\n            getResizeObserver,\n        };\n    };\n\n    return getResult();\n};\n", "import { setDecimalPlaces } from './format';\n\nexport const getCircleCircumference = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(2 * Math.PI * radius, decimalPlaces);\n};\n\nexport const getEllipseCircumference = (radius1: number, radius2: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(2 * Math.PI * Math.sqrt((radius1 ** 2 + radius2 ** 2) / 2), decimalPlaces);\n};\n\nexport const isAngleInCircleArc = (startAngleDeg: number, endAngleDeg: number, currentDegrees: number) : boolean => {\n\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    return currentDegrees >= startAngleDeg && currentDegrees <= endAngleDeg ||\n        (currentDegrees + 360) >= startAngleDeg && (currentDegrees + 360) <= endAngleDeg;\n};\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { setDecimalPlaces, Vector2 } from 'mz-math';\n\nexport interface ISvg {\n    cx: number;\n    cy: number;\n    radius: number;\n    size: number;\n    thickness: number;\n    border: number;\n    startAngleDeg: number;\n    endAngleDeg: number;\n}\n\nexport const getSvg = (\n    circleRadius: number,\n    circleThickness: number,\n    circleBorder: number,\n    maxPointerRadius: number,\n    startAngleDeg: number,\n    endAngleDeg: number\n) : ISvg => {\n\n    const thickness = circleThickness + circleBorder * 2;\n\n    const diff = Math.max(0, maxPointerRadius * 2 - thickness);\n    const size = circleRadius * 2 + thickness + diff;\n\n    const [ cx, cy ] = getSVGCenter(\n        circleRadius,\n        maxPointerRadius,\n        circleThickness,\n        circleBorder\n    );\n\n    return {\n        cx,\n        cy,\n        radius: circleRadius,\n        size,\n        thickness: circleThickness,\n        border: circleBorder,\n        startAngleDeg,\n        endAngleDeg\n    } as ISvg;\n};\n\nexport const getSVGCenter = (\n    circleRadius: number,\n    maxPointerRadius: number,\n    circleThickness: number,\n    circleBorder: number\n) : Vector2 => {\n\n    const size = getSVGSize(\n        circleRadius,\n        maxPointerRadius,\n        circleThickness,\n        circleBorder\n    );\n\n    const val = setDecimalPlaces(size/2, 2);\n\n    return [\n        val,\n        val,\n    ];\n};\n\nexport const getSVGSize = (\n    circleRadius: number,\n    maxPointerRadius: number,\n    circleThickness: number,\n    circleBorder: number\n) : number => {\n    const thickness = circleThickness + circleBorder * 2;\n    const diff = Math.max(0, maxPointerRadius * 2 - thickness);\n    return circleRadius * 2 + thickness + diff;\n};", "// Data  Defaults --------------------\nexport const DEFAULT_MIN = 0;\nexport const DEFAULT_MAX = 100;\nexport const DEFAULT_STEP = 1;\nexport const DEFAULT_ARROW_STEP = 1;\nexport const DEFAULT_ROUND = 0;\n\n// Path Defaults ---------------------\nexport const DEFAULT_PATH_START_ANGLE = 0;\nexport const DEFAULT_PATH_END_ANGLE = 360;\nexport const DEFAULT_PATH_RADIUS = 150;\nexport const DEFAULT_PATH_THICKNESS = 5;\nexport const DEFAULT_PATH_BG_COLOR = '#efefef';\nexport const DEFAULT_PATH_BORDER = 0;\nexport const DEFAULT_PATH_BORDER_COLOR = '#444444';\n\n// Pointer Defaults ------------------\nexport const DEFAULT_POINTER_RADIUS = 10;\nexport const DEFAULT_POINTER_BG_COLOR = '#163a86';\nexport const DEFAULT_POINTER_BG_COLOR_SELECTED = '#000';\nexport const DEFAULT_POINTER_BG_COLOR_DISABLED = '#a8a8a8';\nexport const DEFAULT_POINTER_BORDER = 0;\nexport const DEFAULT_POINTER_BORDER_COLOR = '#000';\n\n// Connection Defaults ------------------\nexport const DEFAULT_CONNECTION_BG_COLOR = '#5daed2';\nexport const DEFAULT_CONNECTION_BG_COLOR_DISABLED = '#97b0bb';\n\n// Text Defaults ------------------------\nexport const DEFAULT_TEXT_COLOR = '#000';\nexport const DEFAULT_TEXT_FONT_SIZE = 16;\n\n// Ticks Defaults -----------------------\nexport const DEFAULT_TICKS_ENABLED = false;\nexport const DEFAULT_TICKS_WIDTH = 3;\nexport const DEFAULT_TICKS_HEIGHT = 10;\nexport const DEFAULT_TICKS_COLOR = '#efefef';\nexport const DEFAULT_TICKS_VALUES_COLOR = '#000';\nexport const DEFAULT_TICKS_VALUES_FONT_SIZE = 12;\nexport const DEFAULT_TICKS_GROUP_SIZE = 10;\nexport const DEFAULT_TICKS_VALUES_DISTANCE = 15;\n\n// Animation Defaults -----------------------\nexport const DEFAULT_ANIMATION_DURATION = 200;\n\n\n", "import { isNumber } from 'mz-math';\n\nexport const getNumber = (value: number|string|undefined|null, defaultValue: number) : number => {\n    return isNumber(value) ? Number(value) : defaultValue;\n};\n\nexport const getString = (value: string|undefined|null, defaultValue: string) : string => {\n    return value === undefined || value === null ? defaultValue : value;\n};\n\nexport const getBoolean = (value: boolean|undefined|null, defaultValue: boolean) : boolean => {\n    return value === undefined || value === null ? defaultValue : value;\n};", "import { mod } from 'mz-math';\n\nexport interface ICircle {\n    strokeDasharray: string;\n    strokeOffset: number;\n}\n\nexport const isAngleInArc = (startAngleDeg: number, endAngleDeg: number, currentDegrees: number) : boolean => {\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    return (currentDegrees >= startAngleDeg && currentDegrees <= endAngleDeg) ||\n        ((currentDegrees + 360) >= startAngleDeg && (currentDegrees + 360) <= endAngleDeg);\n};\n\nexport const getAnglesDistance = (startAngle: number, endAngle: number) => {\n    if(endAngle < startAngle) {\n        endAngle += 360;\n    }\n\n    const diff = endAngle - startAngle;\n    const diffMod = mod(diff, 360);\n\n    return diffMod === 0 && diff > 0 ? 360 : diffMod;\n};\n\nexport const getCircle = (\n    startAngleDeg: number,\n    endAngleDeg: number,\n    radius: number,\n) : ICircle => {\n\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    const circumference = 2 * Math.PI * radius;\n    const angleDiff = endAngleDeg - startAngleDeg;\n    const strokeOffset = -(startAngleDeg / 360) * circumference;\n    const strokeDasharray = (angleDiff / 360) * circumference;\n    const complement = circumference - strokeDasharray;\n\n    return {\n        strokeDasharray: [ strokeDasharray, complement ].join(' '),\n        strokeOffset,\n    } as ICircle;\n};", "import {\n    Vector2,\n    convertRange,\n    mod,\n    setDecimalPlaces,\n    v2Sub,\n    radiansToDegrees,\n    degreesToRadians, circleMovement, v2Distance\n} from 'mz-math';\nimport { ISettings } from './settings-provider';\nimport {\n    DEFAULT_PATH_END_ANGLE,\n    DEFAULT_PATH_START_ANGLE,\n    DEFAULT_POINTER_BG_COLOR,\n    DEFAULT_POINTER_BG_COLOR_DISABLED,\n    DEFAULT_POINTER_BG_COLOR_SELECTED,\n    DEFAULT_POINTER_BORDER,\n    DEFAULT_POINTER_BORDER_COLOR,\n    DEFAULT_POINTER_RADIUS,\n} from './defaults-provider';\nimport { getBoolean, getNumber, getString } from './common-provider';\nimport { IData } from './data-provider';\nimport { getAnglesDistance } from './circle-provider';\n\nexport interface IPointer {\n    id: string;\n    index: number;\n    radius: number;\n    angleDeg: number;\n    prevAngleDeg: number;\n\n    bgColor: string;\n    bgColorSelected: string;\n    bgColorDisabled: string;\n    bgColorHover: string;\n\n    border: number;\n    borderColor: string;\n\n    disabled: boolean;\n    ariaLabel?: string;\n}\n\nexport interface IPointers {\n    pointers: IPointer[];\n    maxRadius: number;\n}\n\nexport const getAngleByMouse = (\n    $svg: SVGSVGElement,\n    clientX: number,\n    clientY: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number\n) => {\n    const { left, top } = $svg.getBoundingClientRect();\n\n    const relativeMouse: Vector2 = [\n        clientX - left,\n        clientY - top,\n    ];\n\n    const vector = v2Sub(relativeMouse, [ cx, cy ]);\n\n    let angleRad = Math.atan2(vector[1] / ry, vector[0] / rx);\n    if(angleRad < 0){\n        angleRad += 2 * Math.PI;\n    }\n\n    return radiansToDegrees(angleRad);\n};\n\nexport const angle2value = (data: IData, angle: number, pathStartAngle: number, pathEndAngle: number) : string | number => {\n\n    if(pathEndAngle < pathStartAngle) {\n        pathEndAngle += 360;\n    }\n\n    if(angle < pathStartAngle){\n        angle += 360;\n    }\n\n    let value: string|number = convertRange(angle, pathStartAngle, pathEndAngle, data.min, data.max);\n\n    if(data.data.length > 0) {\n        const index = Math.round(value);\n        value = data.data[index];\n    }\n    else{\n        value = setDecimalPlaces(value, data.round);\n    }\n\n    return value;\n};\n\nconst value2angle = (data: IData, value: string | number, pathStartAngle: number, pathEndAngle: number) => {\n    let _value: number;\n\n    if(pathEndAngle < pathStartAngle) {\n        pathEndAngle += 360;\n    }\n\n    if(data.data.length > 0) {\n        const valueIndex = data.data.findIndex(item => item === value);\n        _value = valueIndex === -1 ? 0 : valueIndex;\n    }\n    else{\n        _value = typeof value !== 'number' ? data.min : value;\n    }\n\n    return mod(convertRange(_value, data.min, data.max, pathStartAngle, pathEndAngle), 360);\n};\n\nexport const initPointers = (\n    settings: ISettings,\n    data: IData\n) : IPointer[] => {\n\n    if(!settings || !settings.pointers || settings.pointers.length < 0 || !data) {\n        const angleDeg = mod(getNumber(settings.pathStartAngle, DEFAULT_PATH_START_ANGLE), 360);\n\n        const bgColor = getString(settings.pointerBgColor, DEFAULT_POINTER_BG_COLOR);\n        const bgColorSelected = getString(settings.pointerBgColorSelected, DEFAULT_POINTER_BG_COLOR_SELECTED);\n        const bgColorDisabled = getString(settings.pointerBgColorDisabled, DEFAULT_POINTER_BG_COLOR_DISABLED);\n        const bgColorHover = getString(settings.pointerBgColorHover, bgColorSelected);\n\n        return [{\n            id: '0',\n            index: 0,\n            radius: getNumber(settings.pointerRadius, DEFAULT_POINTER_RADIUS),\n            angleDeg,\n            prevAngleDeg: angleDeg,\n            bgColor,\n            bgColorSelected,\n            bgColorDisabled,\n            bgColorHover,\n            border: getNumber(settings.pointerBorder, DEFAULT_POINTER_BORDER),\n            borderColor: getString(settings.pointerBorderColor, DEFAULT_POINTER_BORDER_COLOR),\n            disabled: !!settings.disabled,\n        }]\n    }\n\n    const pointers: IPointer[] = [];\n\n    for(let i=0; i<settings.pointers.length; i++) {\n        const settingPointer = settings.pointers[i];\n\n        const radius = settingPointer.radius !== undefined ? settingPointer.radius : getNumber(settings.pointerRadius, DEFAULT_POINTER_RADIUS);\n        const bgColor = settingPointer.bgColor ? settingPointer.bgColor : getString(settings.pointerBgColor, DEFAULT_POINTER_BG_COLOR);\n        const bgColorSelected = settingPointer.bgColorSelected ? settingPointer.bgColorSelected : getString(settings.pointerBgColorSelected, DEFAULT_POINTER_BG_COLOR_SELECTED);\n        const bgColorDisabled = settingPointer.bgColorDisabled ? settingPointer.bgColorDisabled : getString(settings.pointerBgColorDisabled, DEFAULT_POINTER_BG_COLOR_DISABLED);\n        const bgColorHover = settingPointer.bgColorHover ? settingPointer.bgColorHover : getString(settings.pointerBgColorHover, bgColorSelected);\n\n        const border = settingPointer.border ? settingPointer.border : getNumber(settings.pointerBorder, DEFAULT_POINTER_BORDER);\n        const borderColor = settingPointer.borderColor ? settingPointer.borderColor : getString(settings.pointerBorderColor, DEFAULT_POINTER_BORDER_COLOR);\n\n        const disabled = settingPointer.disabled !== undefined ? settingPointer.disabled : getBoolean(settings.disabled, false);\n        const pathStartAngle = getNumber(settings.pathStartAngle, DEFAULT_PATH_START_ANGLE);\n        const pathEndAngle = getNumber(settings.pathEndAngle, DEFAULT_PATH_END_ANGLE);\n\n        const angleDeg = value2angle(\n            data,\n            settingPointer.value,\n            pathStartAngle,\n            pathEndAngle,\n        );\n\n        let angleAfterStep = roundToStep(angleDeg, data.stepAngleDeg, pathStartAngle, pathEndAngle);\n\n        if(data.isClosedShape && mod(angleAfterStep, 360) === mod(pathEndAngle, 360)){\n            angleAfterStep = pathStartAngle;\n        }\n\n        pointers.push({\n            id: i.toString(),\n            index: i,\n            radius,\n            angleDeg: angleAfterStep,\n            prevAngleDeg: angleAfterStep,\n\n            bgColor,\n            bgColorSelected,\n            bgColorDisabled,\n            bgColorHover,\n\n            border,\n            borderColor,\n\n            disabled,\n            ariaLabel: settingPointer.ariaLabel,\n        });\n    }\n\n    return pointers;\n};\n\nexport const getPointers = (settings: ISettings, data: IData) : IPointers => {\n\n    const pointers = initPointers(settings, data);\n\n    return {\n        pointers,\n        maxRadius: getMaxRadius(pointers),\n    }\n};\n\nconst getMaxRadius = (pointers: IPointer[]) : number => {\n    if(pointers.length <= 0) return 0;\n\n    let max = -Infinity;\n\n    for(const pointer of pointers){\n        max = Math.max(max, Math.max(0, pointer.radius + pointer.border/2));\n    }\n\n    return max;\n};\n\nexport const getClosestPointer = (\n    pointers: IPointer[],\n    currentPlaceDegrees: number,\n    cx: number,\n    cy: number,\n    pathRadius: number\n) => {\n    if(!pointers || pointers.length <= 0) return null;\n\n    if(pointers.length === 1) return pointers[0];\n\n    const angleRad = convertRange(degreesToRadians(currentPlaceDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const currentPointOnArc = circleMovement([ cx, cy ], angleRad, pathRadius);\n\n    let min: number|undefined = undefined;\n    let closestPointer: IPointer = null;\n\n    const enabledPointers = pointers.filter(p => !p.disabled);\n\n    for(const pointer of enabledPointers) {\n        const pointerAngleRad = convertRange(degreesToRadians(pointer.angleDeg), 0, Math.PI * 2, 0, Math.PI);\n        const pointOnArc = circleMovement([ cx, cy ], pointerAngleRad, pathRadius);\n        const distance = v2Distance(currentPointOnArc, pointOnArc);\n\n        if(min === undefined || distance < min) {\n            min = distance;\n            closestPointer = pointer;\n        }\n    }\n\n    return { ...closestPointer };\n};\n\nexport const getClosestEdge = (\n    startAngleDegrees: number,\n    endAngleDegrees: number,\n    currentPlaceDegrees: number,\n    cx: number,\n    cy: number,\n    pathRadius: number\n) => {\n\n    const angleRad = convertRange(degreesToRadians(currentPlaceDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const currentPointOnArc = circleMovement([ cx, cy ], angleRad, pathRadius);\n\n    const startAngleRad = convertRange(degreesToRadians(startAngleDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const startPointOnArc = circleMovement([ cx, cy ], startAngleRad, pathRadius);\n\n    const endAngleRad = convertRange(degreesToRadians(endAngleDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const endPointOnArc = circleMovement([ cx, cy ], endAngleRad, pathRadius);\n\n    const distance1 = v2Distance(currentPointOnArc, startPointOnArc);\n    const distance2 = v2Distance(currentPointOnArc, endPointOnArc);\n\n    return distance1 <= distance2 ? startAngleDegrees : endAngleDegrees;\n};\n\nexport const getMinMaxDistancePointers = (pointers: IPointer[], pathStartAngle: number) : [IPointer, IPointer] | null => {\n    if(!pointers || pointers.length <= 0) return null;\n\n    let minDistance = undefined;\n    let maxDistance = undefined;\n    let minPointer = null;\n    let maxPointer = null;\n\n    for(const pointer of pointers) {\n\n        const distance = getAnglesDistance(pathStartAngle, pointer.angleDeg);\n\n        if(minDistance === undefined || distance < minDistance) {\n            minPointer = pointer;\n            minDistance = distance;\n        }\n\n        if(maxDistance === undefined || distance > maxDistance) {\n            maxPointer = pointer;\n            maxDistance = distance;\n        }\n    }\n\n    if(minPointer === null || maxPointer === null) return null;\n\n    return [\n        minPointer,\n        maxPointer\n    ];\n};\n\nexport const roundToStep = (angleDeg: number, step: number, pathStartAngle: number, pathEndAngle: number) : number => {\n    if((mod(angleDeg, 360) === mod(pathStartAngle, 360)) ||\n        (mod(angleDeg, 360) === mod(pathEndAngle, 360))) return angleDeg;\n    return step === 0 ? 0 : Math.round(angleDeg / step) * step;\n};\n", "import { angle2value, getAngleByMouse, getClosestEdge, IPointer } from '../domain/pointers-provider';\nimport {\n    useEffect,\n    useState,\n    MouseEvent as ReactMouseEvent,\n    TouchEvent as ReactTouchEvent,\n    KeyboardEvent,\n    useRef, useCallback,\n} from 'react';\nimport { circleMovement, convertRange, degreesToRadians, Vector2 } from 'mz-math';\nimport { ISettings } from '../domain/settings-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { isAngleInArc } from '../domain/circle-provider';\nimport { IData } from '../domain/data-provider';\nimport { outlineNoneStyle } from '../domain/style-provider';\nimport { DEFAULT_POINTER_BG_COLOR } from '../domain/defaults-provider';\n\nexport interface IPointerProps {\n    settings: ISettings;\n    pointer: IPointer;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    data: IData;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n    selectedPointerId: string;\n}\n\nconst getPointerFill = (\n    pointer: IPointer,\n    selectedPointerId: string,\n    bgColor: string,\n    bgColorSelected: string,\n    bgColorDisabled: string,\n    bgColorHover: string,\n    isMouseOver: boolean\n) => {\n    if(pointer.disabled) return bgColorDisabled;\n\n    if(isMouseOver) return bgColorHover;\n\n    if(pointer.id === selectedPointerId) {\n        return bgColorSelected;\n    }\n\n    return bgColor;\n};\n\nconst Pointer = (props: IPointerProps) => {\n\n    const pointerRef = useRef<SVGGElement|null>(null);\n\n    const {\n        pointer, svg, $svg, data, settings,\n        setPointer, selectedPointerId,\n    } = props;\n\n    const {\n        radius,\n        angleDeg,\n        bgColor,\n        bgColorSelected,\n        bgColorDisabled,\n        bgColorHover,\n        border,\n        borderColor,\n    } = props.pointer;\n\n    const { cx, cy } = svg;\n\n    const [ center, setCenter ] = useState<Vector2|null>(null);\n    const [ value, setValue ] = useState<string>('');\n    const [ fill, setFill ] = useState(DEFAULT_POINTER_BG_COLOR);\n    const [ isMouseOver, setIsMouseOver ] = useState(false);\n\n    useEffect(() => {\n        setFill(getPointerFill(\n            pointer,\n            selectedPointerId,\n            bgColor,\n            bgColorSelected,\n            bgColorDisabled,\n            bgColorHover,\n            isMouseOver\n        ));\n    }, [\n        pointer,\n        selectedPointerId,\n        bgColor,\n        bgColorSelected,\n        bgColorDisabled,\n        bgColorHover,\n        isMouseOver\n    ]);\n\n    useEffect(() => {\n        const value = angle2value(\n            data,\n            pointer.angleDeg,\n            svg.startAngleDeg,\n            svg.endAngleDeg\n        );\n        setValue(value === undefined ? '' : value.toString())\n    }, [\n        data,\n        pointer.angleDeg,\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n    ]);\n\n    useEffect(() => {\n        const angleRad = convertRange(degreesToRadians(angleDeg), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n        const pointerCenter = circleMovement([cx, cy], angleRad, svg.radius);\n        setCenter(pointerCenter);\n    }, [\n        angleDeg,\n        cx,\n        cy,\n        svg.radius,\n    ]);\n\n    const onValueChange = useCallback((evt: MouseEvent | ReactMouseEvent | TouchEvent | ReactTouchEvent) => {\n        if(!$svg || settings.disabled || pointer.disabled) return;\n\n        const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n        const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n\n        const degrees = getAngleByMouse(\n            $svg,\n            mouseX,\n            mouseY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        let newAngleDeg;\n\n        if(!isAngleInArc(\n            svg.startAngleDeg,\n            svg.endAngleDeg,\n            degrees\n        )){\n            newAngleDeg = getClosestEdge(\n                svg.startAngleDeg,\n                svg.endAngleDeg,\n                pointer.angleDeg,\n                svg.cx,\n                svg.cy,\n                svg.radius\n            );\n        }\n        else{\n            newAngleDeg = degrees;\n        }\n\n        setPointer(pointer, newAngleDeg);\n    }, [\n        $svg,\n        pointer,\n        setPointer,\n        svg.cx,\n        svg.cy,\n        svg.endAngleDeg,\n        svg.radius,\n        svg.startAngleDeg,\n        settings.disabled,\n    ]);\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onValueChange);\n        window.removeEventListener('mouseup', onValueChange);\n    };\n\n    const onMouseDown = (evt: ReactMouseEvent) => {\n        if(settings.disabled || pointer.disabled) return;\n\n        onValueChange(evt);\n\n        window.addEventListener('mousemove', onValueChange);\n        window.addEventListener('mouseup', onMouseUp);\n    };\n\n    const onKeyDown = (evt: KeyboardEvent) => {\n\n        if(settings.disabled || pointer.disabled || settings.keyboardDisabled) return;\n\n        switch (evt.key) {\n            case 'ArrowLeft': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg + data.arrowStepAngleDeg);\n                break;\n            }\n\n            case 'ArrowRight': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg - data.arrowStepAngleDeg);\n                break;\n            }\n\n            case 'ArrowUp': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg - data.arrowStepAngleDeg);\n                break;\n            }\n\n            case 'ArrowDown': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg + data.arrowStepAngleDeg);\n                break;\n            }\n        }\n    };\n\n    useEffect(() => {\n        const $current = pointerRef.current;\n\n        const onTouch = (evt: TouchEvent | ReactTouchEvent) => {\n            if(settings.disabled || pointer.disabled) return;\n\n            evt.preventDefault();\n            evt.stopPropagation();\n            onValueChange(evt);\n        };\n\n        const onWheel = (evt: WheelEvent) => {\n\n            if(settings.disabled || pointer.disabled || settings.mousewheelDisabled || document.activeElement !== $current) return;\n\n            evt.stopPropagation();\n            evt.preventDefault();\n\n            const scrollTop = evt.deltaY < 0;\n\n            let newAngleDeg;\n            if(scrollTop) {\n                newAngleDeg = pointer.angleDeg + data.arrowStepAngleDeg;\n            }\n            else{\n                newAngleDeg = pointer.angleDeg - data.arrowStepAngleDeg;\n            }\n\n            setPointer(pointer, newAngleDeg);\n        };\n\n        $current?.addEventListener('touchmove', onTouch, {\n            passive: false,\n        });\n\n        document.addEventListener('wheel', onWheel, {\n            passive: false,\n        });\n\n        return () => {\n            $current?.removeEventListener('touchmove', onTouch);\n            document.removeEventListener('wheel', onWheel);\n        };\n    }, [\n        center,\n        onValueChange,\n        data.arrowStepAngleDeg,\n        pointer,\n        setPointer,\n        settings.disabled,\n        settings.mousewheelDisabled,\n    ]);\n\n    const onMouseOver = () => {\n        setIsMouseOver(true);\n    };\n\n    const onMouseOut = () => {\n        setIsMouseOver(false);\n    };\n\n    return (\n        <>\n            {\n                center &&\n                <g\n                    ref={ pointerRef }\n                    transform={ `translate(${ center[0] - radius/2 }, ${ center[1] - radius/2 })` }\n\n                    role=\"slider\"\n                    aria-disabled={ pointer.disabled ? true : undefined }\n                    aria-valuenow={ pointer.angleDeg }\n                    aria-valuetext={ value }\n                    aria-label={ pointer.ariaLabel }\n\n                    data-type=\"pointer\"\n                    className={ `mz-round-slider-pointer ${ pointer.disabled ? 'mz-round-slider-pointer-disabled' : '' }` }\n                    data-angle={ pointer.angleDeg }\n                    data-id={ pointer.id }\n                    data-index={ pointer.index }\n\n                    onMouseDown={ onMouseDown }\n                    onKeyDown={ onKeyDown }\n                    onMouseOver={ onMouseOver }\n                    onMouseOut={ onMouseOut }\n                    tabIndex={ 0 }\n\n                    cursor={ pointer.disabled ? 'default' : 'pointer' }\n                    style={ outlineNoneStyle }>\n\n                    {\n                        !settings.pointerSVG &&\n                        <circle\n                            cx={ radius/2 }\n                            cy={ radius/2 }\n                            r={ radius }\n                            fill={ fill }\n                            strokeWidth={ border }\n                            stroke={ borderColor }\n                            style={{\n                                transition: '0.3s fill',\n                            }}\n                        />\n                    }\n\n                    {\n                        settings.pointerSVG &&\n                        <g>\n                            { settings.pointerSVG }\n                        </g>\n                    }\n                </g>\n            }\n        </>\n    )\n};\n\nexport default Pointer;", "export const outlineNoneStyle = {\n    outline: 'none',\n};", "import { IPointer, IPointers } from '../domain/pointers-provider';\nimport Pointer from './Pointer';\nimport { ISettings } from '../domain/settings-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\nexport interface IPointersProps {\n    pointers: IPointers;\n    settings: ISettings;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    data: IData;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n    selectedPointerId: string;\n}\n\nconst Pointers = (props: IPointersProps) => {\n\n    const {\n        pointers, settings, svg, $svg, data,\n        setPointer, selectedPointerId,\n    } = props;\n\n    return (\n        <>\n            {\n                pointers.pointers.map(pointer => {\n\n                    return (\n                        <Pointer\n                            key={ pointer.id }\n                            pointer={ pointer }\n                            svg={ svg }\n                            settings={ settings }\n                            $svg={ $svg }\n                            data={ data }\n                            setPointer={ setPointer }\n                            selectedPointerId={ selectedPointerId }\n                        />\n                    )\n                })\n            }\n        </>\n    )\n};\n\nexport default Pointers;", "import { ISettings } from './settings-provider';\nimport { getNumber } from './common-provider';\nimport {\n    DEFAULT_ARROW_STEP,\n    DEFAULT_MAX,\n    DEFAULT_MIN,\n    DEFAULT_PATH_END_ANGLE,\n    DEFAULT_PATH_START_ANGLE,\n    DEFAULT_ROUND,\n    DEFAULT_STEP\n} from './defaults-provider';\nimport { mod } from 'mz-math';\n\nexport interface IData {\n    min: number;\n    max: number;\n    stepAngleDeg: number;\n    arrowStepAngleDeg: number;\n    round: number;\n    data: (string | number)[];\n    isClosedShape: boolean;\n}\n\nexport const getData = (setting: ISettings) : IData => {\n\n    let min = getNumber(setting.min, DEFAULT_MIN);\n    let max = getNumber(setting.max, DEFAULT_MAX);\n    const step = getNumber(setting.step, DEFAULT_STEP);\n    const arrowStep = getNumber(setting.arrowStep, DEFAULT_ARROW_STEP);\n    const round = getNumber(setting.round, DEFAULT_ROUND);\n    const data = setting.data || [];\n\n    if(data.length > 0) {\n        const minIndex = data.findIndex(item => item === min);\n        const maxIndex = data.findIndex(item => item === max);\n\n        min = minIndex === -1 ? 0 : minIndex;\n        max = maxIndex === -1 ? data.length : maxIndex;\n    }\n    else{\n        if(min > max) {\n            min = max + DEFAULT_MAX;\n        }\n    }\n\n    const pathStartAngle = getNumber(setting.pathStartAngle, DEFAULT_PATH_START_ANGLE);\n    const pathEndAngle = getNumber(setting.pathEndAngle, DEFAULT_PATH_END_ANGLE);\n    const isClosedShape = mod(pathStartAngle, 360) === mod(pathEndAngle, 360);\n\n    const stepAngleDeg = step * (pathEndAngle - pathStartAngle) / (max - min);\n    const arrowStepAngleDeg = arrowStep * (pathEndAngle - pathStartAngle) / (max - min);\n\n    return {\n        min,\n        max,\n        round,\n        data,\n        stepAngleDeg,\n        arrowStepAngleDeg,\n        isClosedShape,\n    }\n};", "import { ISettings } from '../domain/settings-provider';\nimport { getBoolean, getNumber, getString } from '../domain/common-provider';\nimport {\n    DEFAULT_ANIMATION_DURATION,\n    DEFAULT_CONNECTION_BG_COLOR,\n    DEFAULT_CONNECTION_BG_COLOR_DISABLED\n} from '../domain/defaults-provider';\nimport {\n    getAngleByMouse,\n    getClosestPointer,\n    getMinMaxDistancePointers,\n    IPointer,\n    IPointers\n} from '../domain/pointers-provider';\nimport {\n    MouseEvent as ReactMouseEvent,\n    useCallback,\n    useEffect, useRef,\n    useState\n} from 'react';\nimport { getConnection, IConnection } from '../domain/connection-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\nimport { animate, IAnimationResult, mod } from 'mz-math';\nimport { getAnimationProgressAngle } from '../domain/animation-provider';\n\ninterface IConnectionProps {\n    settings: ISettings;\n    pointers: IPointers;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    data: IData;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n}\n\nconst getStroke = (\n    disabled: boolean,\n    connectionBgColorDisabled: string,\n    connectionBgColor: string,\n    isMouseOver: boolean,\n    connectionBgColorHover: string\n) => {\n    if(disabled) return getString(connectionBgColorDisabled, DEFAULT_CONNECTION_BG_COLOR_DISABLED);\n\n    const bgColor = getString(connectionBgColor, DEFAULT_CONNECTION_BG_COLOR);\n\n    if(isMouseOver) {\n        return getString(connectionBgColorHover, bgColor);\n    }\n\n    return bgColor;\n};\n\nconst Connection = (props: IConnectionProps) => {\n\n    const { settings, pointers, $svg, svg, data, setPointer } = props;\n\n    const [ connection, setConnection ] = useState<IConnection|null>(null);\n    const [ animation, setAnimation ] = useState<IAnimationResult|null>(null);\n    const [ stroke, setStroke ] = useState(DEFAULT_CONNECTION_BG_COLOR);\n    const [ isMouseOver, setIsMouseOver ] = useState(false);\n\n    const rangeDraggingLastAngle = useRef<number>();\n    const animationClosestPointer = useRef<IPointer|null>(null);\n    const animationSourceDegrees = useRef(0);\n    const animationTargetDegrees = useRef(0);\n\n    useEffect(() => {\n        setStroke(getStroke(\n            settings.disabled,\n            settings.connectionBgColorDisabled,\n            settings.connectionBgColor,\n            isMouseOver,\n            settings.connectionBgColorHover\n        ));\n    }, [\n        settings.disabled,\n        settings.connectionBgColorDisabled,\n        settings.connectionBgColor,\n        settings.connectionBgColorHover,\n        isMouseOver,\n    ]);\n\n    useEffect(() => {\n        setConnection(getConnection(\n            pointers,\n            svg.radius,\n            svg.cx,\n            svg.cy,\n            svg.startAngleDeg,\n            svg.endAngleDeg\n        ));\n    }, [\n        pointers,\n        svg.radius,\n        svg.cx,\n        svg.cy,\n        svg.startAngleDeg,\n        svg.endAngleDeg\n    ]);\n\n    const onClick = (evt: ReactMouseEvent) => {\n\n        if(!$svg || settings.disabled || (animation && animation.isAnimating())) return;\n\n        const degrees = getAngleByMouse(\n            $svg,\n            evt.clientX,\n            evt.clientY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        const closestPointer = getClosestPointer(\n            pointers.pointers,\n            degrees,\n            svg.cx,\n            svg.cy,\n            svg.radius\n        );\n\n        if(!closestPointer) return;\n\n        if(settings.animateOnClick) {\n            animationClosestPointer.current = closestPointer;\n            animationSourceDegrees.current = closestPointer.angleDeg;\n            animationTargetDegrees.current = degrees;\n            animation?.start();\n        }\n        else{\n            setPointer(closestPointer, degrees);\n        }\n    };\n\n    // RANGE DRAGGING -------------------------------------------\n\n    const onValueChange = useCallback((evt: MouseEvent | ReactMouseEvent) => {\n        if(!$svg || settings.disabled || !settings.rangeDragging) return;\n\n        const minMaxResult = getMinMaxDistancePointers(pointers.pointers, svg.startAngleDeg);\n        if(!minMaxResult) return;\n\n        const [ minPointer, maxPointer ] = minMaxResult;\n\n        const mouseDegrees = getAngleByMouse(\n            $svg,\n            evt.clientX,\n            evt.clientY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        if(rangeDraggingLastAngle.current === undefined) {\n            rangeDraggingLastAngle.current = mouseDegrees;\n            return;\n        }\n\n        const diff = (mouseDegrees - rangeDraggingLastAngle.current);\n        if(diff === 0 || Math.abs(diff) < data.stepAngleDeg) return;\n\n        setPointer(minPointer, mod(minPointer.angleDeg + diff, 360));\n        setPointer(maxPointer, mod(maxPointer.angleDeg + diff, 360));\n\n        rangeDraggingLastAngle.current = mouseDegrees;\n    }, [\n        $svg,\n        svg.cx,\n        svg.cy,\n        svg.radius,\n        data.stepAngleDeg,\n        pointers.pointers,\n        setPointer,\n        settings.disabled,\n        settings.rangeDragging,\n        svg.startAngleDeg,\n    ]);\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onValueChange);\n        window.removeEventListener('mouseup', onValueChange);\n\n        rangeDraggingLastAngle.current = undefined;\n    };\n\n    const onMouseDown = (evt: ReactMouseEvent) => {\n        if(!settings.rangeDragging || settings.disabled || pointers.pointers.length <= 1) return;\n\n        onValueChange(evt);\n\n        window.addEventListener('mousemove', onValueChange);\n        window.addEventListener('mouseup', onMouseUp);\n    };\n\n    // ANIMATE ON CLICK -------------------------------------------\n    useEffect(() => {\n        if(animation) {\n            animation.stop();\n        }\n\n        if(!settings.animateOnClick) {\n            setAnimation(null);\n            return;\n        }\n\n        const _animation = animate({\n            callback: (progress) => {\n                if(!animationClosestPointer.current) return;\n                const currentDegrees = getAnimationProgressAngle(\n                    progress,\n                    animationSourceDegrees.current,\n                    animationTargetDegrees.current,\n                    svg.startAngleDeg\n                );\n                setPointer(animationClosestPointer.current, currentDegrees);\n            },\n            duration: getNumber(settings.animationDuration, DEFAULT_ANIMATION_DURATION),\n        });\n\n        setAnimation(_animation);\n\n    },\n        // eslint-disable-next-line\n        [\n        settings.animateOnClick,\n        settings.animationDuration,\n    ]);\n\n    const onMouseOver = () => {\n        setIsMouseOver(true);\n    };\n\n    const onMouseOut = () => {\n        setIsMouseOver(false);\n    };\n\n    return (\n        <>\n            {\n                !getBoolean(settings.hideConnection, false) && connection &&\n                <circle\n                    data-type=\"connection\"\n                    className=\"mz-round-slider-connection\"\n\n                    cx={ connection.cx }\n                    cy={ connection.cy }\n                    r={ connection.radius }\n\n                    strokeDasharray={ connection.strokeDasharray.join(' ') }\n                    strokeDashoffset={ connection.strokeOffset }\n                    stroke={ stroke }\n                    strokeWidth={ svg.thickness + 1 }\n\n                    fill=\"none\"\n                    shapeRendering=\"geometricPrecision\"\n                    strokeLinecap=\"round\"\n                    cursor={ settings.disabled ? 'default' : 'pointer' }\n\n                    onClick={ onClick }\n                    onMouseDown={ onMouseDown }\n                    onMouseOver={ onMouseOver }\n                    onMouseOut={ onMouseOut }\n\n                    style={{\n                        transition: '0.2s stroke',\n                    }}\n                />\n            }\n        </>\n    )\n};\n\nexport default Connection;", "import { IPointers } from './pointers-provider';\nimport { getAnglesDistance } from './circle-provider';\n\nexport interface IConnection {\n    radius: number;\n    cx: number;\n    cy: number;\n\n    // calculated properties ---------\n    startAngleDeg: number;\n    endAngleDeg: number;\n    strokeDasharray: number[];\n    strokeOffset: number;\n}\n\nexport const getConnection = (\n    pointers: IPointers,\n    radius: number,\n    cx: number,\n    cy: number,\n    pathStartAngle: number,\n    pathEndAngle: number,\n) : IConnection => {\n\n    if(!pointers.pointers || pointers.pointers.length <= 0) return null;\n\n    const result : IConnection = {\n        radius,\n        cx,\n        cy,\n\n        // calculated properties ---------\n        startAngleDeg: pathStartAngle,\n        endAngleDeg: pathStartAngle,\n        strokeDasharray: [0, 0],\n        strokeOffset: 0,\n    };\n\n    // Define start/end angles.\n    if(pointers.pointers.length === 1) {\n        result.startAngleDeg = pathStartAngle;\n        result.endAngleDeg = pointers.pointers[0].angleDeg;\n    }\n    else{\n        result.startAngleDeg = pointers.pointers[0].angleDeg;\n        result.endAngleDeg = pointers.pointers[pointers.pointers.length - 1].angleDeg;\n\n        /*const minMaxResult = getMinMaxDistancePointers(pointers.pointers, pathStartAngle);\n        if(!minMaxResult) return null;\n\n        const [ minPointer, maxPointer ] = minMaxResult;\n\n        result.startAngleDeg = minPointer.angleDeg;\n        result.endAngleDeg = maxPointer.angleDeg;*/\n    }\n\n    const pathAnglesDistance = getAnglesDistance(pathStartAngle, pathEndAngle);\n\n    if(result.startAngleDeg > result.endAngleDeg) {\n        result.endAngleDeg += 360;\n    }\n\n    let angleDistance = getAnglesDistance(result.startAngleDeg, result.endAngleDeg);\n\n    const shouldSwitch = angleDistance > pathAnglesDistance;\n\n    if(shouldSwitch) {\n        angleDistance = 360 - angleDistance;\n        [result.startAngleDeg, result.endAngleDeg] = [result.endAngleDeg, result.startAngleDeg];\n    }\n\n    const circumference = 2 * Math.PI * radius;\n    const strokeOffset = -(result.startAngleDeg / 360) * circumference;\n    const strokeDasharray = (angleDistance / 360) * circumference;\n    const complement = circumference - strokeDasharray;\n\n    result.strokeDasharray = [ strokeDasharray, complement ];\n    result.strokeOffset = strokeOffset;\n\n    return result;\n};", "import { IAnimationResult, mod } from 'mz-math';\n\nexport const getAnimationProgressAngle = (\n    progress: IAnimationResult,\n    animationSourceDegrees: number,\n    animationTargetDegrees: number,\n    startPathAngleDeg: number\n) => {\n    let percent = progress.getPercent();\n\n    if(percent < 0) {\n        percent = 0;\n    }\n\n    if(percent > 100) {\n        percent = 100;\n    }\n\n    let angle1 = animationSourceDegrees % 360;\n    let angle2 = animationTargetDegrees % 360;\n\n    if(angle1 < startPathAngleDeg) {\n        angle1 += 360;\n    }\n\n    if(angle2 < startPathAngleDeg) {\n        angle2 += 360;\n    }\n\n    const isClockwise = angle2 > angle1;\n\n    if(isClockwise) {\n        const clockwiseDistance = (angle2 - angle1 + 360) % 360;\n        return mod(animationSourceDegrees + (percent * clockwiseDistance / 100), 360);\n    }\n    else {\n        const counterclockwiseDistance = (angle1 - angle2 + 360) % 360;\n        return mod(animationSourceDegrees - (percent * counterclockwiseDistance / 100), 360);\n    }\n};", "import { ISettings } from '../domain/settings-provider';\nimport { angle2value, IPointers } from '../domain/pointers-provider';\nimport { getBoolean, getNumber, getString } from '../domain/common-provider';\nimport {\n    DEFAULT_TEXT_COLOR,\n    DEFAULT_TEXT_FONT_SIZE\n} from '../domain/defaults-provider';\nimport { useEffect, useState } from 'react';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\ninterface ITextProps {\n    settings: ISettings;\n    pointers: IPointers;\n    svg: ISvg;\n    data: IData;\n}\n\nconst Text = (props: ITextProps) => {\n\n    const { settings, pointers, svg, data } = props;\n\n    const { cx, cy } = svg;\n    const [ value, setValue ] = useState('');\n\n    useEffect(() => {\n\n        const values = pointers.pointers.map(pointer => angle2value(\n            data,\n            pointer.angleDeg,\n            svg.startAngleDeg,\n            svg.endAngleDeg\n        ));\n\n        values.sort((value1, value2) => {\n            return value1.toString().localeCompare(\n                value2.toString(),\n                'en',\n                { numeric: true }\n            );\n        });\n\n        const texts = values.map(value => `${ settings.textPrefix || '' }${ value }${ settings.textSuffix || '' }`);\n\n        const textBetween = getString(settings.textBetween, ' ');\n        setValue(texts.join(textBetween));\n\n    }, [\n        data,\n        pointers.pointers,\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n        settings.textPrefix,\n        settings.textSuffix,\n        settings.textBetween,\n    ]);\n\n    const hideText = getBoolean(settings.hideText, false);\n\n    return (\n        <>\n            {\n                !hideText &&\n                <text\n                    data-type=\"text\"\n                    className=\"mz-round-slider-text\"\n\n                    x={ cx + getNumber(settings.textOffsetX, 0) }\n                    y={ cy + getNumber(settings.textOffsetY, 0) }\n\n                    fill={ getString(settings.textColor, DEFAULT_TEXT_COLOR) }\n                    fontSize={ getNumber(settings.textFontSize, DEFAULT_TEXT_FONT_SIZE) }\n                    fontFamily={ settings.textFontFamily }\n\n                    style={{\n                        userSelect: 'none',\n                        whiteSpace: 'pre',\n                    }}\n\n                    textAnchor=\"middle\">\n\n                    { value }\n\n                </text>\n            }\n        </>\n    )\n};\n\nexport default Text;", "import { useEffect, useState, Fragment } from 'react';\nimport { getTicks, getTicksSettings, ITick, ITicks } from '../domain/ticks-provider';\nimport { ISettings } from '../domain/settings-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\ninterface ITicksProps {\n    settings: ISettings;\n    svg: ISvg;\n    data: IData;\n}\n\nconst Ticks = (props: ITicksProps) => {\n\n    const { settings, svg, data } = props;\n\n    const [ ticksSettings, setTicksSettings ] = useState<ITicks|null>(null);\n    const [ ticks, setTicks ] = useState<ITick[]>([]);\n\n    useEffect(() => {\n       setTicksSettings(getTicksSettings(settings, data));\n    }, [\n        settings,\n        data,\n    ]);\n\n    useEffect(() => {\n        if(!ticksSettings) return;\n\n        let endAngleDeg = svg.endAngleDeg;\n        if(endAngleDeg < svg.startAngleDeg) {\n            endAngleDeg += 360;\n        }\n\n        setTicks(getTicks(\n            ticksSettings,\n            ticksSettings.ticksCount,\n            svg.startAngleDeg,\n            endAngleDeg,\n            svg,\n            data\n        ));\n    }, [\n        data,\n        svg,\n        ticksSettings,\n    ]);\n\n    return (\n        <>\n            {\n                ticksSettings && ticksSettings.enableTicks &&\n                <g>\n                    {\n                        ticks.map((tick, i) => {\n                            const { x, y, x1, y1, textX, textY, showText } = tick;\n\n                            return (\n                                <Fragment key={ i }>\n                                    <line\n                                        x1={ x }\n                                        y1={ y }\n                                        x2={ x1 }\n                                        y2={ y1 }\n                                        strokeWidth={ ticksSettings.ticksWidth }\n                                        stroke={ ticksSettings.ticksColor }\n\n                                        data-type=\"tick\"\n                                        className=\"mz-round-slider-tick\"\n                                    />\n\n                                    {\n                                        showText &&\n                                        <text\n                                            data-type=\"tick-text\"\n                                            className=\"mz-round-slider-tick-text\"\n\n                                            x={ textX }\n                                            y={ textY }\n                                            textAnchor=\"middle\"\n                                            dominantBaseline=\"middle\"\n                                            fill={ ticksSettings.tickValuesColor }\n                                            fontSize={ ticksSettings.tickValuesFontSize }\n                                            fontFamily={ settings.tickValuesFontFamily }\n                                            style={{\n                                                userSelect: 'none',\n                                                whiteSpace: 'pre',\n                                            }}>\n                                            { settings.tickValuesPrefix }{ tick.tickValue }{ settings.tickValuesSuffix }\n                                        </text>\n                                    }\n                                </Fragment>\n                            );\n                        })\n                    }\n                </g>\n            }\n        </>\n    )\n};\n\nexport default Ticks;", "import {\n    circleMovement,\n    convertRange,\n    degreesToRadians,\n    setDecimalPlaces,\n    v2MulScalar,\n    v2Normalize\n} from 'mz-math';\nimport { ISvg } from './svg-provider';\nimport { IData } from './data-provider';\nimport { ISettings } from './settings-provider';\nimport { getBoolean, getNumber, getString } from './common-provider';\nimport {\n    DEFAULT_TICKS_COLOR, DEFAULT_TICKS_ENABLED, DEFAULT_TICKS_GROUP_SIZE,\n    DEFAULT_TICKS_HEIGHT, DEFAULT_TICKS_VALUES_COLOR,\n    DEFAULT_TICKS_VALUES_DISTANCE, DEFAULT_TICKS_VALUES_FONT_SIZE,\n    DEFAULT_TICKS_WIDTH\n} from './defaults-provider';\n\nexport interface ITicks {\n    ticksCount: number;\n    enableTicks: boolean;\n    ticksWidth: number;\n    ticksHeight: number;\n    longerTicksHeight: number;\n    ticksDistanceToPanel: number;\n    tickValuesDistance: number;\n    ticksColor: string;\n    tickValuesColor: string;\n    tickValuesFontSize: number;\n    ticksGroupSize: number;\n    longerTickValuesOnly: boolean;\n    showTickValues: boolean;\n}\n\nexport interface ITick {\n    x: number;\n    y: number;\n    x1: number;\n    y1: number;\n    textX: number;\n    textY: number;\n    isLonger: boolean;\n    showText: boolean;\n    tickValue?: string;\n}\n\nexport const getTicksSettings = (settings: ISettings, data: IData) : ITicks => {\n\n    let ticksCount = getNumber(settings.ticksCount, 0);\n    if(!ticksCount) {\n        if(data.data && data.data.length > 0) {\n            ticksCount = data.data.length;\n        }\n        else{\n            ticksCount = data.max;\n        }\n    }\n\n    const ticksHeight = getNumber(settings.ticksHeight, DEFAULT_TICKS_HEIGHT);\n\n    return {\n        ticksCount,\n        enableTicks: getBoolean(settings.enableTicks, DEFAULT_TICKS_ENABLED),\n        ticksWidth: getNumber(settings.ticksWidth, DEFAULT_TICKS_WIDTH),\n        ticksHeight,\n        longerTicksHeight: getNumber(settings.longerTicksHeight, ticksHeight * 2),\n        ticksDistanceToPanel: getNumber(settings.ticksDistanceToPanel, 0),\n        tickValuesDistance: getNumber(settings.tickValuesDistance, DEFAULT_TICKS_VALUES_DISTANCE),\n        ticksColor: getString(settings.ticksColor, DEFAULT_TICKS_COLOR),\n        tickValuesColor: getString(settings.tickValuesColor, DEFAULT_TICKS_VALUES_COLOR),\n        tickValuesFontSize: getNumber(settings.tickValuesFontSize, DEFAULT_TICKS_VALUES_FONT_SIZE),\n        ticksGroupSize: getNumber(settings.ticksGroupSize, DEFAULT_TICKS_GROUP_SIZE),\n        longerTickValuesOnly: getBoolean(settings.longerTickValuesOnly, true),\n        showTickValues: getBoolean(settings.showTickValues, true),\n    };\n};\n\nexport const getTicks = (\n    ticksSettings: ITicks,\n    ticksCount: number,\n    pathStartAngle: number,\n    pathEndAngle: number,\n    svg: ISvg,\n    data: IData\n) : ITick[] => {\n\n    const ticks: ITick[] = [];\n\n    const deltaAngle = Math.abs(pathEndAngle - pathStartAngle);\n    const oneTickAngleSize = ticksCount === 0 ? 0 : deltaAngle / ticksCount;\n\n    let count = ticksCount;\n    if(!data.isClosedShape) {\n        count++;\n    }\n\n    for(let i=0; i<count; i++) {\n        const currentAngle = pathStartAngle + i * oneTickAngleSize;\n        const angleRad = convertRange(degreesToRadians(currentAngle), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n\n        let [x, y] = circleMovement([svg.cx, svg.cy], angleRad, svg.radius);\n\n        const isLonger = ticksSettings.ticksGroupSize !== undefined && (i % ticksSettings.ticksGroupSize === 0 );\n\n        let desiredDistance = ticksSettings.ticksHeight;\n\n        if(isLonger) {\n            desiredDistance = ticksSettings.longerTicksHeight;\n        }\n\n        const normalizedDirectionVector = v2Normalize([svg.cx - x, svg.cy - y]);\n        const tickEndVector = v2MulScalar(normalizedDirectionVector, desiredDistance);\n\n        const tickStartVector = v2MulScalar(normalizedDirectionVector, ticksSettings.ticksDistanceToPanel + svg.thickness/2);\n        x += tickStartVector[0];\n        y += tickStartVector[1];\n\n        const x1 = x + tickEndVector[0];\n        const y1 = y + tickEndVector[1];\n\n        // ------- Define tick value. ---------------------\n        let tickValue: string|undefined = undefined;\n        if(ticksSettings.showTickValues && (!ticksSettings.longerTickValuesOnly || ticksSettings.longerTickValuesOnly && (isLonger || ticksSettings.ticksGroupSize === undefined))) {\n\n            let value: string|number = convertRange(i, 0, ticksCount, data.min, data.max);\n\n            if(data.data.length > 0) {\n                const index = Math.round(value);\n                value = data.data[index];\n            }\n            else{\n                value = setDecimalPlaces(value, data.round);\n            }\n\n            tickValue = (value ?? '').toString();\n        }\n\n        let textX = 0;\n        let textY = 0;\n        const showText = tickValue !== undefined;\n\n        if(showText) {\n            const _tickValuesDistance = getNumber(desiredDistance + ticksSettings.tickValuesDistance, desiredDistance * 1.5);\n            const tickTextVector = v2MulScalar(normalizedDirectionVector, _tickValuesDistance);\n            textX = x + tickTextVector[0];\n            textY = y + tickTextVector[1];\n        }\n\n        ticks.push({\n            x,\n            y,\n            x1,\n            y1,\n            textX,\n            textY,\n            isLonger,\n            tickValue,\n            showText,\n        });\n    }\n\n    return ticks;\n};", "import { useEffect, useState, MouseEvent, useRef } from 'react';\nimport { getCircle, ICircle } from '../domain/circle-provider';\nimport { getNumber, getString } from '../domain/common-provider';\nimport { ISettings } from '../domain/settings-provider';\nimport {\n    DEFAULT_ANIMATION_DURATION,\n    DEFAULT_PATH_BG_COLOR,\n    DEFAULT_PATH_BORDER_COLOR,\n} from '../domain/defaults-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { getAngleByMouse, getClosestPointer, IPointer, IPointers } from '../domain/pointers-provider';\nimport { animate, IAnimationResult, newId } from 'mz-math';\nimport { getAnimationProgressAngle } from '../domain/animation-provider';\nimport InnerCircle from './InnerCircle';\n\ninterface ICircleProps {\n    settings: ISettings;\n    pointers: IPointers;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n}\n\nconst Circle = (props: ICircleProps) => {\n\n    const { settings, pointers, $svg, svg, setPointer } = props;\n\n    const [ animation, setAnimation ] = useState<IAnimationResult|null>(null);\n    const [ maskId ] = useState(newId());\n    const [ circle, setCircle ] = useState<ICircle>({\n        strokeDasharray: '0 1000000',\n        strokeOffset: 0,\n    });\n\n    const animationClosestPointer = useRef<IPointer|null>(null);\n    const animationSourceDegrees = useRef(0);\n    const animationTargetDegrees = useRef(0);\n\n    useEffect(() => {\n        setCircle(getCircle(\n            svg.startAngleDeg,\n            svg.endAngleDeg,\n            svg.radius\n        ));\n    }, [\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n        svg.radius,\n    ]);\n\n    const onClick = (evt: MouseEvent) => {\n        if(!$svg || settings.disabled || (animation && animation.isAnimating())) return;\n\n        const degrees = getAngleByMouse(\n            $svg,\n            evt.clientX,\n            evt.clientY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        const closestPointer = getClosestPointer(\n            pointers.pointers,\n            degrees,\n            svg.cx,\n            svg.cy,\n            svg.radius\n        );\n\n        if(!closestPointer) return;\n\n        if(settings.animateOnClick) {\n            animationClosestPointer.current = closestPointer;\n            animationSourceDegrees.current = closestPointer.angleDeg;\n            animationTargetDegrees.current = degrees;\n            animation?.start();\n        }\n        else{\n            setPointer(closestPointer, degrees);\n        }\n    };\n\n    // ANIMATE ON CLICK -------------------------------------------\n    useEffect(() => {\n        if(animation) {\n            animation.stop();\n        }\n\n        if(!settings.animateOnClick) {\n            setAnimation(null);\n            return;\n        }\n\n        const _animation = animate({\n            callback: (progress) => {\n                if(!animationClosestPointer.current) return;\n                const currentDegrees = getAnimationProgressAngle(\n                    progress,\n                    animationSourceDegrees.current,\n                    animationTargetDegrees.current,\n                    svg.startAngleDeg\n                );\n                setPointer(animationClosestPointer.current, currentDegrees);\n            },\n            duration: getNumber(settings.animationDuration, DEFAULT_ANIMATION_DURATION),\n        });\n\n        setAnimation(_animation);\n    },\n        // eslint-disable-next-line\n        [\n        settings.animateOnClick,\n        settings.animationDuration,\n    ]);\n\n    return (\n        <g onClick={ onClick }>\n\n            {\n                settings.pathInnerBgColor &&\n                <InnerCircle\n                    maskId={ maskId }\n                    settings={ settings }\n                    svg={ svg }\n                    circle={ circle }\n                />\n            }\n\n            {\n                svg.border > 0 &&\n                <circle\n                    strokeDasharray={ circle.strokeDasharray }\n                    strokeDashoffset={ circle.strokeOffset }\n                    cx={ svg.cx }\n                    cy={ svg.cy }\n                    r={ svg.radius }\n                    stroke={ getString(settings.pathBorderColor, DEFAULT_PATH_BORDER_COLOR) }\n                    strokeWidth={ svg.thickness + svg.border * 2 }\n                    fill=\"none\"\n                    shapeRendering=\"geometricPrecision\"\n                    strokeLinecap=\"round\"\n                    cursor=\"pointer\"\n                    data-type=\"path-border\"\n                    className=\"mz-round-slider-path-border\"\n                />\n            }\n\n            <circle\n                strokeDasharray={ circle.strokeDasharray }\n                strokeDashoffset={ circle.strokeOffset }\n                cx={ svg.cx }\n                cy={ svg.cy }\n                r={ svg.radius }\n                stroke={ getString(settings.pathBgColor, DEFAULT_PATH_BG_COLOR) }\n                strokeWidth={ svg.thickness }\n                fill=\"none\"\n                shapeRendering=\"geometricPrecision\"\n                strokeLinecap=\"round\"\n                cursor=\"pointer\"\n                data-type=\"path\"\n                className=\"mz-round-slider-path\"\n            />\n        </g>\n    )\n};\n\nexport default Circle;\n", "import { ISvg } from '../domain/svg-provider';\nimport { ISettings } from '../domain/settings-provider';\nimport { ICircle } from '../domain/circle-provider';\nimport { useEffect, useState } from 'react';\nimport { circleMovement, convertRange, degreesToRadians, mod, Vector2 } from 'mz-math';\nimport { getBoolean } from '../domain/common-provider';\n\ninterface IInnerCircleProps {\n    maskId: string;\n    settings: ISettings;\n    svg: ISvg;\n    circle: ICircle;\n}\n\nconst InnerCircle = (props: IInnerCircleProps) => {\n\n    const { svg, maskId, settings, circle } = props;\n\n    const [ startPoint, setStartPoint ] = useState<Vector2>([0, 0]);\n    const [ endPoint, setEndPoint ] = useState<Vector2>([0, 0]);\n    const [ largeArcFlag, setLargeArcFlag ] = useState(0);\n    const [ pathInnerBgFull, setPathInnerBgFull] = useState(false);\n\n    useEffect(() => {\n        if(mod(svg.startAngleDeg, 360) === mod(svg.endAngleDeg, 360)) {\n            setPathInnerBgFull(true);\n            return;\n        }\n\n        setPathInnerBgFull(getBoolean(settings.pathInnerBgFull, false));\n    }, [\n        settings.pathInnerBgFull,\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n    ]);\n\n    useEffect(() => {\n        const startAngleDeg = convertRange(svg.startAngleDeg, 0, Math.PI*2, 0, Math.PI);\n        setStartPoint(circleMovement([svg.cx, svg.cy], degreesToRadians(startAngleDeg), svg.radius));\n\n        const endAngleDeg = convertRange(svg.endAngleDeg, 0, Math.PI*2, 0, Math.PI);\n        setEndPoint(circleMovement([svg.cx, svg.cy], degreesToRadians(endAngleDeg), svg.radius));\n\n        const largeArcFlag = svg.endAngleDeg - svg.startAngleDeg <= 180 ? 1 : 0;\n        setLargeArcFlag(largeArcFlag);\n    }, [\n        svg.cx,\n        svg.cy,\n        svg.endAngleDeg,\n        svg.radius,\n        svg.startAngleDeg,\n    ]);\n\n    return (\n        <>\n            {\n                !pathInnerBgFull &&\n                <mask id={ maskId }>\n                    <path\n                        fill=\"black\"\n                        d={ `M ${ startPoint[0] } ${ startPoint[1] } A ${ svg.radius } ${ svg.radius } 1 ${ largeArcFlag } 0 ${ endPoint[0] } ${ endPoint[1] }` }\n                    />\n                    <path\n                        fill=\"white\"\n                        d={ `M ${ startPoint[0] } ${ startPoint[1] } A ${ svg.radius } ${ svg.radius } 0 ${ largeArcFlag === 1 ? 0 : 1 } 1 ${ endPoint[0] } ${ endPoint[1] }` }\n                    />\n                </mask>\n            }\n\n            <circle\n                strokeDasharray={ circle.strokeDasharray }\n                strokeDashoffset={ circle.strokeOffset }\n                cx={ svg.cx }\n                cy={ svg.cy }\n                r={ svg.radius }\n                stroke={ 'transparent' }\n                strokeWidth={ svg.thickness }\n                fill={ settings.pathInnerBgColor }\n                shapeRendering=\"geometricPrecision\"\n                strokeLinecap=\"round\"\n                data-type=\"path-inner\"\n                className=\"mz-round-slider-path-inner\"\n                mask={ pathInnerBgFull ? '' : `url(#${ maskId })`}\n            />\n        </>\n    )\n};\n\nexport default InnerCircle;"],
  "mappings": "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",
  "names": ["useEffect", "useRef", "useState", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "isNumber", "value", "radiansToDegrees", "radians", "decimalPlaces", "res", "setDecimalPlaces", "degreesToRadians", "degrees", "vSub", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2Sub", "vMulScalar", "v", "scalar", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2MulScalar", "v2", "vLength", "vector", "decimalPlaces", "sum", "i", "setDecimalPlaces", "v2Distance", "vector1", "vector2", "decimalPlaces", "diff", "vSub", "vLength", "vNormalize", "v", "decimalPlaces", "length", "vLength", "unitVector", "i", "setDecimalPlaces", "v2Normalize", "v2", "circleMovement", "center", "angle", "radius", "newId", "animate", "props", "_duration", "startTime", "animationId", "elapsed", "previousTimeStamp", "animating", "observer", "stop", "restart", "start", "pause", "resume", "step", "timeStamp", "getResult", "observerHandler", "_entries", "_observer", "getElapsedTime", "isAnimating", "getStartTime", "getPercent", "getResizeObserver", "getSvg", "circleRadius", "circleThickness", "circleBorder", "maxPointerRadius", "startAngleDeg", "endAngleDeg", "thickness", "diff", "size", "cx", "cy", "getSVGCenter", "getSVGSize", "val", "s", "DEFAULT_PATH_BG_COLOR", "DEFAULT_PATH_BORDER_COLOR", "DEFAULT_POINTER_BG_COLOR", "DEFAULT_POINTER_BG_COLOR_SELECTED", "DEFAULT_POINTER_BG_COLOR_DISABLED", "DEFAULT_POINTER_BORDER_COLOR", "DEFAULT_CONNECTION_BG_COLOR", "DEFAULT_CONNECTION_BG_COLOR_DISABLED", "DEFAULT_TEXT_COLOR", "DEFAULT_TICKS_COLOR", "DEFAULT_TICKS_VALUES_COLOR", "getNumber", "value", "defaultValue", "H", "getString", "getBoolean", "isAngleInArc", "startAngleDeg", "endAngleDeg", "currentDegrees", "getAnglesDistance", "startAngle", "endAngle", "diff", "diffMod", "y", "getCircle", "radius", "circumference", "angleDiff", "strokeOffset", "strokeDasharray", "complement", "getAngleByMouse", "$svg", "clientX", "clientY", "cx", "cy", "rx", "ry", "left", "top", "relativeMouse", "vector", "R", "angleRad", "Mr", "angle2value", "data", "angle", "pathStartAngle", "pathEndAngle", "value", "j", "index", "s", "value2angle", "_value", "valueIndex", "item", "y", "initPointers", "settings", "angleDeg", "getNumber", "bgColor", "getString", "DEFAULT_POINTER_BG_COLOR", "bgColorSelected", "DEFAULT_POINTER_BG_COLOR_SELECTED", "bgColorDisabled", "DEFAULT_POINTER_BG_COLOR_DISABLED", "bgColorHover", "DEFAULT_POINTER_BORDER_COLOR", "pointers", "i", "settingPointer", "radius", "border", "borderColor", "disabled", "getBoolean", "angleAfterStep", "roundToStep", "getPointers", "getMaxRadius", "max", "pointer", "getClosestPointer", "currentPlaceDegrees", "pathRadius", "hr", "currentPointOnArc", "Kt", "min", "closestPointer", "enabledPointers", "p", "pointerAngleRad", "pointOnArc", "distance", "Er", "__spreadValues", "getClosestEdge", "startAngleDegrees", "endAngleDegrees", "startAngleRad", "startPointOnArc", "endAngleRad", "endPointOnArc", "distance1", "distance2", "getMinMaxDistancePointers", "minDistance", "maxDistance", "minPointer", "maxPointer", "getAnglesDistance", "step", "useEffect", "useState", "useRef", "useCallback", "outlineNoneStyle", "Fragment", "jsx", "jsxs", "getPointerFill", "pointer", "selectedPointerId", "bgColor", "bgColorSelected", "bgColorDisabled", "bgColorHover", "isMouseOver", "Pointer", "props", "pointerRef", "useRef", "svg", "$svg", "data", "settings", "setPointer", "radius", "angleDeg", "border", "borderColor", "cx", "cy", "center", "setCenter", "useState", "value", "setValue", "fill", "setFill", "DEFAULT_POINTER_BG_COLOR", "setIsMouseOver", "useEffect", "angle2value", "angleRad", "j", "hr", "pointerCenter", "Kt", "onValueChange", "useCallback", "evt", "mouseX", "mouseY", "degrees", "getAngleByMouse", "newAngleDeg", "isAngleInArc", "getClosestEdge", "onMouseUp", "onMouseDown", "onKeyDown", "$current", "onTouch", "onWheel", "scrollTop", "onMouseOver", "onMouseOut", "outlineNoneStyle", "Pointer_default", "Fragment", "jsx", "Pointers", "props", "pointers", "settings", "svg", "$svg", "data", "setPointer", "selectedPointerId", "pointer", "Pointer_default", "Pointers_default", "getData", "setting", "min", "getNumber", "max", "step", "arrowStep", "round", "data", "minIndex", "item", "maxIndex", "pathStartAngle", "pathEndAngle", "isClosedShape", "y", "stepAngleDeg", "arrowStepAngleDeg", "useCallback", "useEffect", "useRef", "useState", "getConnection", "pointers", "radius", "cx", "cy", "pathStartAngle", "pathEndAngle", "result", "pathAnglesDistance", "getAnglesDistance", "angleDistance", "circumference", "strokeOffset", "strokeDasharray", "complement", "getAnimationProgressAngle", "progress", "animationSourceDegrees", "animationTargetDegrees", "startPathAngleDeg", "percent", "angle1", "angle2", "clockwiseDistance", "y", "counterclockwiseDistance", "Fragment", "jsx", "getStroke", "disabled", "connectionBgColorDisabled", "connectionBgColor", "isMouseOver", "connectionBgColorHover", "getString", "DEFAULT_CONNECTION_BG_COLOR_DISABLED", "bgColor", "DEFAULT_CONNECTION_BG_COLOR", "Connection", "props", "settings", "pointers", "$svg", "svg", "data", "setPointer", "connection", "setConnection", "useState", "animation", "setAnimation", "stroke", "setStroke", "setIsMouseOver", "rangeDraggingLastAngle", "useRef", "animationClosestPointer", "animationSourceDegrees", "animationTargetDegrees", "useEffect", "getConnection", "onClick", "evt", "degrees", "getAngleByMouse", "closestPointer", "getClosestPointer", "onValueChange", "useCallback", "minMaxResult", "getMinMaxDistancePointers", "minPointer", "maxPointer", "mouseDegrees", "diff", "y", "onMouseUp", "onMouseDown", "_animation", "Fo", "progress", "currentDegrees", "getAnimationProgressAngle", "getNumber", "onMouseOver", "onMouseOut", "getBoolean", "Connection_default", "useEffect", "useState", "Fragment", "jsx", "Text", "props", "settings", "pointers", "svg", "data", "cx", "cy", "value", "setValue", "values", "pointer", "angle2value", "value1", "value2", "texts", "textBetween", "getString", "hideText", "getBoolean", "getNumber", "DEFAULT_TEXT_COLOR", "Text_default", "useEffect", "useState", "Fragment", "getTicksSettings", "settings", "data", "ticksCount", "getNumber", "ticksHeight", "getBoolean", "getString", "DEFAULT_TICKS_COLOR", "DEFAULT_TICKS_VALUES_COLOR", "getTicks", "ticksSettings", "pathStartAngle", "pathEndAngle", "svg", "ticks", "deltaAngle", "oneTickAngleSize", "count", "i", "currentAngle", "angleRad", "j", "hr", "x", "y", "Kt", "isLonger", "desiredDistance", "normalizedDirectionVector", "E", "tickEndVector", "wr", "tickStartVector", "x1", "y1", "tickValue", "value", "index", "s", "textX", "textY", "showText", "_tickValuesDistance", "tickTextVector", "Fragment", "jsx", "jsxs", "Ticks", "props", "settings", "svg", "data", "ticksSettings", "setTicksSettings", "useState", "ticks", "setTicks", "useEffect", "getTicksSettings", "endAngleDeg", "getTicks", "tick", "i", "x", "y", "x1", "y1", "textX", "textY", "showText", "Ticks_default", "useEffect", "useState", "useRef", "useEffect", "useState", "Fragment", "jsx", "jsxs", "InnerCircle", "props", "svg", "maskId", "settings", "circle", "startPoint", "setStartPoint", "useState", "endPoint", "setEndPoint", "largeArcFlag", "setLargeArcFlag", "pathInnerBgFull", "setPathInnerBgFull", "useEffect", "y", "getBoolean", "startAngleDeg", "j", "Kt", "hr", "endAngleDeg", "InnerCircle_default", "jsx", "jsxs", "Circle", "props", "settings", "pointers", "$svg", "svg", "setPointer", "animation", "setAnimation", "useState", "maskId", "Yo", "circle", "setCircle", "animationClosestPointer", "useRef", "animationSourceDegrees", "animationTargetDegrees", "useEffect", "getCircle", "onClick", "evt", "degrees", "getAngleByMouse", "closestPointer", "getClosestPointer", "_animation", "Fo", "progress", "currentDegrees", "getAnimationProgressAngle", "getNumber", "InnerCircle_default", "getString", "DEFAULT_PATH_BORDER_COLOR", "DEFAULT_PATH_BG_COLOR", "Circle_default", "Fragment", "jsx", "jsxs", "RoundSlider", "props", "data", "setData", "useState", "svg", "setSvg", "pointers", "setPointers", "selectedPointerId", "setSelectedPointerId", "prevAngleDegRef", "useRef", "svgRef", "useEffect", "_data", "getData", "getPointers", "pathStartAngle", "getNumber", "pathEndAngle", "getSvg", "clearSelectedPointer", "evt", "setPointersCallback", "pointer", "newAngleDeg", "roundToStep", "y", "updatePointer", "prevAngle", "nextAngle", "prevIndex", "nextIndex", "prevPointer", "nextPointer", "splitPointDeg", "t1", "t2", "clockwiseNew", "isAngleInArc", "clockwisePrev", "clockwise", "t3", "t4", "counterClockwiseNew", "counterClockwisePrev", "getClosestEdge", "angleChanged", "_a", "_pointers", "__spreadValues", "updatedPointers", "val", "angle2value", "$pointer", "__spreadProps", "outlineNoneStyle", "Circle_default", "Ticks_default", "Connection_default", "Pointers_default", "Text_default"]
}
