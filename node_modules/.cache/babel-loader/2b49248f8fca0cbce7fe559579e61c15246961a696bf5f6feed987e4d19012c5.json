{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/components/SampleDetectorFields.jsx\",\n  _s = $RefreshSig$();\nimport { Grid, TextField } from '@mui/material';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SampleDetectorFields = () => {\n  _s();\n  const [numSamples, setNumSamples] = useState(10);\n  const [sourceToDetector, setSourceToDetector] = useState(100);\n  const [detectorDiameter, setDetectorDiameter] = useState(50);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Number of Samples\",\n        type: \"number\",\n        value: numSamples,\n        onChange: e => setNumSamples(Number(e.target.value)),\n        fullWidth: true,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Source to Detector Distance\",\n        type: \"number\",\n        value: sourceToDetector,\n        onChange: e => setSourceToDetector(Number(e.target.value)),\n        fullWidth: true,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Detector Diameter\",\n        type: \"number\",\n        value: detectorDiameter,\n        onChange: e => setDetectorDiameter(Number(e.target.value)),\n        fullWidth: true,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n_s(SampleDetectorFields, \"YzfXJfucFhQc8wp9MA7fo+cduTI=\");\n_c = SampleDetectorFields;\nexport default SampleDetectorFields;\nvar _c;\n$RefreshReg$(_c, \"SampleDetectorFields\");","map":{"version":3,"names":["Grid","TextField","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","SampleDetectorFields","_s","numSamples","setNumSamples","sourceToDetector","setSourceToDetector","detectorDiameter","setDetectorDiameter","children","item","xs","label","type","value","onChange","e","Number","target","fullWidth","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/components/SampleDetectorFields.jsx"],"sourcesContent":["import { Grid, TextField } from '@mui/material'\nimport { useState } from 'react'\n\nconst SampleDetectorFields = () => {\n\tconst [numSamples, setNumSamples] = useState(10)\n\tconst [sourceToDetector, setSourceToDetector] = useState(100)\n\tconst [detectorDiameter, setDetectorDiameter] = useState(50)\n   \n\treturn (\n\t\t<>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<TextField\n\t\t\t\t\tlabel='Number of Samples'\n\t\t\t\t\ttype='number'\n\t\t\t\t\tvalue={numSamples}\n\t\t\t\t\tonChange={(e) => setNumSamples(Number(e.target.value))}\n\t\t\t\t\tfullWidth\n\t\t\t\t\tsize='small'\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={6}>\n\t\t\t\t<TextField\n\t\t\t\t\tlabel='Source to Detector Distance'\n\t\t\t\t\ttype='number'\n\t\t\t\t\tvalue={sourceToDetector}\n\t\t\t\t\tonChange={(e) => setSourceToDetector(Number(e.target.value))}\n\t\t\t\t\tfullWidth\n\t\t\t\t\tsize='small'\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={6}>\n\t\t\t\t<TextField\n\t\t\t\t\tlabel='Detector Diameter'\n\t\t\t\t\ttype='number'\n\t\t\t\t\tvalue={detectorDiameter}\n\t\t\t\t\tonChange={(e) => setDetectorDiameter(Number(e.target.value))}\n\t\t\t\t\tfullWidth\n\t\t\t\t\tsize='small'\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t</>\n\t)\n}\n\nexport default SampleDetectorFields\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,SAAS,QAAQ,eAAe;AAC/C,SAASC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhC,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,GAAG,CAAC;EAC7D,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE5D,oBACCE,OAAA,CAAAE,SAAA;IAAAS,QAAA,gBACCX,OAAA,CAACJ,IAAI;MAACgB,IAAI;MAACC,EAAE,EAAE,EAAG;MAAAF,QAAA,eACjBX,OAAA,CAACH,SAAS;QACTiB,KAAK,EAAC,mBAAmB;QACzBC,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAEX,UAAW;QAClBY,QAAQ,EAAGC,CAAC,IAAKZ,aAAa,CAACa,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QACvDK,SAAS;QACTC,IAAI,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACP1B,OAAA,CAACJ,IAAI;MAACgB,IAAI;MAACC,EAAE,EAAE,CAAE;MAAAF,QAAA,eAChBX,OAAA,CAACH,SAAS;QACTiB,KAAK,EAAC,6BAA6B;QACnCC,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAET,gBAAiB;QACxBU,QAAQ,EAAGC,CAAC,IAAKV,mBAAmB,CAACW,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QAC7DK,SAAS;QACTC,IAAI,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACP1B,OAAA,CAACJ,IAAI;MAACgB,IAAI;MAACC,EAAE,EAAE,CAAE;MAAAF,QAAA,eAChBX,OAAA,CAACH,SAAS;QACTiB,KAAK,EAAC,mBAAmB;QACzBC,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAEP,gBAAiB;QACxBQ,QAAQ,EAAGC,CAAC,IAAKR,mBAAmB,CAACS,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QAC7DK,SAAS;QACTC,IAAI,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA,eACN,CAAC;AAEL,CAAC;AAAAtB,EAAA,CAvCKD,oBAAoB;AAAAwB,EAAA,GAApBxB,oBAAoB;AAyC1B,eAAeA,oBAAoB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}