{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport nifti from 'nifti-reader-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NiftiViewer = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n  useEffect(() => {\n    // Load the CT_AVM.nii.gz file when the component mounts\n    fetch('CT_AVM.nii.gz').then(response => response.arrayBuffer()).then(data => {\n      readNIFTI(data);\n    });\n  }, []);\n  const readNIFTI = data => {\n    if (nifti.isCompressed(data)) {\n      data = nifti.decompress(data);\n    }\n    if (nifti.isNIFTI(data)) {\n      const header = nifti.readHeader(data);\n      const image = nifti.readImage(header, data);\n      setNiftiHeader(header);\n      setNiftiImage(image);\n      const slices = header.dims[3];\n      setSlice(Math.round(slices / 2));\n    }\n  };\n  const drawCanvas = sliceIndex => {\n    if (!niftiHeader || !niftiImage) return;\n    const canvas = canvasRef.current;\n    const cols = niftiHeader.dims[1];\n    const rows = niftiHeader.dims[2];\n    canvas.width = cols;\n    canvas.height = rows;\n    const ctx = canvas.getContext('2d');\n    const imageData = ctx.createImageData(cols, rows);\n    const sliceSize = cols * rows;\n    const sliceOffset = sliceSize * sliceIndex;\n    const typedData = new Float32Array(niftiImage);\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < sliceSize; i++) {\n      const value = typedData[sliceOffset + i];\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n    for (let i = 0; i < sliceSize; i++) {\n      const value = typedData[sliceOffset + i];\n      const normalizedValue = Math.round((value - min) / (max - min) * 255);\n      const index = i * 4;\n      imageData.data[index] = normalizedValue;\n      imageData.data[index + 1] = normalizedValue;\n      imageData.data[index + 2] = normalizedValue;\n      imageData.data[index + 3] = 255;\n    }\n    ctx.putImageData(imageData, 0, 0);\n  };\n  useEffect(() => {\n    if (niftiHeader && niftiImage) {\n      drawCanvas(slice);\n    }\n  }, [niftiHeader, niftiImage, slice]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), niftiHeader && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: niftiHeader.dims[3] - 1,\n      value: slice,\n      onChange: e => setSlice(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(NiftiViewer, \"jksyYkxGssdKCNaL40P9Nzo1FsY=\");\n_c = NiftiViewer;\nexport default NiftiViewer;\nvar _c;\n$RefreshReg$(_c, \"NiftiViewer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","nifti","jsxDEV","_jsxDEV","NiftiViewer","_s","canvasRef","niftiHeader","setNiftiHeader","niftiImage","setNiftiImage","slice","setSlice","fetch","then","response","arrayBuffer","data","readNIFTI","isCompressed","decompress","isNIFTI","header","readHeader","image","readImage","slices","dims","Math","round","drawCanvas","sliceIndex","canvas","current","cols","rows","width","height","ctx","getContext","imageData","createImageData","sliceSize","sliceOffset","typedData","Float32Array","min","Infinity","max","i","value","normalizedValue","index","putImageData","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","parseInt","target","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport nifti from 'nifti-reader-js';\n\nconst NiftiViewer = () => {\n    const canvasRef = useRef(null);\n    const [niftiHeader, setNiftiHeader] = useState(null);\n    const [niftiImage, setNiftiImage] = useState(null);\n    const [slice, setSlice] = useState(0);\n\n    useEffect(() => {\n        // Load the CT_AVM.nii.gz file when the component mounts\n        fetch('CT_AVM.nii.gz')\n            .then(response => response.arrayBuffer())\n            .then(data => {\n                readNIFTI(data);\n            });\n    }, []);\n\n    const readNIFTI = (data) => {\n        if (nifti.isCompressed(data)) {\n            data = nifti.decompress(data);\n        }\n\n        if (nifti.isNIFTI(data)) {\n            const header = nifti.readHeader(data);\n            const image = nifti.readImage(header, data);\n\n            setNiftiHeader(header);\n            setNiftiImage(image);\n\n            const slices = header.dims[3];\n            setSlice(Math.round(slices / 2));\n        }\n    };\n\n    const drawCanvas = (sliceIndex) => {\n        if (!niftiHeader || !niftiImage) return;\n\n        const canvas = canvasRef.current;\n        const cols = niftiHeader.dims[1];\n        const rows = niftiHeader.dims[2];\n        canvas.width = cols;\n        canvas.height = rows;\n        const ctx = canvas.getContext('2d');\n        const imageData = ctx.createImageData(cols, rows);\n\n        const sliceSize = cols * rows;\n        const sliceOffset = sliceSize * sliceIndex;\n        const typedData = new Float32Array(niftiImage);\n\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < sliceSize; i++) {\n            const value = typedData[sliceOffset + i];\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n        }\n\n        for (let i = 0; i < sliceSize; i++) {\n            const value = typedData[sliceOffset + i];\n            const normalizedValue = Math.round(((value - min) / (max - min)) * 255);\n            const index = i * 4;\n            imageData.data[index] = normalizedValue;\n            imageData.data[index + 1] = normalizedValue;\n            imageData.data[index + 2] = normalizedValue;\n            imageData.data[index + 3] = 255;\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n    };\n\n    useEffect(() => {\n        if (niftiHeader && niftiImage) {\n            drawCanvas(slice);\n        }\n    }, [niftiHeader, niftiImage, slice]);\n\n    return (\n        <div>\n            <canvas ref={canvasRef}></canvas>\n            {niftiHeader && (\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max={niftiHeader.dims[3] - 1}\n                    value={slice}\n                    onChange={(e) => setSlice(parseInt(e.target.value))}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default NiftiViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}