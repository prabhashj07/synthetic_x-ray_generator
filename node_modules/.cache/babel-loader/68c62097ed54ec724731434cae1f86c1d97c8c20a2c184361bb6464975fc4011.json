{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport nifti from 'nifti-reader-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NiftiViewer = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n  useEffect(() => {\n    // Load the CT_Abdo.nii.gz file when the component mounts\n    fetch('./CT_Abdo.nii.gz').then(response => response.arrayBuffer()).then(data => {\n      readNIFTI('CT_Abdo.nii.gz', data);\n    });\n  }, []);\n  const readNIFTI = (name, data) => {\n    if (nifti.isCompressed(data)) {\n      data = nifti.decompress(data);\n    }\n    if (nifti.isNIFTI(data)) {\n      const header = nifti.readHeader(data);\n      const image = nifti.readImage(header, data);\n      setNiftiHeader(header);\n      setNiftiImage(image);\n      const slices = header.dims[3];\n      setSlice(Math.round(slices / 2));\n    }\n  };\n  const drawCanvas = sliceIndex => {\n    const canvas = canvasRef.current;\n    const cols = niftiHeader.dims[1];\n    const rows = niftiHeader.dims[2];\n    const ctx = canvas.getContext('2d');\n    const canvasImageData = ctx.createImageData(cols, rows);\n    const sliceSize = cols * rows;\n    const sliceOffset = sliceSize * sliceIndex;\n    const typedData = new Uint8Array(niftiImage);\n    for (let row = 0; row < rows; row++) {\n      const rowOffset = row * cols;\n      for (let col = 0; col < cols; col++) {\n        const offset = sliceOffset + rowOffset + col;\n        const value = typedData[offset];\n        const pixelIndex = (rowOffset + col) * 4;\n        canvasImageData.data[pixelIndex] = value;\n        canvasImageData.data[pixelIndex + 1] = value;\n        canvasImageData.data[pixelIndex + 2] = value;\n        canvasImageData.data[pixelIndex + 3] = 255;\n      }\n    }\n    ctx.putImageData(canvasImageData, 0, 0);\n  };\n  useEffect(() => {\n    if (niftiHeader && niftiImage) {\n      drawCanvas(slice);\n    }\n  }, [niftiHeader, niftiImage, slice]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"256\",\n      height: \"256\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), niftiHeader && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: niftiHeader.dims[3] - 1,\n      value: slice,\n      onChange: e => setSlice(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(NiftiViewer, \"jksyYkxGssdKCNaL40P9Nzo1FsY=\");\n_c = NiftiViewer;\nexport default NiftiViewer;\nvar _c;\n$RefreshReg$(_c, \"NiftiViewer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","nifti","jsxDEV","_jsxDEV","NiftiViewer","_s","canvasRef","niftiHeader","setNiftiHeader","niftiImage","setNiftiImage","slice","setSlice","fetch","then","response","arrayBuffer","data","readNIFTI","name","isCompressed","decompress","isNIFTI","header","readHeader","image","readImage","slices","dims","Math","round","drawCanvas","sliceIndex","canvas","current","cols","rows","ctx","getContext","canvasImageData","createImageData","sliceSize","sliceOffset","typedData","Uint8Array","row","rowOffset","col","offset","value","pixelIndex","putImageData","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","e","parseInt","target","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport nifti from 'nifti-reader-js';\n\nconst NiftiViewer = () => {\n    const canvasRef = useRef(null);\n    const [niftiHeader, setNiftiHeader] = useState(null);\n    const [niftiImage, setNiftiImage] = useState(null);\n    const [slice, setSlice] = useState(0);\n\n    useEffect(() => {\n        // Load the CT_Abdo.nii.gz file when the component mounts\n        fetch('./CT_Abdo.nii.gz')\n            .then(response => response.arrayBuffer())\n            .then(data => {\n                readNIFTI('CT_Abdo.nii.gz', data);\n            });\n    }, []);\n\n    const readNIFTI = (name, data) => {\n        if (nifti.isCompressed(data)) {\n            data = nifti.decompress(data);\n        }\n\n        if (nifti.isNIFTI(data)) {\n            const header = nifti.readHeader(data);\n            const image = nifti.readImage(header, data);\n\n            setNiftiHeader(header);\n            setNiftiImage(image);\n\n            const slices = header.dims[3];\n            setSlice(Math.round(slices / 2));\n        }\n    };\n\n    const drawCanvas = (sliceIndex) => {\n        const canvas = canvasRef.current;\n        const cols = niftiHeader.dims[1];\n        const rows = niftiHeader.dims[2];\n        const ctx = canvas.getContext('2d');\n        const canvasImageData = ctx.createImageData(cols, rows);\n\n        const sliceSize = cols * rows;\n        const sliceOffset = sliceSize * sliceIndex;\n        const typedData = new Uint8Array(niftiImage);\n\n        for (let row = 0; row < rows; row++) {\n            const rowOffset = row * cols;\n            for (let col = 0; col < cols; col++) {\n                const offset = sliceOffset + rowOffset + col;\n                const value = typedData[offset];\n                const pixelIndex = (rowOffset + col) * 4;\n                canvasImageData.data[pixelIndex] = value;\n                canvasImageData.data[pixelIndex + 1] = value;\n                canvasImageData.data[pixelIndex + 2] = value;\n                canvasImageData.data[pixelIndex + 3] = 255;\n            }\n        }\n\n        ctx.putImageData(canvasImageData, 0, 0);\n    };\n\n    useEffect(() => {\n        if (niftiHeader && niftiImage) {\n            drawCanvas(slice);\n        }\n    }, [niftiHeader, niftiImage, slice]);\n\n    return (\n        <div>\n            <canvas ref={canvasRef} width=\"256\" height=\"256\"></canvas>\n            {niftiHeader && (\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max={niftiHeader.dims[3] - 1}\n                    value={slice}\n                    onChange={(e) => setSlice(parseInt(e.target.value))}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default NiftiViewer;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}