{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport * as nifti from 'nifti-reader-js';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeJS = ({\n  rotation,\n  tilt,\n  translation,\n  file\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n  const readNIFTI = useCallback(data => {\n    console.log(\"Attempting to read NIFTI data\");\n    try {\n      if (nifti.isCompressed(data)) {\n        console.log(\"Data is compressed, decompressing...\");\n        data = nifti.decompress(data);\n      }\n      if (nifti.isNIFTI(data)) {\n        console.log(\"Valid NIFTI data found\");\n        const header = nifti.readHeader(data);\n        const image = nifti.readImage(header, data);\n        console.log(\"Header:\", header);\n        console.log(\"Image data length:\", image.length);\n        setNiftiHeader(header);\n        setNiftiImage(image);\n        const slices = header.dims[3];\n        setSlice(Math.floor(slices / 2));\n      } else {\n        console.error(\"Not a valid NIFTI file\");\n      }\n    } catch (error) {\n      console.error(\"Error reading NIFTI file:\", error);\n    }\n  }, []);\n  useEffect(() => {\n    if (file) {\n      console.log(\"File received in ThreeJS component:\", file.name);\n      const reader = new FileReader();\n      reader.onload = e => {\n        console.log(\"File loaded, calling readNIFTI\");\n        const arrayBuffer = e.target.result;\n        readNIFTI(arrayBuffer);\n      };\n      reader.onerror = e => {\n        console.error(\"Error reading file:\", e);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  }, [file, readNIFTI]);\n  useEffect(() => {\n    if (!niftiHeader || !niftiImage) return;\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(width, height);\n    mountRef.current.appendChild(renderer.domElement);\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    const controls = new OrbitControls(camera, renderer.domElement);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      mountRef.current.removeChild(renderer.domElement);\n    };\n  }, [niftiHeader, niftiImage, rotation, tilt, translation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100%',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), niftiHeader && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: niftiHeader.dims[3] - 1,\n      value: slice,\n      onChange: e => setSlice(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"File loaded: \", file ? file.name : 'No file']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Slice: \", slice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Image dimensions: \", niftiHeader ? `${niftiHeader.dims[1]}x${niftiHeader.dims[2]}x${niftiHeader.dims[3]}` : 'N/A']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeJS, \"u3+yF1WDHww7gGyLcRXV70Rov50=\");\n_c = ThreeJS;\nexport default ThreeJS;\nvar _c;\n$RefreshReg$(_c, \"ThreeJS\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","nifti","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeJS","rotation","tilt","translation","file","_s","mountRef","niftiHeader","setNiftiHeader","niftiImage","setNiftiImage","slice","setSlice","readNIFTI","data","console","log","isCompressed","decompress","isNIFTI","header","readHeader","image","readImage","length","slices","dims","Math","floor","error","name","reader","FileReader","onload","e","arrayBuffer","target","result","onerror","readAsArrayBuffer","width","current","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","setSize","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","controls","animate","requestAnimationFrame","x","y","update","render","removeChild","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","value","onChange","parseInt","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport * as nifti from 'nifti-reader-js';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst ThreeJS = ({ rotation, tilt, translation, file }) => {\n    const mountRef = useRef(null);\n    const [niftiHeader, setNiftiHeader] = useState(null);\n    const [niftiImage, setNiftiImage] = useState(null);\n    const [slice, setSlice] = useState(0);\n\n    const readNIFTI = useCallback((data) => {\n        console.log(\"Attempting to read NIFTI data\");\n        try {\n            if (nifti.isCompressed(data)) {\n                console.log(\"Data is compressed, decompressing...\");\n                data = nifti.decompress(data);\n            }\n\n            if (nifti.isNIFTI(data)) {\n                console.log(\"Valid NIFTI data found\");\n                const header = nifti.readHeader(data);\n                const image = nifti.readImage(header, data);\n\n                console.log(\"Header:\", header);\n                console.log(\"Image data length:\", image.length);\n\n                setNiftiHeader(header);\n                setNiftiImage(image);\n\n                const slices = header.dims[3];\n                setSlice(Math.floor(slices / 2));\n            } else {\n                console.error(\"Not a valid NIFTI file\");\n            }\n        } catch (error) {\n            console.error(\"Error reading NIFTI file:\", error);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (file) {\n            console.log(\"File received in ThreeJS component:\", file.name);\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                console.log(\"File loaded, calling readNIFTI\");\n                const arrayBuffer = e.target.result;\n                readNIFTI(arrayBuffer);\n            };\n            reader.onerror = (e) => {\n                console.error(\"Error reading file:\", e);\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }, [file, readNIFTI]);\n\n    useEffect(() => {\n        if (!niftiHeader || !niftiImage) return;\n\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer();\n\n        renderer.setSize(width, height);\n        mountRef.current.appendChild(renderer.domElement);\n\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        const cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n\n        camera.position.z = 5;\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n            controls.update();\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        return () => {\n            mountRef.current.removeChild(renderer.domElement);\n        };\n    }, [niftiHeader, niftiImage, rotation, tilt, translation]);\n\n    return (\n        <div>\n            <div ref={mountRef} style={{ width: '100%', height: '400px' }}></div>\n            {niftiHeader && (\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max={niftiHeader.dims[3] - 1}\n                    value={slice}\n                    onChange={(e) => setSlice(parseInt(e.target.value))}\n                />\n            )}\n            <p>File loaded: {file ? file.name : 'No file'}</p>\n            <p>Slice: {slice}</p>\n            <p>Image dimensions: {niftiHeader ? `${niftiHeader.dims[1]}x${niftiHeader.dims[2]}x${niftiHeader.dims[3]}` : 'N/A'}</p>\n        </div>\n    );\n};\n\nexport default ThreeJS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}