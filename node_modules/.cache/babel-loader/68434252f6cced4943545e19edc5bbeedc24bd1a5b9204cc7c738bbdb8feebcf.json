{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = void 0;\nconst nifti_extension_1 = require(\"./nifti-extension\");\nclass Utils {\n  /*** Static Pseudo-constants ***/\n  static crcTable = null;\n  static GUNZIP_MAGIC_COOKIE1 = 31;\n  static GUNZIP_MAGIC_COOKIE2 = 139;\n  /*** Static methods ***/\n  static getStringAt(data, start, end) {\n    var str = \"\",\n      ctr,\n      ch;\n    for (ctr = start; ctr < end; ctr += 1) {\n      ch = data.getUint8(ctr);\n      if (ch !== 0) {\n        str += String.fromCharCode(ch);\n      }\n    }\n    return str;\n  }\n  static getByteAt = function (data, start) {\n    return data.getInt8(start);\n  };\n  static getShortAt = function (data, start, littleEndian) {\n    return data.getInt16(start, littleEndian);\n  };\n  static getIntAt(data, start, littleEndian) {\n    return data.getInt32(start, littleEndian);\n  }\n  static getFloatAt(data, start, littleEndian) {\n    return data.getFloat32(start, littleEndian);\n  }\n  static getDoubleAt(data, start, littleEndian) {\n    return data.getFloat64(start, littleEndian);\n  }\n  static getLongAt(data, start, littleEndian) {\n    var ctr,\n      array = [],\n      value = 0;\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      array[ctr] = Utils.getByteAt(data, start + ctr);\n    }\n    for (ctr = array.length - 1; ctr >= 0; ctr--) {\n      value = value * 256 + array[ctr];\n    }\n    return value;\n  }\n  static getExtensionsAt(data, start, littleEndian, voxOffset) {\n    let extensions = [];\n    let extensionByteIndex = start;\n    // Multiple extended header sections are allowed\n    while (extensionByteIndex < voxOffset) {\n      // assume same endianess as header until proven otherwise\n      let extensionLittleEndian = littleEndian;\n      let esize = Utils.getIntAt(data, extensionByteIndex, littleEndian);\n      if (!esize) {\n        break; // no more extensions\n      }\n      // check if this takes us past vox_offset\n      if (esize + extensionByteIndex > voxOffset) {\n        // check if reversing byte order gets a proper size\n        extensionLittleEndian = !extensionLittleEndian;\n        esize = Utils.getIntAt(data, extensionByteIndex, extensionLittleEndian);\n        if (esize + extensionByteIndex > voxOffset) {\n          throw new Error(\"This does not appear to be a valid NIFTI extension\");\n        }\n      }\n      // esize must be a positive integral multiple of 16\n      if (esize % 16 != 0) {\n        throw new Error(\"This does not appear to be a NIFTI extension\");\n      }\n      let ecode = Utils.getIntAt(data, extensionByteIndex + 4, extensionLittleEndian);\n      let edata = data.buffer.slice(extensionByteIndex + 8, extensionByteIndex + esize);\n      console.log(\"extensionByteIndex: \" + (extensionByteIndex + 8) + \" esize: \" + esize);\n      console.log(edata);\n      let extension = new nifti_extension_1.NIFTIEXTENSION(esize, ecode, edata, extensionLittleEndian);\n      extensions.push(extension);\n      extensionByteIndex += esize;\n    }\n    return extensions;\n  }\n  static toArrayBuffer(buffer) {\n    var ab, view, i;\n    ab = new ArrayBuffer(buffer.length);\n    view = new Uint8Array(ab);\n    for (i = 0; i < buffer.length; i += 1) {\n      view[i] = buffer[i];\n    }\n    return ab;\n  }\n  static isString(obj) {\n    return typeof obj === \"string\" || obj instanceof String;\n  }\n  static formatNumber(num, shortFormat = undefined) {\n    let val;\n    if (Utils.isString(num)) {\n      val = Number(num);\n    } else {\n      val = num;\n    }\n    if (shortFormat) {\n      val = val.toPrecision(5);\n    } else {\n      val = val.toPrecision(7);\n    }\n    return parseFloat(val);\n  }\n  // http://stackoverflow.com/questions/18638900/javascript-crc32\n  static makeCRCTable() {\n    let c;\n    let crcTable = [];\n    for (var n = 0; n < 256; n++) {\n      c = n;\n      for (var k = 0; k < 8; k++) {\n        c = c & 1 ? 0xedb88320 ^ c >>> 1 : c >>> 1;\n      }\n      crcTable[n] = c;\n    }\n    return crcTable;\n  }\n  static crc32(dataView) {\n    if (!Utils.crcTable) {\n      Utils.crcTable = Utils.makeCRCTable();\n    }\n    const crcTable = Utils.crcTable;\n    let crc = 0 ^ -1;\n    for (var i = 0; i < dataView.byteLength; i++) {\n      crc = crc >>> 8 ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xff];\n    }\n    return (crc ^ -1) >>> 0;\n  }\n}\nexports.Utils = Utils;","map":{"version":3,"names":["nifti_extension_1","require","Utils","crcTable","GUNZIP_MAGIC_COOKIE1","GUNZIP_MAGIC_COOKIE2","getStringAt","data","start","end","str","ctr","ch","getUint8","String","fromCharCode","getByteAt","getInt8","getShortAt","littleEndian","getInt16","getIntAt","getInt32","getFloatAt","getFloat32","getDoubleAt","getFloat64","getLongAt","array","value","length","getExtensionsAt","voxOffset","extensions","extensionByteIndex","extensionLittleEndian","esize","Error","ecode","edata","buffer","slice","console","log","extension","NIFTIEXTENSION","push","toArrayBuffer","ab","view","i","ArrayBuffer","Uint8Array","isString","obj","formatNumber","num","shortFormat","undefined","val","Number","toPrecision","parseFloat","makeCRCTable","c","n","k","crc32","dataView","crc","byteLength","exports"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/node_modules/nifti-reader-js/src/utilities.ts"],"sourcesContent":["import { NIFTIEXTENSION } from \"./nifti-extension\";\n\ntype TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\nexport class Utils {\n  /*** Static Pseudo-constants ***/\n\n  public static crcTable: number[] | null = null;\n  public static readonly GUNZIP_MAGIC_COOKIE1 = 31;\n  public static readonly GUNZIP_MAGIC_COOKIE2 = 139;\n\n  /*** Static methods ***/\n\n  static getStringAt(data: DataView, start: number, end: number): string {\n    var str = \"\",\n      ctr,\n      ch;\n\n    for (ctr = start; ctr < end; ctr += 1) {\n      ch = data.getUint8(ctr);\n\n      if (ch !== 0) {\n        str += String.fromCharCode(ch);\n      }\n    }\n\n    return str;\n  }\n\n  static getByteAt = function (data: DataView, start: number): number {\n    return data.getInt8(start);\n  };\n\n  static getShortAt = function (\n    data: DataView,\n    start: number,\n    littleEndian: boolean\n  ) {\n    return data.getInt16(start, littleEndian);\n  };\n\n  static getIntAt(\n    data: DataView,\n    start: number,\n    littleEndian: boolean\n  ): number {\n    return data.getInt32(start, littleEndian);\n  }\n\n  static getFloatAt(data: DataView, start: number, littleEndian: boolean) {\n    return data.getFloat32(start, littleEndian);\n  }\n\n  static getDoubleAt(data: DataView, start: number, littleEndian: boolean) {\n    return data.getFloat64(start, littleEndian);\n  }\n\n  static getLongAt(data: DataView, start: number, littleEndian: boolean) {\n    var ctr,\n      array = [],\n      value = 0;\n\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      array[ctr] = Utils.getByteAt(data, start + ctr);\n    }\n\n    for (ctr = array.length - 1; ctr >= 0; ctr--) {\n      value = value * 256 + array[ctr];\n    }\n\n    return value;\n  }\n\n  static getExtensionsAt(\n    data: DataView,\n    start: number,\n    littleEndian: boolean,\n    voxOffset: number\n  ) {\n    let extensions = [];\n    let extensionByteIndex = start;\n\n    // Multiple extended header sections are allowed\n    while (extensionByteIndex < voxOffset) {\n      // assume same endianess as header until proven otherwise\n      let extensionLittleEndian = littleEndian;\n      let esize = Utils.getIntAt(data, extensionByteIndex, littleEndian);\n      if (!esize) {\n        break; // no more extensions\n      }\n\n      // check if this takes us past vox_offset\n      if (esize + extensionByteIndex > voxOffset) {\n        // check if reversing byte order gets a proper size\n        extensionLittleEndian = !extensionLittleEndian;\n        esize = Utils.getIntAt(\n          data,\n          extensionByteIndex,\n          extensionLittleEndian\n        );\n        if (esize + extensionByteIndex > voxOffset) {\n          throw new Error(\"This does not appear to be a valid NIFTI extension\");\n        }\n      }\n\n      // esize must be a positive integral multiple of 16\n      if (esize % 16 != 0) {\n        throw new Error(\"This does not appear to be a NIFTI extension\");\n      }\n\n      let ecode = Utils.getIntAt(\n        data,\n        extensionByteIndex + 4,\n        extensionLittleEndian\n      );\n      let edata = data.buffer.slice(\n        extensionByteIndex + 8,\n        extensionByteIndex + esize\n      );\n      console.log(\n        \"extensionByteIndex: \" + (extensionByteIndex + 8) + \" esize: \" + esize\n      );\n      console.log(edata);\n      let extension = new NIFTIEXTENSION(\n        esize,\n        ecode,\n        edata,\n        extensionLittleEndian\n      );\n      extensions.push(extension);\n      extensionByteIndex += esize;\n    }\n    return extensions;\n  }\n\n  static toArrayBuffer(buffer: TypedArray): ArrayBuffer {\n    var ab, view, i;\n\n    ab = new ArrayBuffer(buffer.length);\n    view = new Uint8Array(ab);\n    for (i = 0; i < buffer.length; i += 1) {\n      view[i] = buffer[i];\n    }\n    return ab;\n  }\n\n  static isString(obj: Object): boolean {\n    return typeof obj === \"string\" || obj instanceof String;\n  }\n\n  static formatNumber(\n    num: any,\n    shortFormat: boolean | undefined = undefined\n  ): number {\n    let val;\n\n    if (Utils.isString(num)) {\n      val = Number(num);\n    } else {\n      val = num;\n    }\n\n    if (shortFormat) {\n      val = val.toPrecision(5);\n    } else {\n      val = val.toPrecision(7);\n    }\n\n    return parseFloat(val);\n  }\n\n  // http://stackoverflow.com/questions/18638900/javascript-crc32\n  static makeCRCTable(): number[] {\n    let c;\n    let crcTable: number[] = [];\n    for (var n = 0; n < 256; n++) {\n      c = n;\n      for (var k = 0; k < 8; k++) {\n        c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n      }\n      crcTable[n] = c;\n    }\n    return crcTable;\n  }\n\n  static crc32(dataView: DataView): number {\n    if (!Utils.crcTable) {\n      Utils.crcTable = Utils.makeCRCTable();\n    }\n    const crcTable = Utils.crcTable;\n    let crc = 0 ^ -1;\n\n    for (var i = 0; i < dataView.byteLength; i++) {\n      crc = (crc >>> 8) ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xff];\n    }\n\n    return (crc ^ -1) >>> 0;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}