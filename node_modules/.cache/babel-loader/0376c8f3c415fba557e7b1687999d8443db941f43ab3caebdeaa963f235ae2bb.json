{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport nifti from './nifti-reader.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeJS = ({\n  rotation,\n  tilt,\n  translation\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const sliceCount = 20; // Number of slices to display\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeeeeee);\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 50;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n    const loadNiftiFile = url => {\n      fetch(url).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.arrayBuffer();\n      }).then(data => {\n        // Check if the data is compressed\n        if (nifti.isCompressed(data)) {\n          data = nifti.decompress(data);\n        }\n\n        // Check if the data is a NIfTI file\n        if (nifti.isNIFTI(data)) {\n          // Read the header\n          const niftiHeader = nifti.readHeader(data);\n          console.log(niftiHeader.toFormattedString());\n\n          // Read the image data\n          const niftiImage = nifti.readImage(niftiHeader, data);\n\n          // Check for and read extensions\n          let niftiExt = null;\n          if (nifti.hasExtension(niftiHeader)) {\n            niftiExt = nifti.readExtensionData(niftiHeader, data);\n            console.log(niftiExt);\n          }\n          const width = niftiHeader.dims[1];\n          const height = niftiHeader.dims[2];\n          const depth = niftiHeader.dims[3];\n          console.log('NIfTI Dimensions:', {\n            width,\n            height,\n            depth\n          });\n\n          // Create planes for each slice\n          for (let z = 0; z < sliceCount; z++) {\n            const sliceIndex = Math.floor(z / sliceCount * depth);\n            const textureData = new Uint8Array(width * height);\n            for (let y = 0; y < height; y++) {\n              for (let x = 0; x < width; x++) {\n                const index = x + y * width + sliceIndex * width * height;\n                textureData[x + y * width] = niftiImage[index]; // Assuming niftiImage is in the right format\n              }\n            }\n            const texture = new THREE.DataTexture(textureData, width, height, THREE.RedFormat);\n            texture.needsUpdate = true;\n            const material = new THREE.MeshBasicMaterial({\n              map: texture,\n              transparent: true,\n              opacity: 0.5\n            });\n            const geometry = new THREE.PlaneGeometry(10, 10); // Adjust size as needed\n            const mesh = new THREE.Mesh(geometry, material);\n            mesh.position.z = (sliceIndex - depth / 2) * 0.5; // Position slices\n            scene.add(mesh);\n          }\n          const animate = () => {\n            requestAnimationFrame(animate);\n            scene.children.forEach(mesh => {\n              mesh.rotation.y = rotation;\n              mesh.rotation.x = tilt;\n            });\n            renderer.render(scene, camera);\n          };\n          animate();\n        } else {\n          console.error('The data is not a valid NIfTI file');\n        }\n      }).catch(error => console.error('Error loading NIfTI file:', error));\n    };\n    loadNiftiFile('./CT_Abdo.nii.gz'); // Ensure the path is correct\n\n    const mountElement = mountRef.current;\n    return () => {\n      if (mountElement) {\n        mountElement.removeChild(renderer.domElement);\n      }\n    };\n  }, [rotation, tilt, translation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeJS, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeJS;\nexport default ThreeJS;\nvar _c;\n$RefreshReg$(_c, \"ThreeJS\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","nifti","jsxDEV","_jsxDEV","ThreeJS","rotation","tilt","translation","_s","mountRef","sliceCount","scene","Scene","background","Color","camera","PerspectiveCamera","current","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","loadNiftiFile","url","fetch","then","response","ok","Error","arrayBuffer","data","isCompressed","decompress","isNIFTI","niftiHeader","readHeader","console","log","toFormattedString","niftiImage","readImage","niftiExt","hasExtension","readExtensionData","width","dims","height","depth","sliceIndex","Math","floor","textureData","Uint8Array","y","x","index","texture","DataTexture","RedFormat","needsUpdate","material","MeshBasicMaterial","map","transparent","opacity","geometry","PlaneGeometry","mesh","Mesh","add","animate","requestAnimationFrame","children","forEach","render","error","catch","mountElement","removeChild","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport nifti from './nifti-reader.js';\n\nconst ThreeJS = ({ rotation, tilt, translation }) => {\n  const mountRef = useRef(null);\n  const sliceCount = 20; // Number of slices to display\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeeeeee);\n\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 50;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    const loadNiftiFile = (url) => {\n      fetch(url)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.arrayBuffer();\n        })\n        .then(data => {\n          // Check if the data is compressed\n          if (nifti.isCompressed(data)) {\n            data = nifti.decompress(data);\n          }\n\n          // Check if the data is a NIfTI file\n          if (nifti.isNIFTI(data)) {\n            // Read the header\n            const niftiHeader = nifti.readHeader(data);\n            console.log(niftiHeader.toFormattedString());\n\n            // Read the image data\n            const niftiImage = nifti.readImage(niftiHeader, data);\n\n            // Check for and read extensions\n            let niftiExt = null;\n            if (nifti.hasExtension(niftiHeader)) {\n              niftiExt = nifti.readExtensionData(niftiHeader, data);\n              console.log(niftiExt);\n            }\n\n            const width = niftiHeader.dims[1];\n            const height = niftiHeader.dims[2];\n            const depth = niftiHeader.dims[3];\n\n            console.log('NIfTI Dimensions:', { width, height, depth });\n\n            // Create planes for each slice\n            for (let z = 0; z < sliceCount; z++) {\n              const sliceIndex = Math.floor((z / sliceCount) * depth);\n              const textureData = new Uint8Array(width * height);\n\n              for (let y = 0; y < height; y++) {\n                for (let x = 0; x < width; x++) {\n                  const index = x + y * width + sliceIndex * width * height;\n                  textureData[x + y * width] = niftiImage[index]; // Assuming niftiImage is in the right format\n                }\n              }\n\n              const texture = new THREE.DataTexture(textureData, width, height, THREE.RedFormat);\n              texture.needsUpdate = true;\n\n              const material = new THREE.MeshBasicMaterial({\n                map: texture,\n                transparent: true,\n                opacity: 0.5,\n              });\n\n              const geometry = new THREE.PlaneGeometry(10, 10); // Adjust size as needed\n              const mesh = new THREE.Mesh(geometry, material);\n              mesh.position.z = (sliceIndex - depth / 2) * 0.5; // Position slices\n              scene.add(mesh);\n            }\n\n            const animate = () => {\n              requestAnimationFrame(animate);\n\n              scene.children.forEach((mesh) => {\n                mesh.rotation.y = rotation;\n                mesh.rotation.x = tilt;\n              });\n\n              renderer.render(scene, camera);\n            };\n\n            animate();\n          } else {\n            console.error('The data is not a valid NIfTI file');\n          }\n        })\n        .catch(error => console.error('Error loading NIfTI file:', error));\n    };\n\n    loadNiftiFile('./CT_Abdo.nii.gz'); // Ensure the path is correct\n\n    const mountElement = mountRef.current;\n\n    return () => {\n      if (mountElement) {\n        mountElement.removeChild(renderer.domElement);\n      }\n    };\n  }, [rotation, tilt, translation]);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '100%' }}></div>;\n};\n\nexport default ThreeJS;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}