{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport nifti from 'nifti-reader-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeJS = ({\n  rotation,\n  tilt,\n  translation,\n  file\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n  useEffect(() => {\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const arrayBuffer = e.target.result;\n        readNIFTI(arrayBuffer);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  }, [file]);\n  const readNIFTI = data => {\n    // ... (rest of the readNIFTI function)\n  };\n  const drawCanvas = useCallback(sliceIndex => {\n    if (!niftiHeader || !niftiImage) return;\n    const canvas = canvasRef.current;\n    const cols = niftiHeader.dims[1];\n    const rows = niftiHeader.dims[2];\n    canvas.width = cols;\n    canvas.height = rows;\n    const ctx = canvas.getContext('2d');\n    const imageData = ctx.createImageData(cols, rows);\n    const sliceSize = cols * rows;\n    const sliceOffset = sliceSize * sliceIndex;\n    const typedData = new Float32Array(niftiImage);\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < sliceSize; i++) {\n      const value = typedData[sliceOffset + i];\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n    for (let i = 0; i < sliceSize; i++) {\n      const value = typedData[sliceOffset + i];\n      const normalizedValue = Math.round((value - min) / (max - min) * 255);\n      const index = i * 4;\n      imageData.data[index] = normalizedValue;\n      imageData.data[index + 1] = normalizedValue;\n      imageData.data[index + 2] = normalizedValue;\n      imageData.data[index + 3] = 255;\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    // Apply rotation, tilt, and translation here\n    ctx.save();\n    ctx.translate(cols / 2, rows / 2);\n    ctx.rotate(rotation * Math.PI / 180);\n    ctx.translate(-cols / 2, -rows / 2);\n    // Apply tilt and translation...\n    ctx.drawImage(canvas, translation.pushPull, translation.raiseLower);\n    ctx.restore();\n  }, [niftiHeader, niftiImage, rotation, tilt, translation]);\n  useEffect(() => {\n    if (niftiHeader && niftiImage) {\n      drawCanvas(slice);\n    }\n  }, [niftiHeader, niftiImage, slice, drawCanvas]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), niftiHeader && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: niftiHeader.dims[3] - 1,\n      value: slice,\n      onChange: e => setSlice(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeJS, \"jacBpcHpUj/rjApb+Kngd/9tJhM=\");\n_c = ThreeJS;\nexport default ThreeJS;\nvar _c;\n$RefreshReg$(_c, \"ThreeJS\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","nifti","jsxDEV","_jsxDEV","ThreeJS","rotation","tilt","translation","file","_s","canvasRef","niftiHeader","setNiftiHeader","niftiImage","setNiftiImage","slice","setSlice","reader","FileReader","onload","e","arrayBuffer","target","result","readNIFTI","readAsArrayBuffer","data","drawCanvas","sliceIndex","canvas","current","cols","dims","rows","width","height","ctx","getContext","imageData","createImageData","sliceSize","sliceOffset","typedData","Float32Array","min","Infinity","max","i","value","Math","normalizedValue","round","index","putImageData","save","translate","rotate","PI","drawImage","pushPull","raiseLower","restore","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","parseInt","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport nifti from 'nifti-reader-js';\n\nconst ThreeJS = ({ rotation, tilt, translation, file }) => {\n    const canvasRef = useRef(null);\n    const [niftiHeader, setNiftiHeader] = useState(null);\n    const [niftiImage, setNiftiImage] = useState(null);\n    const [slice, setSlice] = useState(0);\n\n    useEffect(() => {\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const arrayBuffer = e.target.result;\n                readNIFTI(arrayBuffer);\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }, [file]);\n\n    const readNIFTI = (data) => {\n        // ... (rest of the readNIFTI function)\n    };\n\n    const drawCanvas = useCallback((sliceIndex) => {\n        if (!niftiHeader || !niftiImage) return;\n\n        const canvas = canvasRef.current;\n        const cols = niftiHeader.dims[1];\n        const rows = niftiHeader.dims[2];\n        canvas.width = cols;\n        canvas.height = rows;\n        const ctx = canvas.getContext('2d');\n        const imageData = ctx.createImageData(cols, rows);\n\n        const sliceSize = cols * rows;\n        const sliceOffset = sliceSize * sliceIndex;\n        const typedData = new Float32Array(niftiImage);\n\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < sliceSize; i++) {\n            const value = typedData[sliceOffset + i];\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n        }\n\n        for (let i = 0; i < sliceSize; i++) {\n            const value = typedData[sliceOffset + i];\n            const normalizedValue = Math.round(((value - min) / (max - min)) * 255);\n            const index = i * 4;\n            imageData.data[index] = normalizedValue;\n            imageData.data[index + 1] = normalizedValue;\n            imageData.data[index + 2] = normalizedValue;\n            imageData.data[index + 3] = 255;\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n\n        // Apply rotation, tilt, and translation here\n        ctx.save();\n        ctx.translate(cols / 2, rows / 2);\n        ctx.rotate(rotation * Math.PI / 180);\n        ctx.translate(-cols / 2, -rows / 2);\n        // Apply tilt and translation...\n        ctx.drawImage(canvas, translation.pushPull, translation.raiseLower);\n        ctx.restore();\n\n    }, [niftiHeader, niftiImage, rotation, tilt, translation]);\n\n    useEffect(() => {\n        if (niftiHeader && niftiImage) {\n            drawCanvas(slice);\n        }\n    }, [niftiHeader, niftiImage, slice, drawCanvas]);\n\n    return (\n        <div>\n            <canvas ref={canvasRef}></canvas>\n            {niftiHeader && (\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max={niftiHeader.dims[3] - 1}\n                    value={slice}\n                    onChange={(e) => setSlice(parseInt(e.target.value))}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ThreeJS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}