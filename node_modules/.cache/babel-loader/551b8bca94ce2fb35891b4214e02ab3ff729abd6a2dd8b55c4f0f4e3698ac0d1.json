{"ast":null,"code":"import React,{useRef,useEffect}from'react';import*as THREE from'three';import nifti from'nifti-reader-js';import{jsx as _jsx}from\"react/jsx-runtime\";const ThreeJS=_ref=>{let{rotation,tilt,translation}=_ref;const mountRef=useRef(null);const sliceCount=20;// Number of slices to display\nuseEffect(()=>{const scene=new THREE.Scene();scene.background=new THREE.Color(0xeeeeee);const camera=new THREE.PerspectiveCamera(75,mountRef.current.clientWidth/mountRef.current.clientHeight,0.1,1000);camera.position.z=50;const renderer=new THREE.WebGLRenderer();renderer.setSize(mountRef.current.clientWidth,mountRef.current.clientHeight);mountRef.current.appendChild(renderer.domElement);const loadNiftiFile=url=>{fetch(url).then(response=>{if(!response.ok){throw new Error('Network response was not ok');}return response.arrayBuffer();}).then(buffer=>{const niftiHeader=nifti.readHeader(new Uint8Array(buffer));const niftiData=nifti.readImage(niftiHeader,new Uint8Array(buffer));const width=niftiHeader.dims[1];const height=niftiHeader.dims[2];const depth=niftiHeader.dims[3];console.log('NIfTI Dimensions:',{width,height,depth});// Create planes for each slice\nfor(let z=0;z<sliceCount;z++){const sliceIndex=Math.floor(z/sliceCount*depth);const textureData=new Uint8Array(width*height);for(let y=0;y<height;y++){for(let x=0;x<width;x++){const index=x+y*width+sliceIndex*width*height;textureData[x+y*width]=niftiData[index];// Assuming niftiData is in the right format\n}}const texture=new THREE.DataTexture(textureData,width,height,THREE.RedFormat);texture.needsUpdate=true;const material=new THREE.MeshBasicMaterial({map:texture,transparent:true,opacity:0.5});const geometry=new THREE.PlaneGeometry(10,10);// Adjust size as needed\nconst mesh=new THREE.Mesh(geometry,material);mesh.position.z=(sliceIndex-depth/2)*0.5;// Position slices\nscene.add(mesh);}const animate=()=>{requestAnimationFrame(animate);scene.children.forEach(mesh=>{mesh.rotation.y=rotation;mesh.rotation.x=tilt;});renderer.render(scene,camera);};animate();}).catch(error=>console.error('Error loading NIfTI file:',error));};loadNiftiFile('./CT_ABM.nii.gz');// Ensure the path is correct\nconst mountElement=mountRef.current;return()=>{if(mountElement){mountElement.removeChild(renderer.domElement);}};},[rotation,tilt,translation]);return/*#__PURE__*/_jsx(\"div\",{ref:mountRef,style:{width:'100%',height:'100%'}});};export default ThreeJS;","map":{"version":3,"names":["React","useRef","useEffect","THREE","nifti","jsx","_jsx","ThreeJS","_ref","rotation","tilt","translation","mountRef","sliceCount","scene","Scene","background","Color","camera","PerspectiveCamera","current","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","loadNiftiFile","url","fetch","then","response","ok","Error","arrayBuffer","buffer","niftiHeader","readHeader","Uint8Array","niftiData","readImage","width","dims","height","depth","console","log","sliceIndex","Math","floor","textureData","y","x","index","texture","DataTexture","RedFormat","needsUpdate","material","MeshBasicMaterial","map","transparent","opacity","geometry","PlaneGeometry","mesh","Mesh","add","animate","requestAnimationFrame","children","forEach","render","catch","error","mountElement","removeChild","ref","style"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport nifti from 'nifti-reader-js';\n\nconst ThreeJS = ({ rotation, tilt, translation }) => {\n  const mountRef = useRef(null);\n  const sliceCount = 20; // Number of slices to display\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeeeeee);\n\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 50;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    const loadNiftiFile = (url) => {\n      fetch(url)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.arrayBuffer();\n        })\n        .then(buffer => {\n          const niftiHeader = nifti.readHeader(new Uint8Array(buffer));\n          const niftiData = nifti.readImage(niftiHeader, new Uint8Array(buffer));\n\n          const width = niftiHeader.dims[1];\n          const height = niftiHeader.dims[2];\n          const depth = niftiHeader.dims[3];\n\n          console.log('NIfTI Dimensions:', { width, height, depth });\n\n          // Create planes for each slice\n          for (let z = 0; z < sliceCount; z++) {\n            const sliceIndex = Math.floor((z / sliceCount) * depth);\n            const textureData = new Uint8Array(width * height);\n\n            for (let y = 0; y < height; y++) {\n              for (let x = 0; x < width; x++) {\n                const index = x + y * width + sliceIndex * width * height;\n                textureData[x + y * width] = niftiData[index]; // Assuming niftiData is in the right format\n              }\n            }\n\n            const texture = new THREE.DataTexture(textureData, width, height, THREE.RedFormat);\n            texture.needsUpdate = true;\n\n            const material = new THREE.MeshBasicMaterial({\n              map: texture,\n              transparent: true,\n              opacity: 0.5,\n            });\n\n            const geometry = new THREE.PlaneGeometry(10, 10); // Adjust size as needed\n            const mesh = new THREE.Mesh(geometry, material);\n            mesh.position.z = (sliceIndex - depth / 2) * 0.5; // Position slices\n            scene.add(mesh);\n          }\n\n          const animate = () => {\n            requestAnimationFrame(animate);\n\n            scene.children.forEach((mesh) => {\n              mesh.rotation.y = rotation;\n              mesh.rotation.x = tilt;\n            });\n\n            renderer.render(scene, camera);\n          };\n\n          animate();\n        })\n        .catch(error => console.error('Error loading NIfTI file:', error));\n    };\n\n    loadNiftiFile('./CT_ABM.nii.gz'); // Ensure the path is correct\n\n    const mountElement = mountRef.current;\n\n    return () => {\n      if (mountElement) {\n        mountElement.removeChild(renderer.domElement);\n      }\n    };\n  }, [rotation, tilt, translation]);\n\n  return <div ref={mountRef} style={{ width: '100%', height: '100%' }}></div>;\n};\n\nexport default ThreeJS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}