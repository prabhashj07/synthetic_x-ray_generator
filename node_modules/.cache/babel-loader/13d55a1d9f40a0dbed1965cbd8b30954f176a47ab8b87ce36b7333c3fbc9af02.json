{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport * as nifti from 'nifti-reader-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeJS = ({\n  rotation,\n  tilt,\n  translation,\n  file\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n  const readNIFTI = useCallback(data => {\n    console.log(\"Attempting to read NIFTI data\");\n    try {\n      if (nifti.isCompressed(data)) {\n        console.log(\"Data is compressed, decompressing...\");\n        data = nifti.decompress(data);\n      }\n      if (nifti.isNIFTI(data)) {\n        console.log(\"Valid NIFTI data found\");\n        const header = nifti.readHeader(data);\n        const image = nifti.readImage(header, data);\n        console.log(\"Header:\", header);\n        console.log(\"Image data length:\", image.length);\n        setNiftiHeader(header);\n        setNiftiImage(image);\n        const slices = header.dims[3];\n        setSlice(Math.floor(slices / 2));\n      } else {\n        console.error(\"Not a valid NIFTI file\");\n      }\n    } catch (error) {\n      console.error(\"Error reading NIFTI file:\", error);\n    }\n  }, []);\n  useEffect(() => {\n    if (file) {\n      console.log(\"File received in ThreeJS component:\", file.name);\n      const reader = new FileReader();\n      reader.onload = e => {\n        console.log(\"File loaded, calling readNIFTI\");\n        const arrayBuffer = e.target.result;\n        readNIFTI(arrayBuffer);\n      };\n      reader.onerror = e => {\n        console.error(\"Error reading file:\", e);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  }, [file, readNIFTI]);\n  const drawCanvas = useCallback(() => {\n    console.log(\"Drawing canvas for slice:\", slice);\n    if (!niftiHeader || !niftiImage) {\n      console.log(\"niftiHeader or niftiImage is null, cannot draw canvas\");\n      return;\n    }\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error(\"Canvas reference is null\");\n      return;\n    }\n    const cols = niftiHeader.dims[1];\n    const rows = niftiHeader.dims[2];\n    canvas.width = cols;\n    canvas.height = rows;\n    const ctx = canvas.getContext('2d');\n    const imageData = ctx.createImageData(cols, rows);\n    const sliceSize = cols * rows;\n    const sliceOffset = sliceSize * slice;\n    const typedData = new Float32Array(niftiImage);\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < sliceSize; i++) {\n      const value = typedData[sliceOffset + i];\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n    console.log(\"Min value:\", min, \"Max value:\", max);\n    for (let i = 0; i < sliceSize; i++) {\n      const value = typedData[sliceOffset + i];\n      const normalizedValue = Math.round((value - min) / (max - min) * 255);\n      const index = i * 4;\n      imageData.data[index] = normalizedValue;\n      imageData.data[index + 1] = normalizedValue;\n      imageData.data[index + 2] = normalizedValue;\n      imageData.data[index + 3] = 255;\n    }\n    ctx.putImageData(imageData, 0, 0);\n\n    // Apply rotation, tilt, and translation\n    ctx.save();\n    ctx.translate(cols / 2, rows / 2);\n    ctx.rotate(rotation * Math.PI / 180);\n    ctx.translate(-cols / 2, -rows / 2);\n    ctx.translate(translation.pushPull, translation.raiseLower);\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n    console.log(\"Canvas drawing completed\");\n  }, [niftiHeader, niftiImage, slice, rotation, tilt, translation]);\n  useEffect(() => {\n    if (niftiHeader && niftiImage) {\n      console.log(\"niftiHeader and niftiImage updated, drawing canvas\");\n      drawCanvas();\n    }\n  }, [niftiHeader, niftiImage, slice, drawCanvas]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: '1px solid black',\n        maxWidth: '100%',\n        maxHeight: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), niftiHeader && /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: niftiHeader.dims[3] - 1,\n      value: slice,\n      onChange: e => setSlice(parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"File loaded: \", file ? file.name : 'No file']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Slice: \", slice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Image dimensions: \", niftiHeader ? `${niftiHeader.dims[1]}x${niftiHeader.dims[2]}x${niftiHeader.dims[3]}` : 'N/A']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeJS, \"R/+E16Ky4SEJTgTQY0KAjzDpJWM=\");\n_c = ThreeJS;\nexport default ThreeJS;\nvar _c;\n$RefreshReg$(_c, \"ThreeJS\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","nifti","jsxDEV","_jsxDEV","ThreeJS","rotation","tilt","translation","file","_s","canvasRef","niftiHeader","setNiftiHeader","niftiImage","setNiftiImage","slice","setSlice","readNIFTI","data","console","log","isCompressed","decompress","isNIFTI","header","readHeader","image","readImage","length","slices","dims","Math","floor","error","name","reader","FileReader","onload","e","arrayBuffer","target","result","onerror","readAsArrayBuffer","drawCanvas","canvas","current","cols","rows","width","height","ctx","getContext","imageData","createImageData","sliceSize","sliceOffset","typedData","Float32Array","min","Infinity","max","i","value","normalizedValue","round","index","putImageData","save","translate","rotate","PI","pushPull","raiseLower","drawImage","restore","children","ref","style","border","maxWidth","maxHeight","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","parseInt","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport * as nifti from 'nifti-reader-js';\n\nconst ThreeJS = ({ rotation, tilt, translation, file }) => {\n    const canvasRef = useRef(null);\n    const [niftiHeader, setNiftiHeader] = useState(null);\n    const [niftiImage, setNiftiImage] = useState(null);\n    const [slice, setSlice] = useState(0);\n\n    const readNIFTI = useCallback((data) => {\n        console.log(\"Attempting to read NIFTI data\");\n        try {\n            if (nifti.isCompressed(data)) {\n                console.log(\"Data is compressed, decompressing...\");\n                data = nifti.decompress(data);\n            }\n\n            if (nifti.isNIFTI(data)) {\n                console.log(\"Valid NIFTI data found\");\n                const header = nifti.readHeader(data);\n                const image = nifti.readImage(header, data);\n\n                console.log(\"Header:\", header);\n                console.log(\"Image data length:\", image.length);\n\n                setNiftiHeader(header);\n                setNiftiImage(image);\n\n                const slices = header.dims[3];\n                setSlice(Math.floor(slices / 2));\n            } else {\n                console.error(\"Not a valid NIFTI file\");\n            }\n        } catch (error) {\n            console.error(\"Error reading NIFTI file:\", error);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (file) {\n            console.log(\"File received in ThreeJS component:\", file.name);\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                console.log(\"File loaded, calling readNIFTI\");\n                const arrayBuffer = e.target.result;\n                readNIFTI(arrayBuffer);\n            };\n            reader.onerror = (e) => {\n                console.error(\"Error reading file:\", e);\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    }, [file, readNIFTI]);\n\n    const drawCanvas = useCallback(() => {\n        console.log(\"Drawing canvas for slice:\", slice);\n        if (!niftiHeader || !niftiImage) {\n            console.log(\"niftiHeader or niftiImage is null, cannot draw canvas\");\n            return;\n        }\n\n        const canvas = canvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas reference is null\");\n            return;\n        }\n\n        const cols = niftiHeader.dims[1];\n        const rows = niftiHeader.dims[2];\n        canvas.width = cols;\n        canvas.height = rows;\n        const ctx = canvas.getContext('2d');\n        const imageData = ctx.createImageData(cols, rows);\n\n        const sliceSize = cols * rows;\n        const sliceOffset = sliceSize * slice;\n        const typedData = new Float32Array(niftiImage);\n\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < sliceSize; i++) {\n            const value = typedData[sliceOffset + i];\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n        }\n\n        console.log(\"Min value:\", min, \"Max value:\", max);\n\n        for (let i = 0; i < sliceSize; i++) {\n            const value = typedData[sliceOffset + i];\n            const normalizedValue = Math.round(((value - min) / (max - min)) * 255);\n            const index = i * 4;\n            imageData.data[index] = normalizedValue;\n            imageData.data[index + 1] = normalizedValue;\n            imageData.data[index + 2] = normalizedValue;\n            imageData.data[index + 3] = 255;\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n\n        // Apply rotation, tilt, and translation\n        ctx.save();\n        ctx.translate(cols / 2, rows / 2);\n        ctx.rotate(rotation * Math.PI / 180);\n        ctx.translate(-cols / 2, -rows / 2);\n        ctx.translate(translation.pushPull, translation.raiseLower);\n        ctx.drawImage(canvas, 0, 0);\n        ctx.restore();\n\n        console.log(\"Canvas drawing completed\");\n    }, [niftiHeader, niftiImage, slice, rotation, tilt, translation]);\n\n    useEffect(() => {\n        if (niftiHeader && niftiImage) {\n            console.log(\"niftiHeader and niftiImage updated, drawing canvas\");\n            drawCanvas();\n        }\n    }, [niftiHeader, niftiImage, slice, drawCanvas]);\n\n    return (\n        <div>\n            <canvas ref={canvasRef} style={{border: '1px solid black', maxWidth: '100%', maxHeight: '400px'}}></canvas>\n            {niftiHeader && (\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max={niftiHeader.dims[3] - 1}\n                    value={slice}\n                    onChange={(e) => setSlice(parseInt(e.target.value))}\n                />\n            )}\n            <p>File loaded: {file ? file.name : 'No file'}</p>\n            <p>Slice: {slice}</p>\n            <p>Image dimensions: {niftiHeader ? `${niftiHeader.dims[1]}x${niftiHeader.dims[2]}x${niftiHeader.dims[3]}` : 'N/A'}</p>\n        </div>\n    );\n};\n\nexport default ThreeJS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}