{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NIFTI1 = void 0;\nconst utilities_1 = require(\"./utilities\");\n/*** Constructor ***/\n/**\n   * The NIFTI1 constructor.\n   * @constructor\n   * @property {boolean} littleEndian\n   * @property {number} dim_info\n   * @property {number[]} dims - image dimensions\n   * @property {number} intent_p1\n   * @property {number} intent_p2\n   * @property {number} intent_p3\n   * @property {number} intent_code\n   * @property {number} datatypeCode\n   * @property {number} numBitsPerVoxel\n   * @property {number} slice_start\n   * @property {number} slice_end\n   * @property {number} slice_code\n   * @property {number[]} pixDims - voxel dimensions\n   * @property {number} vox_offset\n   * @property {number} scl_slope\n   * @property {number} scl_inter\n   * @property {number} xyzt_units\n   * @property {number} cal_max\n   * @property {number} cal_min\n   * @property {number} slice_duration\n   * @property {number} toffset\n   * @property {string} description\n   * @property {string} aux_file\n   * @property {string} intent_name\n   * @property {number} qform_code\n   * @property {number} sform_code\n   * @property {number} quatern_b\n   * @property {number} quatern_c\n   * @property {number} quatern_d\n   * @property {number} quatern_x\n   * @property {number} quatern_y\n   * @property {number} quatern_z\n   * @property {Array.<Array.<number>>} affine\n   * @property {string} magic\n   * @property {boolean} isHDR - if hdr/img format\n   * @property {number[]} extensionFlag\n   * @property {number} extensionSize\n   * @property {number} extensionCode\n   * @property {nifti.NIFTIEXTENSION[]} extensions\n   * @type {Function}\n   */\nclass NIFTI1 {\n  littleEndian = false;\n  dim_info = 0;\n  dims = [];\n  intent_p1 = 0.0;\n  intent_p2 = 0.0;\n  intent_p3 = 0.0;\n  intent_code = 0;\n  datatypeCode = 0;\n  numBitsPerVoxel = 0;\n  slice_start = 0;\n  slice_end = 0;\n  slice_code = 0;\n  pixDims = [];\n  vox_offset = 0;\n  scl_slope = 1.0;\n  scl_inter = 0.0;\n  xyzt_units = 0;\n  cal_max = 0.0;\n  cal_min = 0.0;\n  slice_duration = 0.0;\n  toffset = 0.0;\n  description = \"\";\n  aux_file = \"\";\n  intent_name = \"\";\n  qform_code = 0;\n  sform_code = 0;\n  quatern_a = 0.0;\n  quatern_b = 0.0;\n  quatern_c = 0.0;\n  quatern_d = 0.0;\n  qoffset_x = 0.0;\n  qoffset_y = 0.0;\n  qoffset_z = 0.0;\n  affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n  qfac = 1;\n  quatern_R;\n  magic = \"0\";\n  isHDR = false;\n  extensionFlag = [0, 0, 0, 0];\n  extensionSize = 0;\n  extensionCode = 0;\n  extensions = [];\n  /*** Static Pseudo-constants ***/\n  // datatype codes\n  static TYPE_NONE = 0;\n  static TYPE_BINARY = 1;\n  static TYPE_UINT8 = 2;\n  static TYPE_INT16 = 4;\n  static TYPE_INT32 = 8;\n  static TYPE_FLOAT32 = 16;\n  static TYPE_COMPLEX64 = 32;\n  static TYPE_FLOAT64 = 64;\n  static TYPE_RGB24 = 128;\n  static TYPE_INT8 = 256;\n  static TYPE_UINT16 = 512;\n  static TYPE_UINT32 = 768;\n  static TYPE_INT64 = 1024;\n  static TYPE_UINT64 = 1280;\n  static TYPE_FLOAT128 = 1536;\n  static TYPE_COMPLEX128 = 1792;\n  static TYPE_COMPLEX256 = 2048;\n  // transform codes\n  static XFORM_UNKNOWN = 0;\n  static XFORM_SCANNER_ANAT = 1;\n  static XFORM_ALIGNED_ANAT = 2;\n  static XFORM_TALAIRACH = 3;\n  static XFORM_MNI_152 = 4;\n  // unit codes\n  static SPATIAL_UNITS_MASK = 0x07;\n  static TEMPORAL_UNITS_MASK = 0x38;\n  static UNITS_UNKNOWN = 0;\n  static UNITS_METER = 1;\n  static UNITS_MM = 2;\n  static UNITS_MICRON = 3;\n  static UNITS_SEC = 8;\n  static UNITS_MSEC = 16;\n  static UNITS_USEC = 24;\n  static UNITS_HZ = 32;\n  static UNITS_PPM = 40;\n  static UNITS_RADS = 48;\n  // nifti1 codes\n  static MAGIC_COOKIE = 348;\n  static STANDARD_HEADER_SIZE = 348;\n  static MAGIC_NUMBER_LOCATION = 344;\n  static MAGIC_NUMBER = [0x6e, 0x2b, 0x31]; // n+1 (.nii)\n  static MAGIC_NUMBER2 = [0x6e, 0x69, 0x31]; // ni1 (.hdr/.img)\n  static EXTENSION_HEADER_SIZE = 8;\n  /*** Prototype Methods ***/\n  /**\n   * Reads the header data.\n   * @param {ArrayBuffer} data\n   */\n  readHeader(data) {\n    var rawData = new DataView(data),\n      magicCookieVal = utilities_1.Utils.getIntAt(rawData, 0, this.littleEndian),\n      ctr,\n      ctrOut,\n      ctrIn,\n      index;\n    if (magicCookieVal !== NIFTI1.MAGIC_COOKIE) {\n      // try as little endian\n      this.littleEndian = true;\n      magicCookieVal = utilities_1.Utils.getIntAt(rawData, 0, this.littleEndian);\n    }\n    if (magicCookieVal !== NIFTI1.MAGIC_COOKIE) {\n      throw new Error(\"This does not appear to be a NIFTI file!\");\n    }\n    this.dim_info = utilities_1.Utils.getByteAt(rawData, 39);\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      index = 40 + ctr * 2;\n      this.dims[ctr] = utilities_1.Utils.getShortAt(rawData, index, this.littleEndian);\n    }\n    this.intent_p1 = utilities_1.Utils.getFloatAt(rawData, 56, this.littleEndian);\n    this.intent_p2 = utilities_1.Utils.getFloatAt(rawData, 60, this.littleEndian);\n    this.intent_p3 = utilities_1.Utils.getFloatAt(rawData, 64, this.littleEndian);\n    this.intent_code = utilities_1.Utils.getShortAt(rawData, 68, this.littleEndian);\n    this.datatypeCode = utilities_1.Utils.getShortAt(rawData, 70, this.littleEndian);\n    this.numBitsPerVoxel = utilities_1.Utils.getShortAt(rawData, 72, this.littleEndian);\n    this.slice_start = utilities_1.Utils.getShortAt(rawData, 74, this.littleEndian);\n    for (ctr = 0; ctr < 8; ctr += 1) {\n      index = 76 + ctr * 4;\n      this.pixDims[ctr] = utilities_1.Utils.getFloatAt(rawData, index, this.littleEndian);\n    }\n    this.vox_offset = utilities_1.Utils.getFloatAt(rawData, 108, this.littleEndian);\n    this.scl_slope = utilities_1.Utils.getFloatAt(rawData, 112, this.littleEndian);\n    this.scl_inter = utilities_1.Utils.getFloatAt(rawData, 116, this.littleEndian);\n    this.slice_end = utilities_1.Utils.getShortAt(rawData, 120, this.littleEndian);\n    this.slice_code = utilities_1.Utils.getByteAt(rawData, 122);\n    this.xyzt_units = utilities_1.Utils.getByteAt(rawData, 123);\n    this.cal_max = utilities_1.Utils.getFloatAt(rawData, 124, this.littleEndian);\n    this.cal_min = utilities_1.Utils.getFloatAt(rawData, 128, this.littleEndian);\n    this.slice_duration = utilities_1.Utils.getFloatAt(rawData, 132, this.littleEndian);\n    this.toffset = utilities_1.Utils.getFloatAt(rawData, 136, this.littleEndian);\n    this.description = utilities_1.Utils.getStringAt(rawData, 148, 228);\n    this.aux_file = utilities_1.Utils.getStringAt(rawData, 228, 252);\n    this.qform_code = utilities_1.Utils.getShortAt(rawData, 252, this.littleEndian);\n    this.sform_code = utilities_1.Utils.getShortAt(rawData, 254, this.littleEndian);\n    this.quatern_b = utilities_1.Utils.getFloatAt(rawData, 256, this.littleEndian);\n    this.quatern_c = utilities_1.Utils.getFloatAt(rawData, 260, this.littleEndian);\n    this.quatern_d = utilities_1.Utils.getFloatAt(rawData, 264, this.littleEndian);\n    // Added by znshje on 27/11/2021\n    //\n    // quatern_a is a parameter in quaternion [a, b, c, d], which is required in affine calculation (METHOD 2)\n    // mentioned in the nifti1.h file\n    // It can be calculated by a = sqrt(1.0-(b*b+c*c+d*d))\n    this.quatern_a = Math.sqrt(1.0 - (Math.pow(this.quatern_b, 2) + Math.pow(this.quatern_c, 2) + Math.pow(this.quatern_d, 2)));\n    this.qoffset_x = utilities_1.Utils.getFloatAt(rawData, 268, this.littleEndian);\n    this.qoffset_y = utilities_1.Utils.getFloatAt(rawData, 272, this.littleEndian);\n    this.qoffset_z = utilities_1.Utils.getFloatAt(rawData, 276, this.littleEndian);\n    // Added by znshje on 27/11/2021\n    //\n    /* See: https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h */\n    if (this.qform_code < 1 && this.sform_code < 1) {\n      // METHOD 0 (used when both SFORM and QFORM are unknown)\n      this.affine[0][0] = this.pixDims[1];\n      this.affine[1][1] = this.pixDims[2];\n      this.affine[2][2] = this.pixDims[3];\n    }\n    if (this.qform_code > 0 && this.sform_code < this.qform_code) {\n      //   METHOD 2 (used when qform_code > 0, which should be the \"normal\" case):\n      //    ---------------------------------------------------------------------\n      //    The (x,y,z) coordinates are given by the pixdim[] scales, a rotation\n      //    matrix, and a shift.  This method is intended to represent\n      //    \"scanner-anatomical\" coordinates, which are often embedded in the\n      //    image header (e.g., DICOM fields (0020,0032), (0020,0037), (0028,0030),\n      //    and (0018,0050)), and represent the nominal orientation and location of\n      //    the data.  This method can also be used to represent \"aligned\"\n      //    coordinates, which would typically result from some post-acquisition\n      //    alignment of the volume to a standard orientation (e.g., the same\n      //    subject on another day, or a rigid rotation to true anatomical\n      //    orientation from the tilted position of the subject in the scanner).\n      //    The formula for (x,y,z) in terms of header parameters and (i,j,k) is:\n      //\n      //      [ x ]   [ R11 R12 R13 ] [        pixdim[1] * i ]   [ qoffset_x ]\n      //      [ y ] = [ R21 R22 R23 ] [        pixdim[2] * j ] + [ qoffset_y ]\n      //      [ z ]   [ R31 R32 R33 ] [ qfac * pixdim[3] * k ]   [ qoffset_z ]\n      //\n      //    The qoffset_* shifts are in the NIFTI-1 header.  Note that the center\n      //    of the (i,j,k)=(0,0,0) voxel (first value in the dataset array) is\n      //    just (x,y,z)=(qoffset_x,qoffset_y,qoffset_z).\n      //\n      //    The rotation matrix R is calculated from the quatern_* parameters.\n      //    This calculation is described below.\n      //\n      //    The scaling factor qfac is either 1 or -1.  The rotation matrix R\n      //    defined by the quaternion parameters is \"proper\" (has determinant 1).\n      //    This may not fit the needs of the data; for example, if the image\n      //    grid is\n      //      i increases from Left-to-Right\n      //      j increases from Anterior-to-Posterior\n      //      k increases from Inferior-to-Superior\n      //    Then (i,j,k) is a left-handed triple.  In this example, if qfac=1,\n      //    the R matrix would have to be\n      //\n      //      [  1   0   0 ]\n      //      [  0  -1   0 ]  which is \"improper\" (determinant = -1).\n      //      [  0   0   1 ]\n      //\n      //    If we set qfac=-1, then the R matrix would be\n      //\n      //      [  1   0   0 ]\n      //      [  0  -1   0 ]  which is proper.\n      //      [  0   0  -1 ]\n      //\n      //    This R matrix is represented by quaternion [a,b,c,d] = [0,1,0,0]\n      //    (which encodes a 180 degree rotation about the x-axis).\n      // Define a, b, c, d for coding covenience\n      const a = this.quatern_a;\n      const b = this.quatern_b;\n      const c = this.quatern_c;\n      const d = this.quatern_d;\n      this.qfac = this.pixDims[0] === 0 ? 1 : this.pixDims[0];\n      this.quatern_R = [[a * a + b * b - c * c - d * d, 2 * b * c - 2 * a * d, 2 * b * d + 2 * a * c], [2 * b * c + 2 * a * d, a * a + c * c - b * b - d * d, 2 * c * d - 2 * a * b], [2 * b * d - 2 * a * c, 2 * c * d + 2 * a * b, a * a + d * d - c * c - b * b]];\n      for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 3; ctrIn += 1) {\n          this.affine[ctrOut][ctrIn] = this.quatern_R[ctrOut][ctrIn] * this.pixDims[ctrIn + 1];\n          if (ctrIn === 2) {\n            this.affine[ctrOut][ctrIn] *= this.qfac;\n          }\n        }\n      }\n      // The last row of affine matrix is the offset vector\n      this.affine[0][3] = this.qoffset_x;\n      this.affine[1][3] = this.qoffset_y;\n      this.affine[2][3] = this.qoffset_z;\n    } else if (this.sform_code > 0) {\n      //    METHOD 3 (used when sform_code > 0):\n      //    -----------------------------------\n      //    The (x,y,z) coordinates are given by a general affine transformation\n      //    of the (i,j,k) indexes:\n      //\n      //      x = srow_x[0] * i + srow_x[1] * j + srow_x[2] * k + srow_x[3]\n      //      y = srow_y[0] * i + srow_y[1] * j + srow_y[2] * k + srow_y[3]\n      //      z = srow_z[0] * i + srow_z[1] * j + srow_z[2] * k + srow_z[3]\n      //\n      //    The srow_* vectors are in the NIFTI_1 header.  Note that no use is\n      //    made of pixdim[] in this method.\n      for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n        for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n          index = 280 + (ctrOut * 4 + ctrIn) * 4;\n          this.affine[ctrOut][ctrIn] = utilities_1.Utils.getFloatAt(rawData, index, this.littleEndian);\n        }\n      }\n    }\n    this.affine[3][0] = 0;\n    this.affine[3][1] = 0;\n    this.affine[3][2] = 0;\n    this.affine[3][3] = 1;\n    this.intent_name = utilities_1.Utils.getStringAt(rawData, 328, 344);\n    this.magic = utilities_1.Utils.getStringAt(rawData, 344, 348);\n    this.isHDR = this.magic === String.fromCharCode.apply(null, NIFTI1.MAGIC_NUMBER2);\n    if (rawData.byteLength > NIFTI1.MAGIC_COOKIE) {\n      this.extensionFlag[0] = utilities_1.Utils.getByteAt(rawData, 348);\n      this.extensionFlag[1] = utilities_1.Utils.getByteAt(rawData, 348 + 1);\n      this.extensionFlag[2] = utilities_1.Utils.getByteAt(rawData, 348 + 2);\n      this.extensionFlag[3] = utilities_1.Utils.getByteAt(rawData, 348 + 3);\n      let isExtensionCapable = true;\n      if (!this.isHDR && this.vox_offset <= 352) isExtensionCapable = false;\n      if (rawData.byteLength <= 352 + 16) isExtensionCapable = false;\n      if (isExtensionCapable && this.extensionFlag[0]) {\n        // read our extensions\n        this.extensions = utilities_1.Utils.getExtensionsAt(rawData, this.getExtensionLocation(), this.littleEndian, this.vox_offset);\n        // set the extensionSize and extensionCode from the first extension found\n        this.extensionSize = this.extensions[0].esize;\n        this.extensionCode = this.extensions[0].ecode;\n      }\n    }\n  }\n  /**\n   * Returns a formatted string of header fields.\n   * @returns {string}\n   */\n  toFormattedString() {\n    var fmt = utilities_1.Utils.formatNumber,\n      string = \"\";\n    string += \"Dim Info = \" + this.dim_info + \"\\n\";\n    string += \"Image Dimensions (1-8): \" + this.dims[0] + \", \" + this.dims[1] + \", \" + this.dims[2] + \", \" + this.dims[3] + \", \" + this.dims[4] + \", \" + this.dims[5] + \", \" + this.dims[6] + \", \" + this.dims[7] + \"\\n\";\n    string += \"Intent Parameters (1-3): \" + this.intent_p1 + \", \" + this.intent_p2 + \", \" + this.intent_p3 + \"\\n\";\n    string += \"Intent Code = \" + this.intent_code + \"\\n\";\n    string += \"Datatype = \" + this.datatypeCode + \" (\" + this.getDatatypeCodeString(this.datatypeCode) + \")\\n\";\n    string += \"Bits Per Voxel = \" + this.numBitsPerVoxel + \"\\n\";\n    string += \"Slice Start = \" + this.slice_start + \"\\n\";\n    string += \"Voxel Dimensions (1-8): \" + fmt(this.pixDims[0]) + \", \" + fmt(this.pixDims[1]) + \", \" + fmt(this.pixDims[2]) + \", \" + fmt(this.pixDims[3]) + \", \" + fmt(this.pixDims[4]) + \", \" + fmt(this.pixDims[5]) + \", \" + fmt(this.pixDims[6]) + \", \" + fmt(this.pixDims[7]) + \"\\n\";\n    string += \"Image Offset = \" + this.vox_offset + \"\\n\";\n    string += \"Data Scale:  Slope = \" + fmt(this.scl_slope) + \"  Intercept = \" + fmt(this.scl_inter) + \"\\n\";\n    string += \"Slice End = \" + this.slice_end + \"\\n\";\n    string += \"Slice Code = \" + this.slice_code + \"\\n\";\n    string += \"Units Code = \" + this.xyzt_units + \" (\" + this.getUnitsCodeString(NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + \", \" + this.getUnitsCodeString(NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + \")\\n\";\n    string += \"Display Range:  Max = \" + fmt(this.cal_max) + \"  Min = \" + fmt(this.cal_min) + \"\\n\";\n    string += \"Slice Duration = \" + this.slice_duration + \"\\n\";\n    string += \"Time Axis Shift = \" + this.toffset + \"\\n\";\n    string += 'Description: \"' + this.description + '\"\\n';\n    string += 'Auxiliary File: \"' + this.aux_file + '\"\\n';\n    string += \"Q-Form Code = \" + this.qform_code + \" (\" + this.getTransformCodeString(this.qform_code) + \")\\n\";\n    string += \"S-Form Code = \" + this.sform_code + \" (\" + this.getTransformCodeString(this.sform_code) + \")\\n\";\n    string += \"Quaternion Parameters:  \" + \"b = \" + fmt(this.quatern_b) + \"  \" + \"c = \" + fmt(this.quatern_c) + \"  \" + \"d = \" + fmt(this.quatern_d) + \"\\n\";\n    string += \"Quaternion Offsets:  \" + \"x = \" + this.qoffset_x + \"  \" + \"y = \" + this.qoffset_y + \"  \" + \"z = \" + this.qoffset_z + \"\\n\";\n    string += \"S-Form Parameters X: \" + fmt(this.affine[0][0]) + \", \" + fmt(this.affine[0][1]) + \", \" + fmt(this.affine[0][2]) + \", \" + fmt(this.affine[0][3]) + \"\\n\";\n    string += \"S-Form Parameters Y: \" + fmt(this.affine[1][0]) + \", \" + fmt(this.affine[1][1]) + \", \" + fmt(this.affine[1][2]) + \", \" + fmt(this.affine[1][3]) + \"\\n\";\n    string += \"S-Form Parameters Z: \" + fmt(this.affine[2][0]) + \", \" + fmt(this.affine[2][1]) + \", \" + fmt(this.affine[2][2]) + \", \" + fmt(this.affine[2][3]) + \"\\n\";\n    string += 'Intent Name: \"' + this.intent_name + '\"\\n';\n    if (this.extensionFlag[0]) {\n      string += \"Extension: Size = \" + this.extensionSize + \"  Code = \" + this.extensionCode + \"\\n\";\n    }\n    return string;\n  }\n  /**\n   * Returns a human-readable string of datatype.\n   * @param {number} code\n   * @returns {string}\n   */\n  getDatatypeCodeString = function (code) {\n    if (code === NIFTI1.TYPE_UINT8) {\n      return \"1-Byte Unsigned Integer\";\n    } else if (code === NIFTI1.TYPE_INT16) {\n      return \"2-Byte Signed Integer\";\n    } else if (code === NIFTI1.TYPE_INT32) {\n      return \"4-Byte Signed Integer\";\n    } else if (code === NIFTI1.TYPE_FLOAT32) {\n      return \"4-Byte Float\";\n    } else if (code === NIFTI1.TYPE_FLOAT64) {\n      return \"8-Byte Float\";\n    } else if (code === NIFTI1.TYPE_RGB24) {\n      return \"RGB\";\n    } else if (code === NIFTI1.TYPE_INT8) {\n      return \"1-Byte Signed Integer\";\n    } else if (code === NIFTI1.TYPE_UINT16) {\n      return \"2-Byte Unsigned Integer\";\n    } else if (code === NIFTI1.TYPE_UINT32) {\n      return \"4-Byte Unsigned Integer\";\n    } else if (code === NIFTI1.TYPE_INT64) {\n      return \"8-Byte Signed Integer\";\n    } else if (code === NIFTI1.TYPE_UINT64) {\n      return \"8-Byte Unsigned Integer\";\n    } else {\n      return \"Unknown\";\n    }\n  };\n  /**\n   * Returns a human-readable string of transform type.\n   * @param {number} code\n   * @returns {string}\n   */\n  getTransformCodeString = function (code) {\n    if (code === NIFTI1.XFORM_SCANNER_ANAT) {\n      return \"Scanner\";\n    } else if (code === NIFTI1.XFORM_ALIGNED_ANAT) {\n      return \"Aligned\";\n    } else if (code === NIFTI1.XFORM_TALAIRACH) {\n      return \"Talairach\";\n    } else if (code === NIFTI1.XFORM_MNI_152) {\n      return \"MNI\";\n    } else {\n      return \"Unknown\";\n    }\n  };\n  /**\n   * Returns a human-readable string of spatial and temporal units.\n   * @param {number} code\n   * @returns {string}\n   */\n  getUnitsCodeString = function (code) {\n    if (code === NIFTI1.UNITS_METER) {\n      return \"Meters\";\n    } else if (code === NIFTI1.UNITS_MM) {\n      return \"Millimeters\";\n    } else if (code === NIFTI1.UNITS_MICRON) {\n      return \"Microns\";\n    } else if (code === NIFTI1.UNITS_SEC) {\n      return \"Seconds\";\n    } else if (code === NIFTI1.UNITS_MSEC) {\n      return \"Milliseconds\";\n    } else if (code === NIFTI1.UNITS_USEC) {\n      return \"Microseconds\";\n    } else if (code === NIFTI1.UNITS_HZ) {\n      return \"Hz\";\n    } else if (code === NIFTI1.UNITS_PPM) {\n      return \"PPM\";\n    } else if (code === NIFTI1.UNITS_RADS) {\n      return \"Rads\";\n    } else {\n      return \"Unknown\";\n    }\n  };\n  /**\n   * Returns the qform matrix.\n   * @returns {Array.<Array.<number>>}\n   */\n  getQformMat() {\n    return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x, this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);\n  }\n  /**\n   * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n   * @param {number} qb\n   * @param {number} qc\n   * @param {number} qd\n   * @param {number} qx\n   * @param {number} qy\n   * @param {number} qz\n   * @param {number} dx\n   * @param {number} dy\n   * @param {number} dz\n   * @param {number} qfac\n   * @returns {Array.<Array.<number>>}\n   */\n  convertNiftiQFormToNiftiSForm(qb, qc, qd, qx, qy, qz, dx, dy, dz, qfac) {\n    var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n      a,\n      b = qb,\n      c = qc,\n      d = qd,\n      xd,\n      yd,\n      zd;\n    // last row is always [ 0 0 0 1 ]\n    R[3][0] = R[3][1] = R[3][2] = 0.0;\n    R[3][3] = 1.0;\n    // compute a parameter from b,c,d\n    a = 1.0 - (b * b + c * c + d * d);\n    if (a < 0.0000001) {\n      /* special case */\n      a = 1.0 / Math.sqrt(b * b + c * c + d * d);\n      b *= a;\n      c *= a;\n      d *= a; /* normalize (b,c,d) vector */\n      a = 0.0; /* a = 0 ==> 180 degree rotation */\n    } else {\n      a = Math.sqrt(a); /* angle = 2*arccos(a) */\n    }\n    // load rotation matrix, including scaling factors for voxel sizes\n    xd = dx > 0.0 ? dx : 1.0; /* make sure are positive */\n    yd = dy > 0.0 ? dy : 1.0;\n    zd = dz > 0.0 ? dz : 1.0;\n    if (qfac < 0.0) {\n      zd = -zd; /* left handedness? */\n    }\n    R[0][0] = (a * a + b * b - c * c - d * d) * xd;\n    R[0][1] = 2.0 * (b * c - a * d) * yd;\n    R[0][2] = 2.0 * (b * d + a * c) * zd;\n    R[1][0] = 2.0 * (b * c + a * d) * xd;\n    R[1][1] = (a * a + c * c - b * b - d * d) * yd;\n    R[1][2] = 2.0 * (c * d - a * b) * zd;\n    R[2][0] = 2.0 * (b * d - a * c) * xd;\n    R[2][1] = 2.0 * (c * d + a * b) * yd;\n    R[2][2] = (a * a + d * d - c * c - b * b) * zd;\n    // load offsets\n    R[0][3] = qx;\n    R[1][3] = qy;\n    R[2][3] = qz;\n    return R;\n  }\n  /**\n   * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n   * @param {Array.<Array.<number>>} R\n   * @returns {string}\n   */\n  convertNiftiSFormToNEMA(R) {\n    var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest, M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;\n    k = 0;\n    Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n    //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */\n    //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */\n    /* load column vectors for each (i,j,k) direction from matrix */\n    /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/\n    xi = R[0][0];\n    xj = R[0][1];\n    xk = R[0][2];\n    yi = R[1][0];\n    yj = R[1][1];\n    yk = R[1][2];\n    zi = R[2][0];\n    zj = R[2][1];\n    zk = R[2][2];\n    /* normalize column vectors to get unit vectors along each ijk-axis */\n    /* normalize i axis */\n    val = Math.sqrt(xi * xi + yi * yi + zi * zi);\n    if (val === 0.0) {\n      /* stupid input */\n      return null;\n    }\n    xi /= val;\n    yi /= val;\n    zi /= val;\n    /* normalize j axis */\n    val = Math.sqrt(xj * xj + yj * yj + zj * zj);\n    if (val === 0.0) {\n      /* stupid input */\n      return null;\n    }\n    xj /= val;\n    yj /= val;\n    zj /= val;\n    /* orthogonalize j axis to i axis, if needed */\n    val = xi * xj + yi * yj + zi * zj; /* dot product between i and j */\n    if (Math.abs(val) > 1e-4) {\n      xj -= val * xi;\n      yj -= val * yi;\n      zj -= val * zi;\n      val = Math.sqrt(xj * xj + yj * yj + zj * zj); /* must renormalize */\n      if (val === 0.0) {\n        /* j was parallel to i? */\n        return null;\n      }\n      xj /= val;\n      yj /= val;\n      zj /= val;\n    }\n    /* normalize k axis; if it is zero, make it the cross product i x j */\n    val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n    if (val === 0.0) {\n      xk = yi * zj - zi * yj;\n      yk = zi * xj - zj * xi;\n      zk = xi * yj - yi * xj;\n    } else {\n      xk /= val;\n      yk /= val;\n      zk /= val;\n    }\n    /* orthogonalize k to i */\n    val = xi * xk + yi * yk + zi * zk; /* dot product between i and k */\n    if (Math.abs(val) > 1e-4) {\n      xk -= val * xi;\n      yk -= val * yi;\n      zk -= val * zi;\n      val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n      if (val === 0.0) {\n        /* bad */\n        return null;\n      }\n      xk /= val;\n      yk /= val;\n      zk /= val;\n    }\n    /* orthogonalize k to j */\n    val = xj * xk + yj * yk + zj * zk; /* dot product between j and k */\n    if (Math.abs(val) > 1e-4) {\n      xk -= val * xj;\n      yk -= val * yj;\n      zk -= val * zj;\n      val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n      if (val === 0.0) {\n        /* bad */\n        return null;\n      }\n      xk /= val;\n      yk /= val;\n      zk /= val;\n    }\n    Q[0][0] = xi;\n    Q[0][1] = xj;\n    Q[0][2] = xk;\n    Q[1][0] = yi;\n    Q[1][1] = yj;\n    Q[1][2] = yk;\n    Q[2][0] = zi;\n    Q[2][1] = zj;\n    Q[2][2] = zk;\n    /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */\n    detQ = this.nifti_mat33_determ(Q);\n    if (detQ === 0.0) {\n      /* shouldn't happen unless user is a DUFIS */\n      return null;\n    }\n    /* Build and test all possible +1/-1 coordinate permutation matrices P;\n    then find the P such that the rotation matrix M=PQ is closest to the\n    identity, in the sense of M having the smallest total rotation angle. */\n    /* Despite the formidable looking 6 nested loops, there are\n    only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */\n    vbest = -666.0;\n    ibest = pbest = qbest = rbest = 1;\n    jbest = 2;\n    kbest = 3;\n    for (i = 1; i <= 3; i += 1) {\n      /* i = column number to use for row #1 */\n      for (j = 1; j <= 3; j += 1) {\n        /* j = column number to use for row #2 */\n        if (i !== j) {\n          for (k = 1; k <= 3; k += 1) {\n            /* k = column number to use for row #3 */\n            if (!(i === k || j === k)) {\n              P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;\n              for (p = -1; p <= 1; p += 2) {\n                /* p,q,r are -1 or +1      */\n                for (q = -1; q <= 1; q += 2) {\n                  /* and go into rows #1,2,3 */\n                  for (r = -1; r <= 1; r += 2) {\n                    P[0][i - 1] = p;\n                    P[1][j - 1] = q;\n                    P[2][k - 1] = r;\n                    detP = this.nifti_mat33_determ(P); /* sign of permutation */\n                    if (detP * detQ > 0.0) {\n                      M = this.nifti_mat33_mul(P, Q);\n                      /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */\n                      /* we want largest trace(M) == smallest angle == M nearest to I */\n                      val = M[0][0] + M[1][1] + M[2][2]; /* trace */\n                      if (val > vbest) {\n                        vbest = val;\n                        ibest = i;\n                        jbest = j;\n                        kbest = k;\n                        pbest = p;\n                        qbest = q;\n                        rbest = r;\n                      }\n                    } /* doesn't match sign of Q */\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.\n      The matrix P that corresponds is the best permutation approximation\n    to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates\n    to the (i,j,k) axes.\n      For example, the first row of P (which contains pbest in column ibest)\n    determines the way the i axis points relative to the anatomical\n    (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,\n    which is direction P2A (if pbest > 0) or A2P (if pbest < 0).\n      So, using ibest and pbest, we can assign the output code for\n    the i axis.  Mutatis mutandis for the j and k axes, of course. */\n    iChar = jChar = kChar = iSense = jSense = kSense = \"\";\n    switch (ibest * pbest) {\n      case 1 /*i = NIFTI_L2R*/:\n        iChar = \"X\";\n        iSense = \"+\";\n        break;\n      case -1 /*i = NIFTI_R2L*/:\n        iChar = \"X\";\n        iSense = \"-\";\n        break;\n      case 2 /*i = NIFTI_P2A*/:\n        iChar = \"Y\";\n        iSense = \"+\";\n        break;\n      case -2 /*i = NIFTI_A2P*/:\n        iChar = \"Y\";\n        iSense = \"-\";\n        break;\n      case 3 /*i = NIFTI_I2S*/:\n        iChar = \"Z\";\n        iSense = \"+\";\n        break;\n      case -3 /*i = NIFTI_S2I*/:\n        iChar = \"Z\";\n        iSense = \"-\";\n        break;\n    }\n    switch (jbest * qbest) {\n      case 1 /*j = NIFTI_L2R*/:\n        jChar = \"X\";\n        jSense = \"+\";\n        break;\n      case -1 /*j = NIFTI_R2L*/:\n        jChar = \"X\";\n        jSense = \"-\";\n        break;\n      case 2 /*j = NIFTI_P2A*/:\n        jChar = \"Y\";\n        jSense = \"+\";\n        break;\n      case -2 /*j = NIFTI_A2P*/:\n        jChar = \"Y\";\n        jSense = \"-\";\n        break;\n      case 3 /*j = NIFTI_I2S*/:\n        jChar = \"Z\";\n        jSense = \"+\";\n        break;\n      case -3 /*j = NIFTI_S2I*/:\n        jChar = \"Z\";\n        jSense = \"-\";\n        break;\n    }\n    switch (kbest * rbest) {\n      case 1 /*k = NIFTI_L2R*/:\n        kChar = \"X\";\n        kSense = \"+\";\n        break;\n      case -1 /*k = NIFTI_R2L*/:\n        kChar = \"X\";\n        kSense = \"-\";\n        break;\n      case 2 /*k = NIFTI_P2A*/:\n        kChar = \"Y\";\n        kSense = \"+\";\n        break;\n      case -2 /*k = NIFTI_A2P*/:\n        kChar = \"Y\";\n        kSense = \"-\";\n        break;\n      case 3 /*k = NIFTI_I2S*/:\n        kChar = \"Z\";\n        kSense = \"+\";\n        break;\n      case -3 /*k = NIFTI_S2I*/:\n        kChar = \"Z\";\n        kSense = \"-\";\n        break;\n    }\n    return iChar + jChar + kChar + iSense + jSense + kSense;\n  }\n  nifti_mat33_mul = function (A, B) {\n    var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n      i,\n      j;\n    for (i = 0; i < 3; i += 1) {\n      for (j = 0; j < 3; j += 1) {\n        C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + A[i][2] * B[2][j];\n      }\n    }\n    return C;\n  };\n  nifti_mat33_determ = function (R) {\n    var r11, r12, r13, r21, r22, r23, r31, r32, r33;\n    /*  INPUT MATRIX:  */\n    r11 = R[0][0];\n    r12 = R[0][1];\n    r13 = R[0][2];\n    r21 = R[1][0];\n    r22 = R[1][1];\n    r23 = R[1][2];\n    r31 = R[2][0];\n    r32 = R[2][1];\n    r33 = R[2][2];\n    return r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13;\n  };\n  /**\n   * Returns the byte index of the extension.\n   * @returns {number}\n   */\n  getExtensionLocation() {\n    return NIFTI1.MAGIC_COOKIE + 4;\n  }\n  /**\n   * Returns the extension size.\n   * @param {DataView} data\n   * @returns {number}\n   */\n  getExtensionSize(data) {\n    return utilities_1.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);\n  }\n  /**\n   * Returns the extension code.\n   * @param {DataView} data\n   * @returns {number}\n   */\n  getExtensionCode(data) {\n    return utilities_1.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);\n  }\n  /**\n   * Adds an extension\n   * @param {NIFTIEXTENSION} extension\n   * @param {number} index\n   */\n  addExtension(extension, index = -1) {\n    if (index == -1) {\n      this.extensions.push(extension);\n    } else {\n      this.extensions.splice(index, 0, extension);\n    }\n    this.vox_offset += extension.esize;\n  }\n  /**\n   * Removes an extension\n   * @param {number} index\n   */\n  removeExtension(index) {\n    let extension = this.extensions[index];\n    if (extension) {\n      this.vox_offset -= extension.esize;\n    }\n    this.extensions.splice(index, 1);\n  }\n  /**\n   * Returns header as ArrayBuffer.\n   * @param {boolean} includeExtensions - should extension bytes be included\n   * @returns {ArrayBuffer}\n   */\n  toArrayBuffer(includeExtensions = false) {\n    const SHORT_SIZE = 2;\n    const FLOAT32_SIZE = 4;\n    let byteSize = 348 + 4; // + 4 for the extension bytes\n    // calculate necessary size\n    if (includeExtensions) {\n      for (let extension of this.extensions) {\n        byteSize += extension.esize;\n      }\n    }\n    let byteArray = new Uint8Array(byteSize);\n    let view = new DataView(byteArray.buffer);\n    // sizeof_hdr\n    view.setInt32(0, 348, this.littleEndian);\n    // data_type, db_name, extents, session_error, regular are not used\n    // dim_info\n    view.setUint8(39, this.dim_info);\n    // dims\n    for (let i = 0; i < 8; i++) {\n      view.setUint16(40 + SHORT_SIZE * i, this.dims[i], this.littleEndian);\n    }\n    // intent_p1, intent_p2, intent_p3\n    view.setFloat32(56, this.intent_p1, this.littleEndian);\n    view.setFloat32(60, this.intent_p2, this.littleEndian);\n    view.setFloat32(64, this.intent_p3, this.littleEndian);\n    // intent_code, datatype, bitpix, slice_start\n    view.setInt16(68, this.intent_code, this.littleEndian);\n    view.setInt16(70, this.datatypeCode, this.littleEndian);\n    view.setInt16(72, this.numBitsPerVoxel, this.littleEndian);\n    view.setInt16(74, this.slice_start, this.littleEndian);\n    // pixdim[8], vox_offset, scl_slope, scl_inter\n    for (let i = 0; i < 8; i++) {\n      view.setFloat32(76 + FLOAT32_SIZE * i, this.pixDims[i], this.littleEndian);\n    }\n    view.setFloat32(108, this.vox_offset, this.littleEndian);\n    view.setFloat32(112, this.scl_slope, this.littleEndian);\n    view.setFloat32(116, this.scl_inter, this.littleEndian);\n    // slice_end\n    view.setInt16(120, this.slice_end, this.littleEndian);\n    // slice_code, xyzt_units\n    view.setUint8(122, this.slice_code);\n    view.setUint8(123, this.xyzt_units);\n    // cal_max, cal_min, slice_duration, toffset\n    view.setFloat32(124, this.cal_max, this.littleEndian);\n    view.setFloat32(128, this.cal_min, this.littleEndian);\n    view.setFloat32(132, this.slice_duration, this.littleEndian);\n    view.setFloat32(136, this.toffset, this.littleEndian);\n    // glmax, glmin are unused\n    // descrip and aux_file\n    byteArray.set(Buffer.from(this.description), 148);\n    byteArray.set(Buffer.from(this.aux_file), 228);\n    // qform_code, sform_code\n    view.setInt16(252, this.qform_code, this.littleEndian);\n    view.setInt16(254, this.sform_code, this.littleEndian);\n    // quatern_b, quatern_c, quatern_d, qoffset_x, qoffset_y, qoffset_z, srow_x[4], srow_y[4], and srow_z[4]\n    view.setFloat32(256, this.quatern_b, this.littleEndian);\n    view.setFloat32(260, this.quatern_c, this.littleEndian);\n    view.setFloat32(264, this.quatern_d, this.littleEndian);\n    view.setFloat32(268, this.qoffset_x, this.littleEndian);\n    view.setFloat32(272, this.qoffset_y, this.littleEndian);\n    view.setFloat32(276, this.qoffset_z, this.littleEndian);\n    const flattened = this.affine.flat();\n    // we only want the first three rows\n    for (let i = 0; i < 12; i++) {\n      view.setFloat32(280 + FLOAT32_SIZE * i, flattened[i], this.littleEndian);\n    }\n    // intent_name and magic\n    byteArray.set(Buffer.from(this.intent_name), 328);\n    byteArray.set(Buffer.from(this.magic), 344);\n    // add our extension data\n    if (includeExtensions) {\n      byteArray.set(Uint8Array.from([1, 0, 0, 0]), 348);\n      let extensionByteIndex = this.getExtensionLocation();\n      for (const extension of this.extensions) {\n        view.setInt32(extensionByteIndex, extension.esize, extension.littleEndian);\n        view.setInt32(extensionByteIndex + 4, extension.ecode, extension.littleEndian);\n        byteArray.set(new Uint8Array(extension.edata), extensionByteIndex + 8);\n        extensionByteIndex += extension.esize;\n      }\n    } else {\n      // In a .nii file, these 4 bytes will always be present\n      byteArray.set(new Uint8Array(4).fill(0), 348);\n    }\n    return byteArray.buffer;\n  }\n}\nexports.NIFTI1 = NIFTI1;","map":{"version":3,"names":["utilities_1","require","NIFTI1","littleEndian","dim_info","dims","intent_p1","intent_p2","intent_p3","intent_code","datatypeCode","numBitsPerVoxel","slice_start","slice_end","slice_code","pixDims","vox_offset","scl_slope","scl_inter","xyzt_units","cal_max","cal_min","slice_duration","toffset","description","aux_file","intent_name","qform_code","sform_code","quatern_a","quatern_b","quatern_c","quatern_d","qoffset_x","qoffset_y","qoffset_z","affine","qfac","quatern_R","magic","isHDR","extensionFlag","extensionSize","extensionCode","extensions","TYPE_NONE","TYPE_BINARY","TYPE_UINT8","TYPE_INT16","TYPE_INT32","TYPE_FLOAT32","TYPE_COMPLEX64","TYPE_FLOAT64","TYPE_RGB24","TYPE_INT8","TYPE_UINT16","TYPE_UINT32","TYPE_INT64","TYPE_UINT64","TYPE_FLOAT128","TYPE_COMPLEX128","TYPE_COMPLEX256","XFORM_UNKNOWN","XFORM_SCANNER_ANAT","XFORM_ALIGNED_ANAT","XFORM_TALAIRACH","XFORM_MNI_152","SPATIAL_UNITS_MASK","TEMPORAL_UNITS_MASK","UNITS_UNKNOWN","UNITS_METER","UNITS_MM","UNITS_MICRON","UNITS_SEC","UNITS_MSEC","UNITS_USEC","UNITS_HZ","UNITS_PPM","UNITS_RADS","MAGIC_COOKIE","STANDARD_HEADER_SIZE","MAGIC_NUMBER_LOCATION","MAGIC_NUMBER","MAGIC_NUMBER2","EXTENSION_HEADER_SIZE","readHeader","data","rawData","DataView","magicCookieVal","Utils","getIntAt","ctr","ctrOut","ctrIn","index","Error","getByteAt","getShortAt","getFloatAt","getStringAt","Math","sqrt","pow","a","b","c","d","String","fromCharCode","apply","byteLength","isExtensionCapable","getExtensionsAt","getExtensionLocation","esize","ecode","toFormattedString","fmt","formatNumber","string","getDatatypeCodeString","getUnitsCodeString","getTransformCodeString","code","getQformMat","convertNiftiQFormToNiftiSForm","qb","qc","qd","qx","qy","qz","dx","dy","dz","R","xd","yd","zd","convertNiftiSFormToNEMA","xi","xj","xk","yi","yj","yk","zi","zj","zk","val","detQ","detP","i","j","k","p","q","r","ibest","jbest","kbest","pbest","qbest","rbest","M","vbest","Q","P","iChar","jChar","kChar","iSense","jSense","kSense","abs","nifti_mat33_determ","nifti_mat33_mul","A","B","C","r11","r12","r13","r21","r22","r23","r31","r32","r33","getExtensionSize","getExtensionCode","addExtension","extension","push","splice","removeExtension","toArrayBuffer","includeExtensions","SHORT_SIZE","FLOAT32_SIZE","byteSize","byteArray","Uint8Array","view","buffer","setInt32","setUint8","setUint16","setFloat32","setInt16","set","Buffer","from","flattened","flat","extensionByteIndex","edata","fill","exports"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/node_modules/nifti-reader-js/src/nifti1.ts"],"sourcesContent":["import { NIFTIEXTENSION } from \"./nifti-extension\";\nimport { Utils } from \"./utilities\";\n\n/*** Constructor ***/\n/**\n   * The NIFTI1 constructor.\n   * @constructor\n   * @property {boolean} littleEndian\n   * @property {number} dim_info\n   * @property {number[]} dims - image dimensions\n   * @property {number} intent_p1\n   * @property {number} intent_p2\n   * @property {number} intent_p3\n   * @property {number} intent_code\n   * @property {number} datatypeCode\n   * @property {number} numBitsPerVoxel\n   * @property {number} slice_start\n   * @property {number} slice_end\n   * @property {number} slice_code\n   * @property {number[]} pixDims - voxel dimensions\n   * @property {number} vox_offset\n   * @property {number} scl_slope\n   * @property {number} scl_inter\n   * @property {number} xyzt_units\n   * @property {number} cal_max\n   * @property {number} cal_min\n   * @property {number} slice_duration\n   * @property {number} toffset\n   * @property {string} description\n   * @property {string} aux_file\n   * @property {string} intent_name\n   * @property {number} qform_code\n   * @property {number} sform_code\n   * @property {number} quatern_b\n   * @property {number} quatern_c\n   * @property {number} quatern_d\n   * @property {number} quatern_x\n   * @property {number} quatern_y\n   * @property {number} quatern_z\n   * @property {Array.<Array.<number>>} affine\n   * @property {string} magic\n   * @property {boolean} isHDR - if hdr/img format\n   * @property {number[]} extensionFlag\n   * @property {number} extensionSize\n   * @property {number} extensionCode\n   * @property {nifti.NIFTIEXTENSION[]} extensions\n   * @type {Function}\n   */\n  export class NIFTI1 {\n    littleEndian = false;\n    dim_info = 0;\n    dims: number[] = [];\n    intent_p1 = 0.0;\n    intent_p2 = 0.0;\n    intent_p3 = 0.0;\n    intent_code = 0;\n    datatypeCode = 0;\n    numBitsPerVoxel = 0;\n    slice_start = 0;\n    slice_end = 0;\n    slice_code = 0;\n    pixDims: number[] = [];\n    vox_offset = 0;\n    scl_slope = 1.0;\n    scl_inter = 0.0;\n    xyzt_units = 0;\n    cal_max = 0.0;\n    cal_min = 0.0;\n    slice_duration = 0.0;\n    toffset = 0.0;\n    description = \"\";\n    aux_file = \"\";\n    intent_name = \"\";\n    qform_code = 0;\n    sform_code = 0;\n    quatern_a = 0.0;\n    quatern_b = 0.0;\n    quatern_c = 0.0;\n    quatern_d = 0.0;\n    qoffset_x = 0.0;\n    qoffset_y = 0.0;\n    qoffset_z = 0.0;\n    affine = [\n      [1, 0, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 1, 0],\n      [0, 0, 0, 1],\n    ];\n    qfac = 1;\n    quatern_R: number[][] | undefined;\n    magic = \"0\";\n    isHDR = false;\n    extensionFlag = [0, 0, 0, 0];\n    extensionSize = 0;\n    extensionCode = 0;\n    extensions: NIFTIEXTENSION[] = [];\n\n    /*** Static Pseudo-constants ***/\n\n    // datatype codes\n    public static readonly TYPE_NONE = 0;\n    public static readonly TYPE_BINARY = 1;\n    public static readonly TYPE_UINT8 = 2;\n    public static readonly TYPE_INT16 = 4;\n    public static readonly TYPE_INT32 = 8;\n    public static readonly TYPE_FLOAT32 = 16;\n    public static readonly TYPE_COMPLEX64 = 32;\n    public static readonly TYPE_FLOAT64 = 64;\n    public static readonly TYPE_RGB24 = 128;\n    public static readonly TYPE_INT8 = 256;\n    public static readonly TYPE_UINT16 = 512;\n    public static readonly TYPE_UINT32 = 768;\n    public static readonly TYPE_INT64 = 1024;\n    public static readonly TYPE_UINT64 = 1280;\n    public static readonly TYPE_FLOAT128 = 1536;\n    public static readonly TYPE_COMPLEX128 = 1792;\n    public static readonly TYPE_COMPLEX256 = 2048;\n\n    // transform codes\n    public static readonly XFORM_UNKNOWN = 0;\n    public static readonly XFORM_SCANNER_ANAT = 1;\n    public static readonly XFORM_ALIGNED_ANAT = 2;\n    public static readonly XFORM_TALAIRACH = 3;\n    public static readonly XFORM_MNI_152 = 4;\n\n    // unit codes\n    public static readonly SPATIAL_UNITS_MASK = 0x07;\n    public static readonly TEMPORAL_UNITS_MASK = 0x38;\n    public static readonly UNITS_UNKNOWN = 0;\n    public static readonly UNITS_METER = 1;\n    public static readonly UNITS_MM = 2;\n    public static readonly UNITS_MICRON = 3;\n    public static readonly UNITS_SEC = 8;\n    public static readonly UNITS_MSEC = 16;\n    public static readonly UNITS_USEC = 24;\n    public static readonly UNITS_HZ = 32;\n    public static readonly UNITS_PPM = 40;\n    public static readonly UNITS_RADS = 48;\n\n    // nifti1 codes\n    public static readonly MAGIC_COOKIE = 348;\n    public static readonly STANDARD_HEADER_SIZE = 348;\n    public static readonly MAGIC_NUMBER_LOCATION = 344;\n    public static readonly MAGIC_NUMBER = [0x6e, 0x2b, 0x31]; // n+1 (.nii)\n    public static readonly MAGIC_NUMBER2 = [0x6e, 0x69, 0x31]; // ni1 (.hdr/.img)\n    public static readonly EXTENSION_HEADER_SIZE = 8;\n\n    /*** Prototype Methods ***/\n\n    /**\n     * Reads the header data.\n     * @param {ArrayBuffer} data\n     */\n    readHeader(data: ArrayBuffer) {\n      var rawData = new DataView(data),\n        magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian),\n        ctr,\n        ctrOut,\n        ctrIn,\n        index;\n\n      if (magicCookieVal !== NIFTI1.MAGIC_COOKIE) {\n        // try as little endian\n        this.littleEndian = true;\n        magicCookieVal = Utils.getIntAt(rawData, 0, this.littleEndian);\n      }\n\n      if (magicCookieVal !== NIFTI1.MAGIC_COOKIE) {\n        throw new Error(\"This does not appear to be a NIFTI file!\");\n      }\n\n      this.dim_info = Utils.getByteAt(rawData, 39);\n\n      for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 40 + ctr * 2;\n        this.dims[ctr] = Utils.getShortAt(\n          rawData,\n          index,\n          this.littleEndian\n        );\n      }\n\n      this.intent_p1 = Utils.getFloatAt(rawData, 56, this.littleEndian);\n      this.intent_p2 = Utils.getFloatAt(rawData, 60, this.littleEndian);\n      this.intent_p3 = Utils.getFloatAt(rawData, 64, this.littleEndian);\n      this.intent_code = Utils.getShortAt(rawData, 68, this.littleEndian);\n\n      this.datatypeCode = Utils.getShortAt(\n        rawData,\n        70,\n        this.littleEndian\n      );\n      this.numBitsPerVoxel = Utils.getShortAt(\n        rawData,\n        72,\n        this.littleEndian\n      );\n\n      this.slice_start = Utils.getShortAt(rawData, 74, this.littleEndian);\n\n      for (ctr = 0; ctr < 8; ctr += 1) {\n        index = 76 + ctr * 4;\n        this.pixDims[ctr] = Utils.getFloatAt(\n          rawData,\n          index,\n          this.littleEndian\n        );\n      }\n\n      this.vox_offset = Utils.getFloatAt(rawData, 108, this.littleEndian);\n\n      this.scl_slope = Utils.getFloatAt(rawData, 112, this.littleEndian);\n      this.scl_inter = Utils.getFloatAt(rawData, 116, this.littleEndian);\n\n      this.slice_end = Utils.getShortAt(rawData, 120, this.littleEndian);\n      this.slice_code = Utils.getByteAt(rawData, 122);\n\n      this.xyzt_units = Utils.getByteAt(rawData, 123);\n\n      this.cal_max = Utils.getFloatAt(rawData, 124, this.littleEndian);\n      this.cal_min = Utils.getFloatAt(rawData, 128, this.littleEndian);\n\n      this.slice_duration = Utils.getFloatAt(\n        rawData,\n        132,\n        this.littleEndian\n      );\n      this.toffset = Utils.getFloatAt(rawData, 136, this.littleEndian);\n\n      this.description = Utils.getStringAt(rawData, 148, 228);\n      this.aux_file = Utils.getStringAt(rawData, 228, 252);\n\n      this.qform_code = Utils.getShortAt(rawData, 252, this.littleEndian);\n      this.sform_code = Utils.getShortAt(rawData, 254, this.littleEndian);\n\n      this.quatern_b = Utils.getFloatAt(rawData, 256, this.littleEndian);\n      this.quatern_c = Utils.getFloatAt(rawData, 260, this.littleEndian);\n      this.quatern_d = Utils.getFloatAt(rawData, 264, this.littleEndian);\n      // Added by znshje on 27/11/2021\n      //\n      // quatern_a is a parameter in quaternion [a, b, c, d], which is required in affine calculation (METHOD 2)\n      // mentioned in the nifti1.h file\n      // It can be calculated by a = sqrt(1.0-(b*b+c*c+d*d))\n      this.quatern_a = Math.sqrt(\n        1.0 -\n          (Math.pow(this.quatern_b, 2) +\n            Math.pow(this.quatern_c, 2) +\n            Math.pow(this.quatern_d, 2))\n      );\n\n      this.qoffset_x = Utils.getFloatAt(rawData, 268, this.littleEndian);\n      this.qoffset_y = Utils.getFloatAt(rawData, 272, this.littleEndian);\n      this.qoffset_z = Utils.getFloatAt(rawData, 276, this.littleEndian);\n\n      // Added by znshje on 27/11/2021\n      //\n      /* See: https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h */\n      if ((this.qform_code < 1) && (this.sform_code < 1)) {\n        // METHOD 0 (used when both SFORM and QFORM are unknown)\n        this.affine[0][0] = this.pixDims[1];\n        this.affine[1][1] = this.pixDims[2];\n        this.affine[2][2] = this.pixDims[3];\n      }\n      if ((this.qform_code > 0) && (this.sform_code < this.qform_code)) {\n        //   METHOD 2 (used when qform_code > 0, which should be the \"normal\" case):\n        //    ---------------------------------------------------------------------\n        //    The (x,y,z) coordinates are given by the pixdim[] scales, a rotation\n        //    matrix, and a shift.  This method is intended to represent\n        //    \"scanner-anatomical\" coordinates, which are often embedded in the\n        //    image header (e.g., DICOM fields (0020,0032), (0020,0037), (0028,0030),\n        //    and (0018,0050)), and represent the nominal orientation and location of\n        //    the data.  This method can also be used to represent \"aligned\"\n        //    coordinates, which would typically result from some post-acquisition\n        //    alignment of the volume to a standard orientation (e.g., the same\n        //    subject on another day, or a rigid rotation to true anatomical\n        //    orientation from the tilted position of the subject in the scanner).\n        //    The formula for (x,y,z) in terms of header parameters and (i,j,k) is:\n        //\n        //      [ x ]   [ R11 R12 R13 ] [        pixdim[1] * i ]   [ qoffset_x ]\n        //      [ y ] = [ R21 R22 R23 ] [        pixdim[2] * j ] + [ qoffset_y ]\n        //      [ z ]   [ R31 R32 R33 ] [ qfac * pixdim[3] * k ]   [ qoffset_z ]\n        //\n        //    The qoffset_* shifts are in the NIFTI-1 header.  Note that the center\n        //    of the (i,j,k)=(0,0,0) voxel (first value in the dataset array) is\n        //    just (x,y,z)=(qoffset_x,qoffset_y,qoffset_z).\n        //\n        //    The rotation matrix R is calculated from the quatern_* parameters.\n        //    This calculation is described below.\n        //\n        //    The scaling factor qfac is either 1 or -1.  The rotation matrix R\n        //    defined by the quaternion parameters is \"proper\" (has determinant 1).\n        //    This may not fit the needs of the data; for example, if the image\n        //    grid is\n        //      i increases from Left-to-Right\n        //      j increases from Anterior-to-Posterior\n        //      k increases from Inferior-to-Superior\n        //    Then (i,j,k) is a left-handed triple.  In this example, if qfac=1,\n        //    the R matrix would have to be\n        //\n        //      [  1   0   0 ]\n        //      [  0  -1   0 ]  which is \"improper\" (determinant = -1).\n        //      [  0   0   1 ]\n        //\n        //    If we set qfac=-1, then the R matrix would be\n        //\n        //      [  1   0   0 ]\n        //      [  0  -1   0 ]  which is proper.\n        //      [  0   0  -1 ]\n        //\n        //    This R matrix is represented by quaternion [a,b,c,d] = [0,1,0,0]\n        //    (which encodes a 180 degree rotation about the x-axis).\n\n        // Define a, b, c, d for coding covenience\n        const a = this.quatern_a;\n        const b = this.quatern_b;\n        const c = this.quatern_c;\n        const d = this.quatern_d;\n\n        this.qfac = this.pixDims[0] === 0 ? 1 : this.pixDims[0];\n\n        this.quatern_R = [\n          [\n            a * a + b * b - c * c - d * d,\n            2 * b * c - 2 * a * d,\n            2 * b * d + 2 * a * c,\n          ],\n          [\n            2 * b * c + 2 * a * d,\n            a * a + c * c - b * b - d * d,\n            2 * c * d - 2 * a * b,\n          ],\n          [\n            2 * b * d - 2 * a * c,\n            2 * c * d + 2 * a * b,\n            a * a + d * d - c * c - b * b,\n          ],\n        ];\n\n        for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n          for (ctrIn = 0; ctrIn < 3; ctrIn += 1) {\n            this.affine[ctrOut][ctrIn] =\n              this.quatern_R[ctrOut][ctrIn] * this.pixDims[ctrIn + 1];\n            if (ctrIn === 2) {\n              this.affine[ctrOut][ctrIn] *= this.qfac;\n            }\n          }\n        }\n        // The last row of affine matrix is the offset vector\n        this.affine[0][3] = this.qoffset_x;\n        this.affine[1][3] = this.qoffset_y;\n        this.affine[2][3] = this.qoffset_z;\n      } else if (this.sform_code > 0) {\n        //    METHOD 3 (used when sform_code > 0):\n        //    -----------------------------------\n        //    The (x,y,z) coordinates are given by a general affine transformation\n        //    of the (i,j,k) indexes:\n        //\n        //      x = srow_x[0] * i + srow_x[1] * j + srow_x[2] * k + srow_x[3]\n        //      y = srow_y[0] * i + srow_y[1] * j + srow_y[2] * k + srow_y[3]\n        //      z = srow_z[0] * i + srow_z[1] * j + srow_z[2] * k + srow_z[3]\n        //\n        //    The srow_* vectors are in the NIFTI_1 header.  Note that no use is\n        //    made of pixdim[] in this method.\n        for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {\n          for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {\n            index = 280 + (ctrOut * 4 + ctrIn) * 4;\n            this.affine[ctrOut][ctrIn] = Utils.getFloatAt(\n              rawData,\n              index,\n              this.littleEndian\n            );\n          }\n        }\n      }\n\n      this.affine[3][0] = 0;\n      this.affine[3][1] = 0;\n      this.affine[3][2] = 0;\n      this.affine[3][3] = 1;\n\n      this.intent_name = Utils.getStringAt(rawData, 328, 344);\n      this.magic = Utils.getStringAt(rawData, 344, 348);\n\n      this.isHDR = this.magic === String.fromCharCode.apply(null, NIFTI1.MAGIC_NUMBER2);\n\n      if (rawData.byteLength > NIFTI1.MAGIC_COOKIE) {\n        this.extensionFlag[0] = Utils.getByteAt(rawData, 348);\n        this.extensionFlag[1] = Utils.getByteAt(rawData, 348 + 1);\n        this.extensionFlag[2] = Utils.getByteAt(rawData, 348 + 2);\n        this.extensionFlag[3] = Utils.getByteAt(rawData, 348 + 3);\n\n        let isExtensionCapable = true;\n        if ((!this.isHDR) && (this.vox_offset <= 352))\n          isExtensionCapable = false;\n        if (rawData.byteLength <= (352 + 16))\n          isExtensionCapable = false;\n\n        if (isExtensionCapable && this.extensionFlag[0]) {\n          // read our extensions\n          this.extensions = Utils.getExtensionsAt(\n            rawData,\n            this.getExtensionLocation(),\n            this.littleEndian,\n            this.vox_offset\n          );\n\n          // set the extensionSize and extensionCode from the first extension found\n          this.extensionSize = this.extensions[0].esize;\n          this.extensionCode = this.extensions[0].ecode;\n        }\n      }\n    }\n\n    /**\n     * Returns a formatted string of header fields.\n     * @returns {string}\n     */\n    toFormattedString(): string {\n      var fmt = Utils.formatNumber,\n        string = \"\";\n\n      string += \"Dim Info = \" + this.dim_info + \"\\n\";\n\n      string +=\n        \"Image Dimensions (1-8): \" +\n        this.dims[0] +\n        \", \" +\n        this.dims[1] +\n        \", \" +\n        this.dims[2] +\n        \", \" +\n        this.dims[3] +\n        \", \" +\n        this.dims[4] +\n        \", \" +\n        this.dims[5] +\n        \", \" +\n        this.dims[6] +\n        \", \" +\n        this.dims[7] +\n        \"\\n\";\n\n      string +=\n        \"Intent Parameters (1-3): \" +\n        this.intent_p1 +\n        \", \" +\n        this.intent_p2 +\n        \", \" +\n        this.intent_p3 +\n        \"\\n\";\n\n      string += \"Intent Code = \" + this.intent_code + \"\\n\";\n      string +=\n        \"Datatype = \" +\n        this.datatypeCode +\n        \" (\" +\n        this.getDatatypeCodeString(this.datatypeCode) +\n        \")\\n\";\n      string += \"Bits Per Voxel = \" + this.numBitsPerVoxel + \"\\n\";\n      string += \"Slice Start = \" + this.slice_start + \"\\n\";\n      string +=\n        \"Voxel Dimensions (1-8): \" +\n        fmt(this.pixDims[0]) +\n        \", \" +\n        fmt(this.pixDims[1]) +\n        \", \" +\n        fmt(this.pixDims[2]) +\n        \", \" +\n        fmt(this.pixDims[3]) +\n        \", \" +\n        fmt(this.pixDims[4]) +\n        \", \" +\n        fmt(this.pixDims[5]) +\n        \", \" +\n        fmt(this.pixDims[6]) +\n        \", \" +\n        fmt(this.pixDims[7]) +\n        \"\\n\";\n\n      string += \"Image Offset = \" + this.vox_offset + \"\\n\";\n      string +=\n        \"Data Scale:  Slope = \" +\n        fmt(this.scl_slope) +\n        \"  Intercept = \" +\n        fmt(this.scl_inter) +\n        \"\\n\";\n      string += \"Slice End = \" + this.slice_end + \"\\n\";\n      string += \"Slice Code = \" + this.slice_code + \"\\n\";\n      string +=\n        \"Units Code = \" +\n        this.xyzt_units +\n        \" (\" +\n        this.getUnitsCodeString(\n          NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units\n        ) +\n        \", \" +\n        this.getUnitsCodeString(\n          NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units\n        ) +\n        \")\\n\";\n      string +=\n        \"Display Range:  Max = \" +\n        fmt(this.cal_max) +\n        \"  Min = \" +\n        fmt(this.cal_min) +\n        \"\\n\";\n      string += \"Slice Duration = \" + this.slice_duration + \"\\n\";\n      string += \"Time Axis Shift = \" + this.toffset + \"\\n\";\n      string += 'Description: \"' + this.description + '\"\\n';\n      string += 'Auxiliary File: \"' + this.aux_file + '\"\\n';\n      string +=\n        \"Q-Form Code = \" +\n        this.qform_code +\n        \" (\" +\n        this.getTransformCodeString(this.qform_code) +\n        \")\\n\";\n      string +=\n        \"S-Form Code = \" +\n        this.sform_code +\n        \" (\" +\n        this.getTransformCodeString(this.sform_code) +\n        \")\\n\";\n      string +=\n        \"Quaternion Parameters:  \" +\n        \"b = \" +\n        fmt(this.quatern_b) +\n        \"  \" +\n        \"c = \" +\n        fmt(this.quatern_c) +\n        \"  \" +\n        \"d = \" +\n        fmt(this.quatern_d) +\n        \"\\n\";\n\n      string +=\n        \"Quaternion Offsets:  \" +\n        \"x = \" +\n        this.qoffset_x +\n        \"  \" +\n        \"y = \" +\n        this.qoffset_y +\n        \"  \" +\n        \"z = \" +\n        this.qoffset_z +\n        \"\\n\";\n\n      string +=\n        \"S-Form Parameters X: \" +\n        fmt(this.affine[0][0]) +\n        \", \" +\n        fmt(this.affine[0][1]) +\n        \", \" +\n        fmt(this.affine[0][2]) +\n        \", \" +\n        fmt(this.affine[0][3]) +\n        \"\\n\";\n\n      string +=\n        \"S-Form Parameters Y: \" +\n        fmt(this.affine[1][0]) +\n        \", \" +\n        fmt(this.affine[1][1]) +\n        \", \" +\n        fmt(this.affine[1][2]) +\n        \", \" +\n        fmt(this.affine[1][3]) +\n        \"\\n\";\n\n      string +=\n        \"S-Form Parameters Z: \" +\n        fmt(this.affine[2][0]) +\n        \", \" +\n        fmt(this.affine[2][1]) +\n        \", \" +\n        fmt(this.affine[2][2]) +\n        \", \" +\n        fmt(this.affine[2][3]) +\n        \"\\n\";\n\n      string += 'Intent Name: \"' + this.intent_name + '\"\\n';\n\n      if (this.extensionFlag[0]) {\n        string +=\n          \"Extension: Size = \" +\n          this.extensionSize +\n          \"  Code = \" +\n          this.extensionCode +\n          \"\\n\";\n      }\n\n      return string;\n    }\n\n    /**\n     * Returns a human-readable string of datatype.\n     * @param {number} code\n     * @returns {string}\n     */\n    getDatatypeCodeString = function (code: number): string {\n      if (code === NIFTI1.TYPE_UINT8) {\n        return \"1-Byte Unsigned Integer\";\n      } else if (code === NIFTI1.TYPE_INT16) {\n        return \"2-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_INT32) {\n        return \"4-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_FLOAT32) {\n        return \"4-Byte Float\";\n      } else if (code === NIFTI1.TYPE_FLOAT64) {\n        return \"8-Byte Float\";\n      } else if (code === NIFTI1.TYPE_RGB24) {\n        return \"RGB\";\n      } else if (code === NIFTI1.TYPE_INT8) {\n        return \"1-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_UINT16) {\n        return \"2-Byte Unsigned Integer\";\n      } else if (code === NIFTI1.TYPE_UINT32) {\n        return \"4-Byte Unsigned Integer\";\n      } else if (code === NIFTI1.TYPE_INT64) {\n        return \"8-Byte Signed Integer\";\n      } else if (code === NIFTI1.TYPE_UINT64) {\n        return \"8-Byte Unsigned Integer\";\n      } else {\n        return \"Unknown\";\n      }\n    };\n\n    /**\n     * Returns a human-readable string of transform type.\n     * @param {number} code\n     * @returns {string}\n     */\n    getTransformCodeString = function (code: number): string {\n      if (code === NIFTI1.XFORM_SCANNER_ANAT) {\n        return \"Scanner\";\n      } else if (code === NIFTI1.XFORM_ALIGNED_ANAT) {\n        return \"Aligned\";\n      } else if (code === NIFTI1.XFORM_TALAIRACH) {\n        return \"Talairach\";\n      } else if (code === NIFTI1.XFORM_MNI_152) {\n        return \"MNI\";\n      } else {\n        return \"Unknown\";\n      }\n    };\n\n    /**\n     * Returns a human-readable string of spatial and temporal units.\n     * @param {number} code\n     * @returns {string}\n     */\n    getUnitsCodeString = function (code: number): string {\n      if (code === NIFTI1.UNITS_METER) {\n        return \"Meters\";\n      } else if (code === NIFTI1.UNITS_MM) {\n        return \"Millimeters\";\n      } else if (code === NIFTI1.UNITS_MICRON) {\n        return \"Microns\";\n      } else if (code === NIFTI1.UNITS_SEC) {\n        return \"Seconds\";\n      } else if (code === NIFTI1.UNITS_MSEC) {\n        return \"Milliseconds\";\n      } else if (code === NIFTI1.UNITS_USEC) {\n        return \"Microseconds\";\n      } else if (code === NIFTI1.UNITS_HZ) {\n        return \"Hz\";\n      } else if (code === NIFTI1.UNITS_PPM) {\n        return \"PPM\";\n      } else if (code === NIFTI1.UNITS_RADS) {\n        return \"Rads\";\n      } else {\n        return \"Unknown\";\n      }\n    };\n\n    /**\n     * Returns the qform matrix.\n     * @returns {Array.<Array.<number>>}\n     */\n    getQformMat(): Array<Array<number>> {\n      return this.convertNiftiQFormToNiftiSForm(\n        this.quatern_b,\n        this.quatern_c,\n        this.quatern_d,\n        this.qoffset_x,\n        this.qoffset_y,\n        this.qoffset_z,\n        this.pixDims[1],\n        this.pixDims[2],\n        this.pixDims[3],\n        this.pixDims[0]\n      );\n    }\n\n    /**\n     * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n     * @param {number} qb\n     * @param {number} qc\n     * @param {number} qd\n     * @param {number} qx\n     * @param {number} qy\n     * @param {number} qz\n     * @param {number} dx\n     * @param {number} dy\n     * @param {number} dz\n     * @param {number} qfac\n     * @returns {Array.<Array.<number>>}\n     */\n    convertNiftiQFormToNiftiSForm(\n      qb: number,\n      qc: number,\n      qd: number,\n      qx: number,\n      qy: number,\n      qz: number,\n      dx: number,\n      dy: number,\n      dz: number,\n      qfac: number\n    ): Array<Array<number>> {\n      var R = [\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0],\n        ],\n        a,\n        b = qb,\n        c = qc,\n        d = qd,\n        xd,\n        yd,\n        zd;\n\n      // last row is always [ 0 0 0 1 ]\n      R[3][0] = R[3][1] = R[3][2] = 0.0;\n      R[3][3] = 1.0;\n\n      // compute a parameter from b,c,d\n      a = 1.0 - (b * b + c * c + d * d);\n      if (a < 0.0000001) {\n        /* special case */\n\n        a = 1.0 / Math.sqrt(b * b + c * c + d * d);\n        b *= a;\n        c *= a;\n        d *= a; /* normalize (b,c,d) vector */\n        a = 0.0; /* a = 0 ==> 180 degree rotation */\n      } else {\n        a = Math.sqrt(a); /* angle = 2*arccos(a) */\n      }\n\n      // load rotation matrix, including scaling factors for voxel sizes\n      xd = dx > 0.0 ? dx : 1.0; /* make sure are positive */\n      yd = dy > 0.0 ? dy : 1.0;\n      zd = dz > 0.0 ? dz : 1.0;\n\n      if (qfac < 0.0) {\n        zd = -zd; /* left handedness? */\n      }\n\n      R[0][0] = (a * a + b * b - c * c - d * d) * xd;\n      R[0][1] = 2.0 * (b * c - a * d) * yd;\n      R[0][2] = 2.0 * (b * d + a * c) * zd;\n      R[1][0] = 2.0 * (b * c + a * d) * xd;\n      R[1][1] = (a * a + c * c - b * b - d * d) * yd;\n      R[1][2] = 2.0 * (c * d - a * b) * zd;\n      R[2][0] = 2.0 * (b * d - a * c) * xd;\n      R[2][1] = 2.0 * (c * d + a * b) * yd;\n      R[2][2] = (a * a + d * d - c * c - b * b) * zd;\n\n      // load offsets\n      R[0][3] = qx;\n      R[1][3] = qy;\n      R[2][3] = qz;\n\n      return R;\n    }\n\n    /**\n     * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)\n     * @param {Array.<Array.<number>>} R\n     * @returns {string}\n     */\n    convertNiftiSFormToNEMA(R: Array<Array<number>>): string | null {\n      var xi,\n        xj,\n        xk,\n        yi,\n        yj,\n        yk,\n        zi,\n        zj,\n        zk,\n        val,\n        detQ,\n        detP,\n        i,\n        j,\n        k,\n        p,\n        q,\n        r,\n        ibest,\n        jbest,\n        kbest,\n        pbest,\n        qbest,\n        rbest,\n        M,\n        vbest,\n        Q,\n        P,\n        iChar,\n        jChar,\n        kChar,\n        iSense,\n        jSense,\n        kSense;\n      k = 0;\n\n      Q = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n      ];\n      P = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n      ];\n\n      //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */\n\n      //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */\n\n      /* load column vectors for each (i,j,k) direction from matrix */\n\n      /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/\n\n      xi = R[0][0];\n      xj = R[0][1];\n      xk = R[0][2];\n\n      yi = R[1][0];\n      yj = R[1][1];\n      yk = R[1][2];\n\n      zi = R[2][0];\n      zj = R[2][1];\n      zk = R[2][2];\n\n      /* normalize column vectors to get unit vectors along each ijk-axis */\n\n      /* normalize i axis */\n      val = Math.sqrt(xi * xi + yi * yi + zi * zi);\n      if (val === 0.0) {\n        /* stupid input */\n        return null;\n      }\n\n      xi /= val;\n      yi /= val;\n      zi /= val;\n\n      /* normalize j axis */\n      val = Math.sqrt(xj * xj + yj * yj + zj * zj);\n      if (val === 0.0) {\n        /* stupid input */\n        return null;\n      }\n\n      xj /= val;\n      yj /= val;\n      zj /= val;\n\n      /* orthogonalize j axis to i axis, if needed */\n      val = xi * xj + yi * yj + zi * zj; /* dot product between i and j */\n      if (Math.abs(val) > 1e-4) {\n        xj -= val * xi;\n        yj -= val * yi;\n        zj -= val * zi;\n        val = Math.sqrt(xj * xj + yj * yj + zj * zj); /* must renormalize */\n        if (val === 0.0) {\n          /* j was parallel to i? */\n          return null;\n        }\n        xj /= val;\n        yj /= val;\n        zj /= val;\n      }\n\n      /* normalize k axis; if it is zero, make it the cross product i x j */\n      val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n      if (val === 0.0) {\n        xk = yi * zj - zi * yj;\n        yk = zi * xj - zj * xi;\n        zk = xi * yj - yi * xj;\n      } else {\n        xk /= val;\n        yk /= val;\n        zk /= val;\n      }\n\n      /* orthogonalize k to i */\n      val = xi * xk + yi * yk + zi * zk; /* dot product between i and k */\n      if (Math.abs(val) > 1e-4) {\n        xk -= val * xi;\n        yk -= val * yi;\n        zk -= val * zi;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {\n          /* bad */\n          return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n      }\n\n      /* orthogonalize k to j */\n      val = xj * xk + yj * yk + zj * zk; /* dot product between j and k */\n      if (Math.abs(val) > 1e-4) {\n        xk -= val * xj;\n        yk -= val * yj;\n        zk -= val * zj;\n        val = Math.sqrt(xk * xk + yk * yk + zk * zk);\n        if (val === 0.0) {\n          /* bad */\n          return null;\n        }\n        xk /= val;\n        yk /= val;\n        zk /= val;\n      }\n\n      Q[0][0] = xi;\n      Q[0][1] = xj;\n      Q[0][2] = xk;\n      Q[1][0] = yi;\n      Q[1][1] = yj;\n      Q[1][2] = yk;\n      Q[2][0] = zi;\n      Q[2][1] = zj;\n      Q[2][2] = zk;\n\n      /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */\n\n      detQ = this.nifti_mat33_determ(Q);\n      if (detQ === 0.0) {\n        /* shouldn't happen unless user is a DUFIS */\n        return null;\n      }\n\n      /* Build and test all possible +1/-1 coordinate permutation matrices P;\n     then find the P such that the rotation matrix M=PQ is closest to the\n     identity, in the sense of M having the smallest total rotation angle. */\n\n      /* Despite the formidable looking 6 nested loops, there are\n     only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */\n\n      vbest = -666.0;\n      ibest = pbest = qbest = rbest = 1;\n      jbest = 2;\n      kbest = 3;\n\n      for (i = 1; i <= 3; i += 1) {\n        /* i = column number to use for row #1 */\n        for (j = 1; j <= 3; j += 1) {\n          /* j = column number to use for row #2 */\n          if (i !== j) {\n            for (k = 1; k <= 3; k += 1) {\n              /* k = column number to use for row #3 */\n              if (!(i === k || j === k)) {\n                P[0][0] =\n                  P[0][1] =\n                  P[0][2] =\n                  P[1][0] =\n                  P[1][1] =\n                  P[1][2] =\n                  P[2][0] =\n                  P[2][1] =\n                  P[2][2] =\n                    0.0;\n                for (p = -1; p <= 1; p += 2) {\n                  /* p,q,r are -1 or +1      */\n                  for (q = -1; q <= 1; q += 2) {\n                    /* and go into rows #1,2,3 */\n                    for (r = -1; r <= 1; r += 2) {\n                      P[0][i - 1] = p;\n                      P[1][j - 1] = q;\n                      P[2][k - 1] = r;\n                      detP =\n                        this.nifti_mat33_determ(P); /* sign of permutation */\n                      if (detP * detQ > 0.0) {\n                        M = this.nifti_mat33_mul(P, Q);\n\n                        /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */\n                        /* we want largest trace(M) == smallest angle == M nearest to I */\n\n                        val = M[0][0] + M[1][1] + M[2][2]; /* trace */\n                        if (val > vbest) {\n                          vbest = val;\n                          ibest = i;\n                          jbest = j;\n                          kbest = k;\n                          pbest = p;\n                          qbest = q;\n                          rbest = r;\n                        }\n                      } /* doesn't match sign of Q */\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.\n\n     The matrix P that corresponds is the best permutation approximation\n     to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates\n     to the (i,j,k) axes.\n\n     For example, the first row of P (which contains pbest in column ibest)\n     determines the way the i axis points relative to the anatomical\n     (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,\n     which is direction P2A (if pbest > 0) or A2P (if pbest < 0).\n\n     So, using ibest and pbest, we can assign the output code for\n     the i axis.  Mutatis mutandis for the j and k axes, of course. */\n\n      iChar = jChar = kChar = iSense = jSense = kSense = \"\";\n\n      switch (ibest * pbest) {\n        case 1 /*i = NIFTI_L2R*/:\n          iChar = \"X\";\n          iSense = \"+\";\n          break;\n        case -1 /*i = NIFTI_R2L*/:\n          iChar = \"X\";\n          iSense = \"-\";\n          break;\n        case 2 /*i = NIFTI_P2A*/:\n          iChar = \"Y\";\n          iSense = \"+\";\n          break;\n        case -2 /*i = NIFTI_A2P*/:\n          iChar = \"Y\";\n          iSense = \"-\";\n          break;\n        case 3 /*i = NIFTI_I2S*/:\n          iChar = \"Z\";\n          iSense = \"+\";\n          break;\n        case -3 /*i = NIFTI_S2I*/:\n          iChar = \"Z\";\n          iSense = \"-\";\n          break;\n      }\n\n      switch (jbest * qbest) {\n        case 1 /*j = NIFTI_L2R*/:\n          jChar = \"X\";\n          jSense = \"+\";\n          break;\n        case -1 /*j = NIFTI_R2L*/:\n          jChar = \"X\";\n          jSense = \"-\";\n          break;\n        case 2 /*j = NIFTI_P2A*/:\n          jChar = \"Y\";\n          jSense = \"+\";\n          break;\n        case -2 /*j = NIFTI_A2P*/:\n          jChar = \"Y\";\n          jSense = \"-\";\n          break;\n        case 3 /*j = NIFTI_I2S*/:\n          jChar = \"Z\";\n          jSense = \"+\";\n          break;\n        case -3 /*j = NIFTI_S2I*/:\n          jChar = \"Z\";\n          jSense = \"-\";\n          break;\n      }\n\n      switch (kbest * rbest) {\n        case 1 /*k = NIFTI_L2R*/:\n          kChar = \"X\";\n          kSense = \"+\";\n          break;\n        case -1 /*k = NIFTI_R2L*/:\n          kChar = \"X\";\n          kSense = \"-\";\n          break;\n        case 2 /*k = NIFTI_P2A*/:\n          kChar = \"Y\";\n          kSense = \"+\";\n          break;\n        case -2 /*k = NIFTI_A2P*/:\n          kChar = \"Y\";\n          kSense = \"-\";\n          break;\n        case 3 /*k = NIFTI_I2S*/:\n          kChar = \"Z\";\n          kSense = \"+\";\n          break;\n        case -3 /*k = NIFTI_S2I*/:\n          kChar = \"Z\";\n          kSense = \"-\";\n          break;\n      }\n\n      return iChar + jChar + kChar + iSense + jSense + kSense;\n    }\n\n    nifti_mat33_mul = function (A: number[][], B: number[][]) {\n      var C = [\n          [0, 0, 0],\n          [0, 0, 0],\n          [0, 0, 0],\n        ],\n        i,\n        j;\n\n      for (i = 0; i < 3; i += 1) {\n        for (j = 0; j < 3; j += 1) {\n          C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + A[i][2] * B[2][j];\n        }\n      }\n\n      return C;\n    };\n\n    nifti_mat33_determ = function (R: number[][]) {\n      var r11, r12, r13, r21, r22, r23, r31, r32, r33;\n      /*  INPUT MATRIX:  */\n      r11 = R[0][0];\n      r12 = R[0][1];\n      r13 = R[0][2];\n      r21 = R[1][0];\n      r22 = R[1][1];\n      r23 = R[1][2];\n      r31 = R[2][0];\n      r32 = R[2][1];\n      r33 = R[2][2];\n\n      return (\n        r11 * r22 * r33 -\n        r11 * r32 * r23 -\n        r21 * r12 * r33 +\n        r21 * r32 * r13 +\n        r31 * r12 * r23 -\n        r31 * r22 * r13\n      );\n    };\n\n    /**\n     * Returns the byte index of the extension.\n     * @returns {number}\n     */\n    getExtensionLocation() {\n      return NIFTI1.MAGIC_COOKIE + 4;\n    }\n\n    /**\n     * Returns the extension size.\n     * @param {DataView} data\n     * @returns {number}\n     */\n    getExtensionSize(data: DataView) {\n      return Utils.getIntAt(\n        data,\n        this.getExtensionLocation(),\n        this.littleEndian\n      );\n    }\n\n    /**\n     * Returns the extension code.\n     * @param {DataView} data\n     * @returns {number}\n     */\n    getExtensionCode(data: DataView) {\n      return Utils.getIntAt(\n        data,\n        this.getExtensionLocation() + 4,\n        this.littleEndian\n      );\n    }\n\n    /**\n     * Adds an extension\n     * @param {NIFTIEXTENSION} extension\n     * @param {number} index\n     */\n    addExtension(extension: NIFTIEXTENSION, index = -1) {\n      if (index == -1) {\n        this.extensions.push(extension);\n      } else {\n        this.extensions.splice(index, 0, extension);\n      }\n      this.vox_offset += extension.esize;\n    }\n\n    /**\n     * Removes an extension\n     * @param {number} index\n     */\n    removeExtension(index: number) {\n      let extension = this.extensions[index];\n      if (extension) {\n        this.vox_offset -= extension.esize;\n      }\n      this.extensions.splice(index, 1);\n    }\n\n    /**\n     * Returns header as ArrayBuffer.\n     * @param {boolean} includeExtensions - should extension bytes be included\n     * @returns {ArrayBuffer}\n     */\n    toArrayBuffer(includeExtensions = false) {\n      const SHORT_SIZE = 2;\n      const FLOAT32_SIZE = 4;\n      let byteSize = 348 + 4; // + 4 for the extension bytes\n\n      // calculate necessary size\n      if (includeExtensions) {\n        for (let extension of this.extensions) {\n          byteSize += extension.esize;\n        }\n      }\n      let byteArray = new Uint8Array(byteSize);\n      let view = new DataView(byteArray.buffer);\n      // sizeof_hdr\n      view.setInt32(0, 348, this.littleEndian);\n\n      // data_type, db_name, extents, session_error, regular are not used\n\n      // dim_info\n      view.setUint8(39, this.dim_info);\n\n      // dims\n      for (let i = 0; i < 8; i++) {\n        view.setUint16(40 + SHORT_SIZE * i, this.dims[i], this.littleEndian);\n      }\n\n      // intent_p1, intent_p2, intent_p3\n      view.setFloat32(56, this.intent_p1, this.littleEndian);\n      view.setFloat32(60, this.intent_p2, this.littleEndian);\n      view.setFloat32(64, this.intent_p3, this.littleEndian);\n\n      // intent_code, datatype, bitpix, slice_start\n      view.setInt16(68, this.intent_code, this.littleEndian);\n      view.setInt16(70, this.datatypeCode, this.littleEndian);\n      view.setInt16(72, this.numBitsPerVoxel, this.littleEndian);\n      view.setInt16(74, this.slice_start, this.littleEndian);\n\n      // pixdim[8], vox_offset, scl_slope, scl_inter\n      for (let i = 0; i < 8; i++) {\n        view.setFloat32(\n          76 + FLOAT32_SIZE * i,\n          this.pixDims[i],\n          this.littleEndian\n        );\n      }\n      view.setFloat32(108, this.vox_offset, this.littleEndian);\n      view.setFloat32(112, this.scl_slope, this.littleEndian);\n      view.setFloat32(116, this.scl_inter, this.littleEndian);\n\n      // slice_end\n      view.setInt16(120, this.slice_end, this.littleEndian);\n\n      // slice_code, xyzt_units\n      view.setUint8(122, this.slice_code);\n      view.setUint8(123, this.xyzt_units);\n\n      // cal_max, cal_min, slice_duration, toffset\n      view.setFloat32(124, this.cal_max, this.littleEndian);\n      view.setFloat32(128, this.cal_min, this.littleEndian);\n      view.setFloat32(132, this.slice_duration, this.littleEndian);\n      view.setFloat32(136, this.toffset, this.littleEndian);\n\n      // glmax, glmin are unused\n\n      // descrip and aux_file\n      byteArray.set(Buffer.from(this.description), 148);\n      byteArray.set(Buffer.from(this.aux_file), 228);\n\n      // qform_code, sform_code\n      view.setInt16(252, this.qform_code, this.littleEndian);\n      view.setInt16(254, this.sform_code, this.littleEndian);\n\n      // quatern_b, quatern_c, quatern_d, qoffset_x, qoffset_y, qoffset_z, srow_x[4], srow_y[4], and srow_z[4]\n      view.setFloat32(256, this.quatern_b, this.littleEndian);\n      view.setFloat32(260, this.quatern_c, this.littleEndian);\n      view.setFloat32(264, this.quatern_d, this.littleEndian);\n      view.setFloat32(268, this.qoffset_x, this.littleEndian);\n      view.setFloat32(272, this.qoffset_y, this.littleEndian);\n      view.setFloat32(276, this.qoffset_z, this.littleEndian);\n      const flattened = this.affine.flat();\n      // we only want the first three rows\n      for (let i = 0; i < 12; i++) {\n        view.setFloat32(\n          280 + FLOAT32_SIZE * i,\n          flattened[i],\n          this.littleEndian\n        );\n      }\n\n      // intent_name and magic\n      byteArray.set(Buffer.from(this.intent_name), 328);\n      byteArray.set(Buffer.from(this.magic), 344);\n\n      // add our extension data\n      if (includeExtensions) {\n        byteArray.set(Uint8Array.from([1, 0, 0, 0]), 348);\n        let extensionByteIndex = this.getExtensionLocation();\n        for (const extension of this.extensions) {\n          view.setInt32(\n            extensionByteIndex,\n            extension.esize,\n            extension.littleEndian\n          );\n          view.setInt32(\n            extensionByteIndex + 4,\n            extension.ecode,\n            extension.littleEndian\n          );\n          byteArray.set(\n            new Uint8Array(extension.edata),\n            extensionByteIndex + 8\n          );\n          extensionByteIndex += extension.esize;\n        }\n      } else {\n        // In a .nii file, these 4 bytes will always be present\n        byteArray.set(new Uint8Array(4).fill(0), 348);\n      }\n\n      return byteArray.buffer;\n    }\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}