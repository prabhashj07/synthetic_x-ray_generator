{"ast":null,"code":"var _jsxFileName = \"/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport niftiReader from './libs/nifti-reader.js'; // Updated import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeJS = ({\n  rotation,\n  tilt,\n  translation\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeeeeee);\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 50;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n    const loadNiftiFile = async url => {\n      try {\n        const {\n          header,\n          image\n        } = await niftiReader.readNiftiFile(url);\n        setNiftiHeader(header);\n        setNiftiImage(image);\n        const slices = header.dims[3];\n        setSlice(Math.round(slices / 2));\n      } catch (error) {\n        console.error('Error loading NIfTI file:', error);\n      }\n    };\n    loadNiftiFile('./CT_Abdo.nii.gz'); // Ensure the path is correct\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      scene.children.forEach(mesh => {\n        mesh.rotation.y = rotation;\n        mesh.rotation.x = tilt;\n      });\n      renderer.render(scene, camera);\n    };\n    animate();\n    const mountElement = mountRef.current;\n    return () => {\n      if (mountElement) {\n        mountElement.removeChild(renderer.domElement);\n      }\n    };\n  }, [rotation, tilt, translation]);\n  useEffect(() => {\n    if (niftiHeader && niftiImage) {\n      const cols = niftiHeader.dims[1];\n      const rows = niftiHeader.dims[2];\n      const depth = niftiHeader.dims[3];\n      const textureData = new Uint8Array(cols * rows);\n      const sliceSize = cols * rows;\n      const sliceOffset = sliceSize * slice;\n      for (let i = 0; i < sliceSize; i++) {\n        textureData[i] = niftiImage[sliceOffset + i];\n      }\n      const texture = new THREE.DataTexture(textureData, cols, rows, THREE.LuminanceFormat);\n      texture.needsUpdate = true;\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        side: THREE.DoubleSide\n      });\n      const geometry = new THREE.PlaneGeometry(20, 20, 1, 1);\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.z = 0;\n      const scene = new THREE.Scene();\n      scene.add(mesh);\n      const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n      camera.position.z = 50;\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      mountRef.current.appendChild(renderer.domElement);\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n      animate();\n    }\n  }, [niftiHeader, niftiImage, slice]);\n  const handleSliderChange = event => {\n    setSlice(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: niftiHeader ? niftiHeader.dims[3] - 1 : 0,\n      value: slice,\n      onChange: handleSliderChange,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(ThreeJS, \"tA38dBQUlVjQWo0sPJkb3O/Z4cA=\");\n_c = ThreeJS;\nexport default ThreeJS;\nvar _c;\n$RefreshReg$(_c, \"ThreeJS\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","niftiReader","jsxDEV","_jsxDEV","ThreeJS","rotation","tilt","translation","_s","mountRef","niftiHeader","setNiftiHeader","niftiImage","setNiftiImage","slice","setSlice","scene","Scene","background","Color","camera","PerspectiveCamera","current","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","loadNiftiFile","url","header","image","readNiftiFile","slices","dims","Math","round","error","console","animate","requestAnimationFrame","children","forEach","mesh","y","x","render","mountElement","removeChild","cols","rows","depth","textureData","Uint8Array","sliceSize","sliceOffset","i","texture","DataTexture","LuminanceFormat","needsUpdate","material","MeshBasicMaterial","map","side","DoubleSide","geometry","PlaneGeometry","Mesh","add","handleSliderChange","event","target","value","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","_c","$RefreshReg$"],"sources":["/home/prabhashj07/synthetic_x-ray_generator/src/ThreeJS.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport niftiReader from './libs/nifti-reader.js'; // Updated import path\n\nconst ThreeJS = ({ rotation, tilt, translation }) => {\n  const mountRef = useRef(null);\n  const [niftiHeader, setNiftiHeader] = useState(null);\n  const [niftiImage, setNiftiImage] = useState(null);\n  const [slice, setSlice] = useState(0);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeeeeee);\n\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.z = 50;\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    const loadNiftiFile = async (url) => {\n      try {\n        const { header, image } = await niftiReader.readNiftiFile(url);\n        setNiftiHeader(header);\n        setNiftiImage(image);\n\n        const slices = header.dims[3];\n        setSlice(Math.round(slices / 2));\n      } catch (error) {\n        console.error('Error loading NIfTI file:', error);\n      }\n    };\n\n    loadNiftiFile('./CT_Abdo.nii.gz'); // Ensure the path is correct\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      scene.children.forEach((mesh) => {\n        mesh.rotation.y = rotation;\n        mesh.rotation.x = tilt;\n      });\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    const mountElement = mountRef.current;\n\n    return () => {\n      if (mountElement) {\n        mountElement.removeChild(renderer.domElement);\n      }\n    };\n  }, [rotation, tilt, translation]);\n\n  useEffect(() => {\n    if (niftiHeader && niftiImage) {\n      const cols = niftiHeader.dims[1];\n      const rows = niftiHeader.dims[2];\n      const depth = niftiHeader.dims[3];\n\n      const textureData = new Uint8Array(cols * rows);\n      const sliceSize = cols * rows;\n      const sliceOffset = sliceSize * slice;\n\n      for (let i = 0; i < sliceSize; i++) {\n        textureData[i] = niftiImage[sliceOffset + i];\n      }\n\n      const texture = new THREE.DataTexture(textureData, cols, rows, THREE.LuminanceFormat);\n      texture.needsUpdate = true;\n\n      const material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n      const geometry = new THREE.PlaneGeometry(20, 20, 1, 1);\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.z = 0;\n\n      const scene = new THREE.Scene();\n      scene.add(mesh);\n\n      const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n      camera.position.z = 50;\n\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      mountRef.current.appendChild(renderer.domElement);\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    }\n  }, [niftiHeader, niftiImage, slice]);\n\n  const handleSliderChange = (event) => {\n    setSlice(event.target.value);\n  };\n\n  return (\n    <div>\n      <div ref={mountRef} style={{ width: '100%', height: '100%' }}></div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max={niftiHeader ? niftiHeader.dims[3] - 1 : 0}\n        value={slice}\n        onChange={handleSliderChange}\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n};\n\nexport default ThreeJS;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}